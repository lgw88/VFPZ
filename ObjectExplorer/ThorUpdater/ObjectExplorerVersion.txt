Lparameters toUpdateObject
Local lcDate, ldDate

lcDate = '20230928'

With m.toUpdateObject
	.VersionNumber    = '3.51.01 - ' + lcDate
	.AppID            = 'ObjectExplorer'

	.AvailableVersion = 'Object Explorer-3.51.01-08671-' + lcDate
	.RegisterWithThor = GetRegisterWithThor(.ApplicationName)
	.Notes			  = GetReleaseNotes()
Endwith

Return m.toUpdateObject


* ================================================================================
* ================================================================================
* ================================================================================

Procedure GetRegisterWithThor(lcAppName)

Local lcAppName, lcClassDefinitions, lcToolCode, lcDefineStatements, lcDescription, lcRegisterWithThor 

* Following indirect sequence is used so that blocks of text (code) can be pasted in from working code.

* The description for the tool
lcDescription	   = GetDescription()

* Any #Define statements (will appear at the beginning of the tool)
lcDefineStatements = GetDefineStatements()

* The code in Proc ToolCode
lcToolCode 		   = GetToolCode()

* somewhat of a misnomer; all procedure and class definitions that follow Proc ToolCode
lcClassDefinitions = GetClassDefinitions()

* This is code to execute after the project has been installed by Thor for the
* first time. Edit this if you want do something different (such as running
* the installed code) or display a different message. You can use code like
* this if you want to execute the installed code; Thor replaces
* ##InstallFolder## with the installation path for the project:
*
* 'do "##InstallFolder##MyProject.prg"'

text to lcRegisterWithThor noshow textmerge
	MessageBox('<<lcAppName>> installed in folder ##InstallFolder##', 0, '<<lcAppName>> Installed', 5000)

* Create the tool under Thor's Tool folder

	loThorInfo = Execscript (_Screen.cThorDispatcher, 'Thor Register=')
	with loThorInfo

* Required properties.

		.AppID      = 'ObjectExplorer'
		.PRGName    = 'Thor_Tool_ObjectExplorer'
		.FolderName = '##InstallFolder##'
		.Prompt     = '<<lcAppName>>'

		<< 'Text to .Description NoShow' >>
<<lcDescription>>
		<< 'EndText' >>

* These are used to group and sort tools when they are displayed in menus or the Thor form.

		.Category        = 'Applications'
		.CanRunAtStartUp = .F.

* Options for this tool
		.OptionClasses   = 'clsPublicVariableNameProperties, clsTopLevelForm' 
		.OptionTool      = '<<lcAppName>>'

		.Link = ccLink 
		.Version = ccVERSIONNUMBER 

* And the actual code for the tool
		<< 'Text To .DefineStatements Noshow '>>
<<lcDefineStatements>>
		<< 'Endtext' >>

		<< 'Text To .Code Noshow '>>
<<lcToolCode>>
		<< 'Endtext' >>

		<< 'Text To .ClassDefinitions Noshow '>>
<<lcClassDefinitions >>
		<< 'Endtext' >>
		
* Register the tool with Thor.
		llRegister = .Register()
	endwith
endtext

Return m.lcRegisterWithThor 
EndProc


* ================================================================================
* ================================================================================
Procedure GetDescription
	Local lcDescription

	Text To m.lcDescription Noshow
Object Explorer
	Endtext

	Return Evl(m.lcDescription, '')
EndProc


* ================================================================================
* ================================================================================
Procedure GetDefineStatements
	Local lcDefineStatements

	Text To m.lcDefineStatements Noshow PreText 7
#Define ccTool 			'Object Explorer'
#Define ccKey  			'Public Variable Name'
#Define ccKeyTopLevel  	'TopLevel'

#Define CRLF   			Chr[13] + chr[10]

#Define ccHomeFolder 	_Screen.cThorFolder + 'Tools\Apps\Object Explorer\'


	EndText 
	Return Evl(m.lcDefineStatements, '')
EndProc


* ================================================================================
* ================================================================================
Procedure GetToolCode
	Local lcCode

	Text To m.lcCode Noshow
	Local lcForm, lcHighLightedText, lcObjectName, lcPublicVariable, lo_Exception, lo_Object
	Local lo_ObjectUnderMouse, lo_Objects[1]

	lo_ObjectUnderMouse	= Sys(1270)
	lcHighLightedText	= Execscript(_Screen.cThorDispatcher, 'Thor_Proc_GetHighlightedText', 'Object Name')
	lcObjectName		= ''

	* ================================================================================
	* Find the object to explore
	Do Case

			* object passed in as parameter
		Case Vartype(m.lxParam1) = 'O'
			lo_Object = m.lxParam1

			* active window is a code window and highlighted text is the name of an object
		Case (Not Empty(m.lcHighLightedText))		;
				And Type(m.lcHighLightedText) = 'O'
			lo_Object	 = &lcHighLightedText
			lcObjectName = m.lcHighLightedText

			* take the object under the mouse (if any)
		Case Vartype(m.lo_ObjectUnderMouse) = 'O'
			lo_Object = m.lo_ObjectUnderMouse

			* the current selected object being edited (as appears in Property Window)
		Case 0 # Aselobj(lo_Objects) Or 0 # Aselobj(lo_Objects, 1)
			lo_Object	= m.lo_Objects[1]

		Otherwise
			lcForm = ccHomeFolder + '\Explorer'
			If ' ' $ m.lcForm
				lcForm = ['] + m.lcForm + [']
			Endif
			Keyboard '{CTRL+F2}Do Form ' + m.lcForm + ' with '

	Endcase

	* ================================================================================ 
	
	lcPublicVariable = Nvl(Execscript(_Screen.cThorDispatcher, 'Get Option=', ccKey, ccTool), '')
	If Not Empty(m.lcPublicVariable)
		Try
			Release m.&lcPublicVariable
			Public &lcPublicVariable
			&lcPublicVariable = m.lo_Object
		Catch To m.lo_Exception
			lcPublicVariable = ''
		Endtry
	Endif

	If Nvl(Execscript(_Screen.cThorDispatcher, 'Get Option=', ccKeyTopLevel, ccTool), .F.)
		Do Form (ccHomeFolder + '\ExplorerTopLevel') With m.lo_Object, m.lcObjectName, , m.lcPublicVariable
	Else
		Do Form (ccHomeFolder + '\Explorer') With m.lo_Object, m.lcObjectName, , m.lcPublicVariable
	Endif
		
	EndText 
	Return Evl(m.lcCode, '')

EndProc


* ================================================================================
* ================================================================================
Procedure GetClassDefinitions
	Local lcClassDefinitions

	Text To m.lcClassDefinitions Noshow


****************************************************************
****************************************************************
Define Class clsPublicVariableNameProperties As Custom

	Tool		  = ccTool
	Key			  = ccKey
	Value		  = ''
	EditClassName = 'clsPublicVariableName'

Enddefine


****************************************************************
****************************************************************
Define Class clsTopLevelForm As Custom

	Tool		  = ccTool
	Key			  = ccKeyTopLevel
	Value		  = .F.
	EditClassName = 'clsPublicVariableName'

Enddefine


****************************************************************
****************************************************************
Define Class clsPublicVariableName As Container

	Procedure Init
		Local lcBodyMarkup, loRenderEngine
	
		loRenderEngine = Execscript(_Screen.cThorDispatcher, 'Class= OptionRenderEngine')

		lcBodyMarkup =										;
			+ [ .Class = 'Checkbox']						;
			+ [ .Alignment = 1]								;
			+ [ .cTool = ccTool]							;
			+ [ .cKey  = ccKeyTopLevel]						;
			+ [ .Caption  = 'Top Level Form?']				;
			+ [ .Left = 200]								;
			+ [ .Width  = 120]								;
															;
			+ [ |]											;
			+ [ .Class	  = 'Label']						;
			+ [ .Caption  = 'Public Variable Name']			;
			+ [ .AutoSize = .T.]							;
			+ [ .Top	  = (.Top + 8)]						;
															;
			+ [ |]											;
			+ [ .Class = 'TextBox']							;
			+ [ .cTool = ccTool]							;
			+ [ .cKey  = ccKey]								;
			+ [ .Width = 120]								;
			+ [ .Row-Increment = 0]							;
			+ [ .Top = (.Top - 4)]							;
															;
			+ [ |]											;
			+ [ .Class	  = 'Label']						;
			+ [ .Width    = 300]							;
			+ [ .FontSize = 10]								;
			+ [ .Caption  = 'When Object Explorer opens, this variable is created and populated with the value of the object that is displayed.  This variable is released when OE closes.']					;
			+ [ .WordWrap = .T.]							;
			+ [ |]	
	
						
		loRenderEngine.cBodyMarkup = lcBodyMarkup
		loRenderEngine.Render(This, 'Object Explorer')

	Endproc

Enddefine
	
	Endtext

	Return Evl(m.lcClassDefinitions, '')
Endproc


* ================================================================================
* ================================================================================
* ================================================================================

Procedure GetReleaseNotes

Text to lcNote NoShow

### 2023-09-28, Version 3.51.01

Fix bug if called with object based on Empty class

### 2023-08-17, Version 3.51

Additional use: If in the Command Window or a code window and no object indicated, paste into the command window a call to OE.

### 2023-08-11, Version 3.5

Changes to how Object Explorer can be used in the IDE:
* If the active window is a code window (including the command window), highlight any object (or click within the object name) and use the hot key to explore that object.
* Hover over any object in any form and use the hot key to explore that object and the form it belongs to.
* If neither of these apply, use the hot key to explore the currently selected object in the form or class being edited (that is, the object that would appear in the Properties Window.)

### 2023-07-29, Version 3.4.02

* New Option to open as Top Level form
* Fix bug occurring for items in a collections that are scalars
* Settings file moved to Home(7) + 'ObjectExplorerSettings'

### 2023-01-13, Version 3.4.01

* Minor documentation changes; no code changes

### 2022-12-26, Version 3.4

* New: You can now view and edit array properties by double-clicking on the row for the array in the grid.
* New: Right-clicking on a node in the TreeView on left prompts for the name of a public variable in which to assign the value of the node.

### 2022-12-15, Version 3.3.7.4

* Issues related to Thor Configuration and Thor Check For Updates (CFU)
    * Added description in the options page of Thor Configuration
    * Moved most of Updater file contents to Version file.
    * Corrected bugs related to version date as reported in CFU.

### 2022-12-13, Version 3.3.7.1

* New: Option to assign object being explored into a public variable
* New: Name of the public variable is set in the options page of Thor Configuration
* New: The variable is released when Object Explorer closes.
* New: Right-click context menu in the TreeView on left allows you to assign any object in the tree into the public variable

### 2022-11-23, Version 3.3.6

* New: Double click now works on any column in the grid to edit property values.  
* New: Right-click on grid row brings up context menu to edit property (same as double-click) or to toggle whether the property is a favorite
* New: Checkbox for whether favorites are highlighted (with yellow highlighter)

### 2022-05-22, Version 3.3.3

* Add a TRY in TreeContainer.Init so no error if _Screen.oISXOptions.oKeyWordList doesn't exist

### 2022-04-04

* Updated the download zip file so it works with Thor Check for Updates.

### 2022-04-03

* Fixes a bug with an object based on Control in a running form and updates the displayed version number.

### 2022-04-02

* Fixes a bug with null nodes, such as with an object based on Empty or Control.

### 2022-03-04

* Automatically closes when the object being explored is released, and no longer prevents the object from being released

### 2022-03-03

* Changed hard-coded "explorer.vcx" in NEWOBJECT() statements to This.ClassLibrary so pathing isn't an issue.

* Set AllowOutput to .F. in forms.

* Ensure the explorer form is visible by being positioned within _screen or the active form, depending on the setting of ShowWindow.

* Added support for Thor Check For Updates.

### 2022-02-28

* Initial release: Jim and Matt's original version plus the following changes by Doug Hennig:

    * TreeContainer.NewNode: accept toParentNode and use the appropriate version of Nodes.Add if it's an object. This change (and the next one) prevents cashing for some objects (the TreeView was getting cranky when changing the Parent property of a node).

    * TreeContainer.LoadObject and LoadOtherObject: call NewNode rather than using their own Nodes.Add calls.

    * TreeContainer.NavigateToObject: specifically set loNode.Expanded to .T. because calling Expand doesn't necessary do that, also call loNode.EnsureVisible to ensure the TreeView is scrolled to the node. This fixes an issue with not automatically selecting the correct object in the TreeView at startup: the form was selected rather than the object, although the grid showed the properties for the correct object.

    * TreeContainer.InputBox: use InputBox_ShowWindow1 if the form is in a top-level form, not if it's modal. This change (and the next one) allows Object Explorer to be used in apps with _screen.Visible set to .F. and using top-level forms.

    * InputBox_ShowWindow1: set Desktop to .T. This doesn't affect apps with _screen.Visible =  .T. but does allow it to work when it's .F.

Last changed: _2023/01/13_ ![Picture](Images/vfpxpoweredby_alternative.gif)

EndText

Return lcNote

EndProc 