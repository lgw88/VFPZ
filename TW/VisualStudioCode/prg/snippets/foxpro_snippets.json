{
	"NEWOBJECT": {
		"prefix": "newo",
		"body": [ 
			"LOCAL ${1:loInstance}",
			"$1 = NEWOBJECT('${2:ClassName}','${3:ClassFile}',''$0)"
		],
		"description": "add property macro"
	},

	"ADDPROPERTY": {
		"prefix": "adp",
		"body": "ADDPROPERTY(${1:loData},'${2:PropertyName}',${3:lcValue})",
		"description": "add property macro"
	},

	"BINDEVENT": {
		"prefix": "bnd",
		"body": "BINDEVENT(${1:loEventSource},'${2:EventName}',${3:loHandler},'${4:HandleMethod}')",
		"description": "bindevent macro"
	},

	"EMPTY object instantiation": {
		"prefix": "eo",
		"body": [
			"LOCAL ${1:loData}",
			"$1 = CREATEOBJECT('EMPTY')"
		],
		"description": "instantiate an empty object"
	},

	"try catch block": {
		"prefix": "tryc",
		"body": [
			"TRY",
			"\t$0",
			"CATCH TO ${1:loException}",
			"\t",
			"ENDTRY"
		],
		"description": "try catch block into an object"
	},

	"try catch finally block": {
		"prefix": "tryf",
		"body": [
			"TRY",
			"\t$0",
			"CATCH TO ${1:loException}",
			"\t",
			"FINALLY",
			"\t",
			"ENDTRY"
		],
		"description": "try catch finally block into an object"
	},

	"if else endif": {
		"prefix": "ifel",
		"body": [
			"IF ${1:condition}",
			"\t$0",
			"ELSE",
			"\t",
			"ENDIF"
		],
		"description": "simple if else endif block"
	},

	"if endif": {
		"prefix": "ifend",
		"body": [
			"IF ${1:condition}",
			"\t$0",
			"ENDIF"
		],
		"description": "simple if endif block"
	},

	"iif statement": {
		"prefix": "iifs",
		"body": [
			"IIF(${1:condition},${2:if-true},${3:if-false})"
		],
		"description": "iif statement"
	},

	"FOR/ENDFOR statement": {
		"prefix": "fore",
		"body": [
			"LOCAL ${1:lnStep}",
			"FOR $1 = ${2:1} TO ${3:lnMaxSteps}",
			"\t$0",
			"ENDFOR"
		],
		"description": "simple for loop"
	},

	"ALINES() w/ FOR LOOP": {
		"prefix": "foralines",
		"body": [
			"LOCAL lnStep,lnCount,laLines[1],lcLine",
			"lnCount = ALINES(laLines,${1:lcString})",
			"FOR m.lnStep = 1 TO m.lnCount",
			"\tlcLine = laLines[m.lnStep]",
			"\t$0",
			"ENDFOR"
		],
		"description": "split a string into an array and loop through the array in a loop "
	},

	"icase statement": {
		"prefix": "ics",
		"body": [
			"ICASE(${1:condition1},${2:if-true},${3:condition2},${4:if-true},${5:otherwise})"
		],
		"description": "icase statement"
	},

	"local select": {
		"prefix": "lnsel",
		"body": [
			"LOCAL lnOldSel",
			"lnOldSel = SELECT()",
			"$0",
			"SELECT (lnOldSel)"
		],
		"description": "basic set up for selecting the current area into a variable and then restoring to that area"
	},

	"case statement": {
		"prefix": "docase",
		"body": [
			"DO CASE",
			"\tCASE ${1:condition}",
			"\t\t",
			"\tCASE ${2:condition}",
			"\t\t",
			"\tOTHER",
			"\t\t",
			"ENDCASE"
		],
		"description": "basic set up for selecting the current area into a variable and then restoring to that area"
	},

	"Procedure": {
		"prefix": "prc",
		"body": [
            "* ${3:Procedure description}",
			"PROCEDURE ${1:ProcedureName} ($2)",
			"\t$0",
			"ENDPROC"
		],
		"description": "Simple foxpro procedure call"
	},

    // [internal]
	"fSelectStatement": {
		"prefix": "fs",
		"body": [
			"WITH fSelectStatement('${1:File}')",
			"\t$0",
			"ENDWITH"
		],
		"description": "Simple fSelectStatment (internal)"
	},

    // [internal]
	"fChooserDao": {
		"prefix": "fchooser",
		"body": [
            "LOCAL loChooser,loResult",
            "loChooser = fChooserDao()",
			"WITH loChooser.OpenChooser('${1:File}')",
			"\t.Where('${2:FieldName}',${3:lcValue})$0",
            "ENDWITH",
            "loResult = loChooser.Show('${4:Chooser Dialog Caption}')",
            "IF VARTYPE(loResult)#'O'",
            "\tRETURN .f.",
            "ENDIF"
		],
		"description": "Template code for preparing a query and display a chooser dialog (internal)"
	},

    // [internal]
	"fSelectStatement.IntoObject": {
		"prefix": "fso",
		"body": [
			"WITH fSelectStatement('${1:File}')",
			"\t$0",
			"\t${2:loData} = .IntObject()",
			"ENDWITH"
		],
		"description": "Simple fSelectStatment with an output into a data object (internal)"
	},

    // [internal]
	"fSelectStatement.IntoValue": {
		"prefix": "fsv",
		"body": [
			"WITH fSelectStatement('${1:File}')",
			"\t.Fields('${2:Field}')",
			"\t$0",
			"\t${3:lcValue} = .IntoValue()",
			"ENDWITH"
		],
		"description": "Simple fSelectStatment outputing a scalar value (internal)"
	},

    // [internal]
	"fStoredProcedure": {
		"prefix": "fsp",
		"body": [
			"WITH fStoredProcedure('${1:sp_Name}')",
			"\t.Params(${2:Params})",
			"\t.Execute()",
			"ENDWITH"
		],
		"description": "Simple fStoredProcedure"
	},

    // [internal]
	"fUpdateStatement": {
		"prefix": "fup",
		"body": [
			"WITH fUpdateStatement('${1:File}')",
			"\t.Set('${2:Field1}',${3:lcValue1})",
			"\t.Where('${4:Field2}',${5:lcValue2})",
			"\t$0",
			"\t.Execute()",
			"ENDWITH"
		],
		"description": "Simple fUpdateStatement (internal)"
	},

    // [internal]
	"fInsertStatement": {
		"prefix": "fin",
		"body": [
			"WITH fInsertStatement('${1:file}')",
			"\t.Set('${2:field}',${3:lcValue})",
			"\t$0",
			"\t.Execute()",
			"ENDWITH"
		],
		"description": "Simple fUpdateStatement (internal)"
	},

    // [internal]
	"fDeleteStatement": {
		"prefix": "fdel",
		"body": [
			"WITH fDeleteStatement('${1:file}')",
			"\t.Where('${2:field}',${3:lcValue})",
			"\t.Execute()",
			"ENDWITH"
		],
		"description": "Simple fUpdateStatement (internal)"
	},

	"Define Class": {
		"prefix": "dc",
		"body": [
			"DEFINE CLASS ${1:ClassName} AS ${2:ParentClass}",
			"\t$3",
			"\tPROCEDURE ${4:Init} ()",
			"\t\t$0",
			"\tENDPROC",
			"ENDDEFINE"
		],
		"description": "Define class with no external file reference"
	},

	"Define Class Of": {
		"prefix": "dco",
		"body": [
			"DEFINE CLASS ${1:ClassName} AS ${2:ParentClass} OF ${2}.fxp",
			"",
			"\tPROCEDURE ${3:Init} ()",
			"\t\t$0",
			"\tENDPROC",
			"ENDDEFINE"
		],
		"description": "Define class with external file reference"
	},

	"Instantiable Class Object File": {
		"prefix": "dcf",
		"body": [
			"PROCEDURE ${TM_FILENAME_BASE} (${3:tcParam})",
			"\tRETURN CREATEOBJECT('${1}',${3})",
			"ENDPROC",
			"",
			"DEFINE CLASS ${1:${TM_FILENAME_BASE}} AS ${2:ParentClass} OF ${2}.fxp",
			"\t$4",
			"\tPROCEDURE Init (${3})",
			"\t\t$0",
			"\tENDPROC",
			"ENDDEFINE"
		],
		"description":"Define class with functional call to instantiate"
	},
 
    // [internal]
	"Define StoredProcedure Class (internal)": {
		"prefix": "dcsp",
		"body": [
			"DEFINE CLASS ${1:sp_StoredProcedureName} AS StoredProcedure OF StoredProcedure.fxp",
			"\t$4",
			"\t",
			"\tPROCEDURE Run ()",
			"\t\t$0",
			"\tENDPROC",
			"ENDDEFINE"
		],
		"description":"Define a storedprocedure class (internal)"
	},

    // multiprompt
    // [internal]
    "Multiprompt Definition": {
        "prefix": "multi",
        "body": [
			"LOCAL ${1:lcFields},${2:loResult}",
			"$1 = ''",
            "TEXT TO $1 ADDITIVE TEXTMERGE NOSHOW FLAGS 3 PRETEXT 3",
            "\t$0",
            "ENDTEXT",
            "$2 = MultiPrompt($1,${3:'Dialog Caption'})",
            "",
            "IF VARTYPE(${2})#'O'",
            "\tRETURN .f.",
            "ENDIF"
        ],
        "description":"Multiprompt definition (internal)"
    },

    "Multiprompt Text Field": {
        "prefix": "mptext",
        // TextProduct ~C Product ~E <<rcProduct>> ~W <<! SYSONEPROD>> ~V qck('qckprod',@{1})
        "body": "${1:TextFieldName} ~C ${2:Caption} ~E <<${3:pcInitialValue}>> ~V ${4:ValidEvent(@{1})}",
        "description": "Generic text field definition for multiprompt (internal)"
    },

    "Multiprompt Text Name": {
        "prefix": "mpname",
        "body": "${1:TextName} ~C ${2:Caption} ~EC <<${3:pcInitialValue}>>",
        "description": "Text field allowing for lowercase letters for multiprompt (internal)"
    },

    "Multiprompt Number Field": {
        "prefix": "mpnum",
        "body": "${1:TextNumber} ~C ${2:Caption} ~EN <<${3:pnInitialValue}>> ~F R ~M ${4:999,999.99}",
        "description": "Text field that accepts numbers for multiprompt (internal)"
    },

    "Multiprompt Date Field": {
        "prefix": "mpdate",
        "body": "${1:TextDate} ~C ${2:Caption} ~ED <<${3:pdInitialValue}>>",
        "description": "Text field that accepts numbers for multiprompt (internal)"
    },

    "Multiprompt List Field": {
        "prefix": "mplist",
        "body": "${1:ListFieldName} ~C ${2:Caption} ~EC <<${3:pcInitialValue}>> ~T LIST ~L ${4:Element 1,Element 2}",
        "description": "Generic list field definition for multiprompt (internal)"
    },

    "Multiprompt Check Field": {
        "prefix": "mpcheck",
        "body": "${1:CheckFieldName} ~C ${2:Caption} ~EL <<${3:pbInitialValue}>> ~T Check",
        "description": "Generic checkbox field definition for multiprompt (internal)"
    },
    "Multiprompt Group Field": {
        "prefix": "mpgroup",
        // GroupContract ~T GROUP ~F LAYOUT ~SH MIDDLE 10
        "body": "${1:GroupName} ~T Group ~F Layout ~S${2|V,H|} 10",
        "description": "Generic group definition for multiprompt (internal)"
    },

    "Multiprompt Label Field": {
        "prefix": "mplabel",
        //LabelMustBeAccount ~T LABEL ~C <<qw(tcAccount)>> ~B FIXED,10,N ~G GroupAccount
        "body": "${1:LabelName} ~T LABEL ~C ${2:Caption} ~EC <<${3:lcLabelContent}>> ~B FIXED,10,N",
        "description": "Generic checkbox field definition for multiprompt (internal)"
    },

    "Multiprompt Range Field": {
        "prefix": "mprange",
        //PurchaseRange ~C From ~T Range ~E <<rcPurchaseRangeLow>>||<<rcPurchaseRangeHigh>> ~W {CheckPurchase} ~G PurchaseGroup
        "body": "${1:RangeName} ~T RANGE ~C ${2:From} ~E <<${3:lcRangeLow}>>||<<${4:lcRangeHigh}>>",
        "description": "Generic range entry field definition for multiprompt (internal)"
    },

    "Multiprompt Note Field": {
		"prefix": "mpnote",
		//    TextMemoNote ~C Note ~@C m.pcNote ~T Memo
		"body": "${1:MemoName} ~T EDIT ~C ${2:Caption} ~@C <<${3:pcNote}>>",
		"description": "Generic memo field definition for multiprompt (internal)"
	},

	// dao helpers
	// [internal]
    "DataAccessObject.Open": {
		"prefix": "dopen",
		"body": [
			"WITH this.Open('${1:File}')",
			"\t$0",
			"ENDWITH"
		],
		"description": "Generic Open statement for a DataAccessObject instance (internal)"
	},

    "this.Dao.Open": {
		"prefix": "popen",
		"body": [
			"WITH this.${1:Dao}.Open('${2:File}')",
			"\t$0",
			"ENDWITH"
		],
		"description": "Generic Open statement for the DataAccessObject as a property (internal)"
	},

	"dal.Where (full)": {
		"prefix": "dwcomplete",
		//    TextMemoNote ~C Note ~@C m.pcNote ~T Memo
		"body": ".Where('${1:Field}',${2:lcTestValue},.f.,'${3:TableAlias}')",
		"description": "Full .Where clause for dal/dao statement (internal)"
	},

	"dal.Where (simple)": {
		"prefix": "dw",
		//    TextMemoNote ~C Note ~@C m.pcNote ~T Memo
		"body": ".Where('${1:Field}',${2:lcTestValue})",
		"description": "Basic .Where clause for dal/dao statement (internal)"
	},

	"dal.WhereEmptyString": {
		"prefix": "dwempty",
		//    TextMemoNote ~C Note ~@C m.pcNote ~T Memo
		"body": ".WhereEmptyString('${1:Field}','${2:TableAlias}')",
		"description": "Basic .WhereEmptyString clause for dal/dao statement (internal)"
	},

	"dal.WhereTrue": {
		"prefix": "dwtrue",
		//    TextMemoNote ~C Note ~@C m.pcNote ~T Memo
		"body": ".WhereTrue('${1:Field}','${2:TableAlias}')",
		"description": "Basic .WhereTrue clause for dal/dao statement (internal)"
	},

	"dal.WhereFalse": {
		"prefix": "dwfalse",
		//    TextMemoNote ~C Note ~@C m.pcNote ~T Memo
		"body": ".WhereTrue('${1:Field}','${2:TableAlias}')",
		"description": "Basic .WhereTrue clause for dal/dao statement (internal)"
	},

	"dal.WhereInList_Iterable": {
		"prefix": "dwiterable",
		"body": [
			"WITH .WhereInList_Iterable('${1:Field}','${2:Table}')",
			"\tSELECT (${3:CursorAlias)",
			"\tSCAN",
			"\t\t.Iterate(${4:CursorField})",
			"\tENDSCAN",
			"\t.CompleteIterable()",
			"ENDWITH",
		],
		"description": "WhereInList_Iterable for dal/dao statement (internal)"
	},

	"dal.Join": {
		"prefix": "djoin",
		"body": [
			".Join('${1:File}')",
			"\t.JoinOn('${2:Field}')"
		],
		"description": "Basic join for dal/dao statement (internal)"
	},

	"dal.Fields": {
		"prefix": "dfields",
		//    TextMemoNote ~C Note ~@C m.pcNote ~T Memo
		"body": ".Fields('${1:Field1,Field2,Field3}','${2:TableAlias}')",
		"description": "Field list for dal/dao select statement (internal)"
	},	

	"dal.Set": {
		"prefix": "dset",
		//    TextMemoNote ~C Note ~@C m.pcNote ~T Memo
		"body": ".Set('${1:Field}',${2:lcValue})",
		"description": "Set statement for dal/dao insert/update statement (internal)"
	},

	"dal.SetObject": {
		"prefix": "dsetobject",
		//    TextMemoNote ~C Note ~@C m.pcNote ~T Memo
		"body": ".SetObject(${1:loData},'${2:Include1,Include2,Include3}','${3:Exclude1,tcExclude2,Exclude3}')",
		"description": "SetObject statement for dal/dao insert/update statement (internal)"
	},

	"dal.IntoObject": {
		"prefix": "dinobject",
		//    TextMemoNote ~C Note ~@C m.pcNote ~T Memo
		"body": "${1:loData} = .IntoObject($2)",
		"description": ".IntoObject to return the resultset as an object (internal)"
	},	

	"dal.IntoValue": {
		"prefix": "dinvalue",
		//    TextMemoNote ~C Note ~@C m.pcNote ~T Memo
		"body": "${1:lcValue} = .IntoValue($2)",
		"description": ".IntoValue return the resultset as a scalar value (internal)"
	},	

	"dal.IntoCursor": {
		"prefix": "dincursor",
		//    TextMemoNote ~C Note ~@C m.pcNote ~T Memo
		"body": ".IntoCursor('${1:TempCursor}')",
		"description": ".IntoValue return the resultset as a foxpro cursor (internal)"
	},	
}
