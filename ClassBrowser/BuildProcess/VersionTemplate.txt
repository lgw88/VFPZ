Lparameters toUpdateObject
Local lcDate, ldDate

lcDate = '{VersionDate}'

With m.toUpdateObject
	.VersionNumber    = '{Version} - ' + lcDate

	.AvailableVersion = '{AppName}-{Version}-{JULIAN}-' + lcDate
	.RegisterWithThor = GetRegisterWithThor(.ApplicationName)
	.Notes			  = GetReleaseNotes()
Endwith

Return m.toUpdateObject


* ================================================================================
* ================================================================================
* ================================================================================

Procedure GetRegisterWithThor(lcAppName)

Local lcAppName, lcClassDefinitions, lcToolCode, lcDefineStatements, lcDescription, lcRegisterWithThor 

* Following indirect sequence is used so that blocks of text (code) can be pasted in from working code.

* The description for the tool
lcDescription	   = GetDescription()

* Any #Define statements (will appear at the beginning of the tool)
lcDefineStatements = GetDefineStatements()

* The code in Proc ToolCode
lcToolCode 		   = GetToolCode()

* somewhat of a misnomer; all procedure and class definitions that follow Proc ToolCode
lcClassDefinitions = GetClassDefinitions()

* This is code to execute after the project has been installed by Thor for the
* first time. Edit this if you want do something different (such as running
* the installed code) or display a different message. You can use code like
* this if you want to execute the installed code; Thor replaces
* ##InstallFolder## with the installation path for the project:
*
* 'do "##InstallFolder##MyProject.prg"'

text to lcRegisterWithThor noshow textmerge
	MessageBox('To complete installation of <<lcAppName>>, run Thor tool ';
	     + chr[13] + chr[13] + '     "Install Class Browser"';
	     + chr[13] + chr[13] + 'after Check For Updates completes.', 0, '<<lcAppName>> Installed')

* Create the tool under Thor's Tool folder

	loThorInfo = Execscript (_Screen.cThorDispatcher, 'Thor Register=')
	with loThorInfo

* Required properties.

		.PRGName    = 'Thor_Tool_InstallClassBrowser'
		.FolderName = '##InstallFolder##'
		.Prompt     = 'Install Class Browser'

		<< 'Text to .Description NoShow' >>
<<lcDescription>>
		<< 'EndText' >>

* These are used to group and sort tools when they are displayed in menus or the Thor form.

		.Category        = 'Applications'
		.CanRunAtStartUp = .F.

		.Link = ccLink 
		.Version = ccVERSIONNUMBER 

* And the actual code for the tool
		<< 'Text To .DefineStatements Noshow '>>
<<lcDefineStatements>>
		<< 'Endtext' >>

		<< 'Text To .Code Noshow '>>
<<lcToolCode>>
		<< 'Endtext' >>

		<< 'Text To .ClassDefinitions Noshow '>>
<<lcClassDefinitions >>
		<< 'Endtext' >>
		
* Register the tool with Thor.
		llRegister = .Register()
	endwith
endtext

Return m.lcRegisterWithThor 
EndProc


* ================================================================================
* ================================================================================
Procedure GetDescription
	Local lcDescription

	Text To m.lcDescription Noshow
Install Class Browser
	Endtext

	Return Evl(m.lcDescription, '')
EndProc


* ================================================================================
* ================================================================================
Procedure GetDefineStatements
	Local lcDefineStatements

	Text To m.lcDefineStatements Noshow PreText 7
#Define CRLF   			Chr[13] + chr[10]
#Define ccDefaultApp	Home(1) + 'Browser.App'
#Define ccCurrentApp	_Browser

#Define ccFolderName 	'##InstallFolder##'
#Define ccAppFileName	ccFolderName + 'Browser.App'

	EndText 
	Return Evl(m.lcDefineStatements, '')
EndProc


* ================================================================================
* ================================================================================
Procedure GetToolCode
	Local lcCode

	Text To m.lcCode Noshow
	Local llNewExists

    	llNewExists = File(ccAppFileName)

    	Do Case
    		Case m.llNewExists And Not Upper(ccCurrentApp) == Upper(ccAppFileName)
    			If Messagebox('Install new version of Class Browser?', 3 + 32) = 6
    				TryToInstall(ccAppFileName, 'replacement for the')
    			Endif
    		Case m.llNewExists And Upper(ccCurrentApp) == Upper(ccAppFileName)
    			If Messagebox('Restore default Class Browser?', 3 + 32) = 6
    				TryToInstall(ccDefaultApp, 'default')
    			Endif
    		Case Not Upper(ccCurrentApp) == Upper(ccDefaultApp)
    			If Messagebox('New version not found; restore default Class Browser?', 3 + 32) = 6
    				TryToInstall(ccDefaultApp, 'default')
    			Endif
    		Otherwise
    			Messagebox('New version not found; nothing to do', 16)
    	Endcase

Endproc


Procedure TryToInstall(lcNewApp, lcDescription)
Local lcPrompt

	_Cliptext = m.lcNewApp
	
	*** JRN 2023-01-01 : due to the way this PRG is created as part of Thor CFU,
	* we can't use TEXT/ENDTEXT, so have found this unusual construction instead
	
	lcPrompt = [Full path for the ] + m.lcDescription + [ Class Browser has been copied to the clipboard.|;
|;
From the system menu pad, modify the file location for Class Browser.|;
|;
Tools -> Options -> File Locations -> Class Browser.|;
|;
Don't forget to Set As Default!]

	lcPrompt = Strtran(m.lcPrompt, '|', CRLF)
	?lcPrompt 
	
	Messagebox(lcPrompt)
	
	Keyboard '{Alt+T}{Enter}O' Plain

	EndText 

	Return Evl(m.lcCode, '')
EndProc


* ================================================================================
* ================================================================================
Procedure GetClassDefinitions
	Local lcClassDefinitions

	Text To m.lcClassDefinitions Noshow
	Endtext

	Return Evl(m.lcClassDefinitions, '')
Endproc



Procedure GetReleaseNotes

Text to lcNote NoShow
{ChangeLog}
EndText

Return lcNote

EndProc 