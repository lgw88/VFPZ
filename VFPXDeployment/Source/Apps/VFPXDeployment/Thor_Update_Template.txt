*File to control Thor CFU for application {APPNAME}
lparameters;
	toUpdateObject

local;
	lcRepositoryURL    as string, ;
	lcDownloadsBranch  as string, ;
	lcDownloadsURL     as string, ;
	lcVersionFileURL   as string, ;
	lcZIPFileURL       as string, ;
	lcRegisterWithThor as string

* Get the URL for the version and ZIP files.

lcRepositoryURL   = '{REPOSITORY}'
	&& the URL for the project's repository
* Note: If you use a more recent version of git, your default branch may not be "master".
lcDownloadsBranch = '{BRANCH}'
lcDownloadsURL    = strtran(m.lcRepositoryURL, 'github.com', ;
	'raw.githubusercontent.com') + '/' + m.lcDownloadsBranch + '/ThorUpdater/'
lcVersionFileURL  = m.lcDownloadsURL + '{VERSIONFILE}' &&'{APPID}Version.txt'
	&& the URL for the file containing code to get the available version number
lcZIPFileURL      = m.lcDownloadsURL + '{APPID}.zip'
	&& the URL for the zip file containing the project

<<iif('{COMPONENT}' = 'No', '', '@@@')>>* "{APPNAME}" is a tool. No code created by VFPX Deployment<<iif('{COMPONENT}' = 'No', '', '\\\')>>
<<iif('{COMPONENT}' = 'No', '@@@', '')>>text to lcRegisterWithThor noshow textmerge
	messagebox('From the Thor menu, choose "More -> Open Folder -> Components" to see the folder where {APPNAME} was installed', 0, '{APPNAME} Installed', 5000)
endtext<<iif('{COMPONENT}' = 'No', '\\\', '')>>

* Set the properties of the passed updater object.

with m.toUpdateObject
	.ApplicationName      = '{APPNAME}'
	.VersionLocalFilename = '{APPID}VersionFile.txt'
	.VersionFileURL       = m.lcVersionFileURL
	.SourceFileUrl        = m.lcZIPFileURL
	.Component            = '{COMPONENT}'
	.Link                 = m.lcRepositoryURL
	.LinkPrompt           = '{APPNAME} Home Page'
	.ProjectCreationDate  = {CURRDATE}
	.Dependencies         = ''	&& a comma or space delimited list of other Thor applications (ApplicationName) that this project depends on
<<iif('{COMPONENT}' = 'No', '*', '')>>	.RegisterWithThor     = m.lcRegisterWithThor

endwith

return m.toUpdateObject

*created by VFPX Deployment, <<DATETIME()>>