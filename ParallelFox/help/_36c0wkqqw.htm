<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head> 
	<topictype value="TOPIC" />
	<title>Worker Events</title>
	<link rel="stylesheet" type="text/css" href="templates/wwhelp.css">
	<script src="templates/wwhelp.js" type="text/javascript"></script>
</head>
<body>
<div class="banner">
  <div>
		  <img src="bmp/seealso.gif" border=0  alt="Related Topics" style="cursor:hand" onmouseover="SeeAlsoButton();" />
	<div id="See" class="hotlinkbox" style="display:none" onmouseleave="SeeAlsoButton();">
	  <b>See also</b><br>
	  <div class="seealsotopics"><a href="_36c0wgcqa.htm" >Training Videos</a> <br/> 
<a href="_36c0waljk.htm" >parallel::BindEvent</a> <br/> 
<a href="_36c0wc031.htm" >worker::ReturnData</a> <br/> 
<a href="_36c0wc030.htm" >worker::UpdateProgress</a> <br/> 
<a href="_36c0wc039.htm" >worker::ProgressInterval</a> <br/> 
<a href="_36c0wc037.htm" >worker::ReturnCursor</a> <br/> 
<a href="_36c0wc035.htm" >worker::ReturnError</a> <br/> 
<a href="_36c0wltfw.htm" >Error Handling</a></div>
	</div>
	<span class="projectname">ParallelFox</span>
 </div>
 <div class="topicname">
	<img src="bmp/TOPIC.gif">&nbsp;Worker Events
 </div>
</div>

<div class="contentpane">

<div class="contentbody">ParallelFox sends commands to worker processes to run programs in parallel or in the background.  While those programs are running, you can send messages from the workers back to the main process.  This is accomplished by means of worker events.  <p>Use <a href="_36c0waljk.htm" >Parallel.BindEvent()</a> in the main process to respond to events occuring on the workers.  The interface is similar to VFP's BindEvent() function.  Event binding should be setup <i>before</i> you send commands to workers. These are the available worker events:<p><ul><li> <b><i>Complete</i></b>: Fires when a program has finished running on a worker.  The event includes the return value of that program.<br><li> <b><i>ReturnData</i></b>: Fires when <a href="_36c0wc031.htm" >Worker.ReturnData()</a> is called.  Used to send data (up to 26 parameters, including objects) from the worker to the main process.<br><li> <b><i>UpdateProgress</i></b>: Fires when <a href="_36c0wc030.htm" >Worker.UpdateProgress()</a> is called.  Used to send the main process progress updates when a long process is running on the worker.  <a href="_36c0wc039.htm" >Worker.ProgressInterval</a> controls how often updates are sent.<br><li> <b><i>ReturnCursor</i></b>: Fires when <a href="_36c0wc037.htm" >Worker.ReturnCursor()</a> is called.  Used to send a cursor from the worker to the main process.<br><li> <b><i>ReturnError</i></b>: Fires when <a href="_36c0wc035.htm" >Worker.ReturnError()</a> is called.  Used in worker error handler to notify main process an error has occurred.  See <a href="_36c0wltfw.htm" >Error Handling</a> for more info.<br></ul><p>If one of these events does not meet your needs, you can create your own callback object and send it as a parameter to the worker.  Inside the worker, you can call methods on that object and they will execute in the main process.  See custom_callback.PRG in the Examples folder.<p>For a more in-depth discussion of this topic including examples, be sure to watch the training videos.
</div>

<h3 class="outdent">Remarks</h3>It is HIGHLY recommended that _VFP.AutoYield = .T. (the default) while running code on workers. Otherwise, code running in the main process can block code from running on the workers. If you need AutoYield to be .F. (for an ActiveX control), perhaps you can toggle it while code is running in parallel, or you can call DOEVENTS FORCE in the main process at appropriate intervals.
<h3 class="outdent">See also</h3><a href="_36c0wgcqa.htm" >Training Videos</a> | 
<a href="_36c0waljk.htm" >parallel::BindEvent</a> | 
<a href="_36c0wc031.htm" >worker::ReturnData</a> | 
<a href="_36c0wc030.htm" >worker::UpdateProgress</a> | 
<a href="_36c0wc039.htm" >worker::ProgressInterval</a> | 
<a href="_36c0wc037.htm" >worker::ReturnCursor</a> | 
<a href="_36c0wc035.htm" >worker::ReturnError</a> | 
<a href="_36c0wltfw.htm" >Error Handling</a>

</div><hr />
<small>&nbsp;&nbsp;Last Updated: 03/27/11 | 
&copy Joel Leach, 2012</small>
<br clear="all" />
<br/>
</body>
</html>