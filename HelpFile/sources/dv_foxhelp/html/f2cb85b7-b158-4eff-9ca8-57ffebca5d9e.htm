<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>Visual FoxPro and XML Schema Data Type Mapping</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="collapseImage" style="display:none; height:0; width:0;" alt="Collapse image" src="../local/collapse_all.gif">
      
      
    </img>
    <img id="expandImage" style="display:none; height:0; width:0;" alt="Expand image" src="../local/expand_all.gif">
      
      
    </img>
    <img id="collapseAllImage" style="display:none; height:0; width:0;" alt="CollapseAll image" src="../local/collall.gif">
      
      
    </img>
    <img id="expandAllImage" style="display:none; height:0; width:0;" alt="ExpandAll image" src="../local/expall.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">Visual FoxPro and XML Schema Data Type Mapping</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> 
									</td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" alt="CollapseAll image" src="../local/collall.gif">
                
                
              </img>
              <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">
                Collapse All
              </label>
              <label id="expandAllLabel" for="toggleAllImage" style="display: none;">
                Expand All
              </label> </span>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p>The following tables describe the following default data type mappings between Visual FoxPro and XML schema data types:  </p>
  <div id="sectionSection0" class="seeAlsoNoToggleSection">
      <ul><li>
          <p>
            <a href="#fogrfvisualfoxproxmlschemadatatypemappinganchor2">XML Schema Primitive Data Types to Visual FoxPro Data Types</a>
          </p>
        </li><li>
          <p>
            <a href="#fogrfvisualfoxproxmlschemadatatypemappinganchor3">XML Schema Derived Types to Visual FoxPro Data Types</a>
          </p>
        </li><li>
          <p>
            <a href="#fogrfvisualfoxproxmlschemadatatypemappinganchor1">Visual FoxPro Data Types to XML Schema Definition (XSD) Data Types</a>
          </p>
        </li><li>
          <p>
            <a href="#fogrfvisualfoxproxmlschemadatatypemappinganchor4">XML Schema Definition (XSD) Data Types to Visual FoxPro Data Types</a>
          </p>
        </li><li>
          <p>
            <a href="#fogrfvisualfoxproxmlschemadatatypemappinganchor5">XML Data Reduced (XDR) Schema Data Types to Visual FoxPro Data Types</a>
          </p>
        </li></ul>
      <div class="labelheading"><b>XML Schema Primitive Data Types to Visual FoxPro Data Types</b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
            <th>
              XML data type
            </th>
            <th>
              Facets
            </th>
            <th>
              Description
            </th>
            <th>
              Visual FoxPro data type
            </th>
          </tr><tr>
          <td>
            <p>anyURI</p>
          </td>
          <td>
            <p>length, pattern, maxLength, minLength, enumeration, whiteSpace</p>
          </td>
          <td>
            <p>Represents a Uniform Resource Identifier (URI) as defined by RFC 2396. An <i>anyURI</i> value can be absolute or relative and might have an optional fragment identifier.</p>
          </td>
          <td>
            <p>Memo. Visual FoxPro applies a hyperlink to a URI in a Memo.</p>
          </td>
        </tr><tr>
          <td>
            <p>base64Binary</p>
          </td>
          <td>
            <p>length, pattern, maxLength, minLength, enumeration, whiteSpace</p>
          </td>
          <td>
            <p>Represents base64-encoded arbitrary binary data. A <i>base64Binary</i> is the set of finite-length sequences of binary octets.</p>
          </td>
          <td>
            <p>Memo (Binary), Varbinary or Blob</p>
          </td>
        </tr><tr>
          <td>
            <p>boolean</p>
          </td>
          <td>
            <p>pattern, whiteSpace</p>
          </td>
          <td>
            <p>Represents Boolean values, which are either true or false.</p>
          </td>
          <td>
            <p>Logical</p>
          </td>
        </tr><tr>
          <td>
            <p>date</p>
          </td>
          <td>
            <p>enumeration, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, whiteSpace</p>
          </td>
          <td>
            <p>Represents a calendar date. The pattern for <i>date</i> is CCYY-MM-DD with an optional time zone indicator as allowed for <i>dateTime</i>.</p>
          </td>
          <td>
            <p>Date</p>
          </td>
        </tr><tr>
          <td>
            <p>dateTime</p>
          </td>
          <td>
            <p>enumeration, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, whiteSpace</p>
          </td>
          <td>
            <p>Represents a specific instance of time. </p>
            <p>The pattern for dateTime is CCYY-MM-DDThh:mm:ss where CC represents the century, YY the year, MM the month, and DD the day, preceded by an optional leading negative (-) character to indicate a negative number. If the negative character is omitted, positive (+) is assumed. The T is the date/time separator and hh, mm, and ss represent hour, minute, and second respectively. Additional digits can be used to increase the precision of fractional seconds if desired. For example, the format ss.ss... with any number of digits after the decimal point is supported. The fractional seconds part is optional.</p>
            <p>This representation may be immediately followed by a "Z" to indicate Coordinated Universal Time (UTC) or to indicate the time zone. For example, the difference between the local time and Coordinated Universal Time, immediately followed by a sign, + or -, followed by the difference from UTC represented as hh:mm (minutes is required). If the time zone is included, both hours and minutes must be present.</p>
          </td>
          <td>
            <p>DateTime</p>
          </td>
        </tr><tr>
          <td>
            <p>decimal</p>
          </td>
          <td>
            <p>enumeration, pattern, totalDigits, fractionDigits, minInclusive, minExclusive, maxInclusive, maxExclusive, whiteSpace</p>
          </td>
          <td>
            <p>Represents arbitrary precision numbers.</p>
          </td>
          <td>
            <p>Numeric, Currency, or Character</p>
          </td>
        </tr><tr>
          <td>
            <p>double</p>
          </td>
          <td>
            <p>pattern, enumeration, minInclusive, minExclusive, maxInclusive, maxExclusive, whiteSpace</p>
          </td>
          <td>
            <p>Represents double-precision 64-bit floating-point numbers.</p>
          </td>
          <td>
            <p>Double</p>
          </td>
        </tr><tr>
          <td>
            <p>duration</p>
          </td>
          <td>
            <p>enumeration, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, whiteSpace</p>
          </td>
          <td>
            <p>Represents duration of time. The pattern for <i>duration</i> is PnYnMnDTnHnMnS, where nY represents the number of years, nM the number of months, nD the number of days, T the date/time separator, nH the number of hours, nM the number of minutes, and nS the number of seconds.</p>
            <p>For example, to indicate a duration of 1 year, 2 months, 3 days, 10 hours, and 30 minutes, you write: P1Y2M3DT10H30M. You could also indicate a duration of minus 120 days as -P120D.</p>
          </td>
          <td>
            <p>Character (C(30))</p>
          </td>
        </tr><tr>
          <td>
            <p>float</p>
          </td>
          <td>
            <p>pattern, enumeration, minInclusive, minExclusive, maxInclusive, maxExclusive, whiteSpace</p>
          </td>
          <td>
            <p>Represents single-precision 32-bit floating-point numbers.</p>
          </td>
          <td>
            <p>Double</p>
          </td>
        </tr><tr>
          <td>
            <p>gDay</p>
          </td>
          <td>
            <p>enumeration, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, whiteSpace</p>
          </td>
          <td>
            <p>Represents a Gregorian day that recurs, specifically a day of the month, such as the fifth day of the month. A <i>gDay</i> is the space of a set of calendar dates. Specifically, it is a set of one-day long, monthly periodic instances. </p>
            <p>The pattern for <i>gDay</i> is --DD with an optional time zone indicator as allowed for <i>date</i>.</p>
          </td>
          <td>
            <p>Character (C(10))</p>
          </td>
        </tr><tr>
          <td>
            <p>gMonth</p>
          </td>
          <td>
            <p>enumeration, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, whiteSpace</p>
          </td>
          <td>
            <p>Represents a Gregorian month that recurs every year. A <i>gMonth</i> is the space of a set of calendar months. Specifically, it is a set of one-month long, yearly periodic instances. </p>
            <p>The pattern for <i>gMonth</i> is -MM- with an optional time zone indicator as allowed for <i>date</i>.</p>
          </td>
          <td>
            <p>Character (C(10))</p>
          </td>
        </tr><tr>
          <td>
            <p>gMonthDay</p>
          </td>
          <td>
            <p>enumeration, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, whiteSpace</p>
          </td>
          <td>
            <p>Represents a specific Gregorian date that recurs, specifically a day of the year, such as the third of May. A <i>gMonthDay</i> is the set of calendar dates. Specifically, it is a set of one-day long, annually periodic instances. </p>
            <p>The pattern for <i>gMonthDay</i> is --MM-DD with an optional time zone indicator as allowed for <i>date</i>.</p>
          </td>
          <td>
            <p>Character (C(10))</p>
          </td>
        </tr><tr>
          <td>
            <p>gYear</p>
          </td>
          <td>
            <p>enumeration, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, whiteSpace</p>
          </td>
          <td>
            <p>Represents a Gregorian year. A set of one month-long, nonperiodic instances.</p>
            <p>The pattern for <i>gYear</i> is CCYY with an optional time zone indicator as allowed for <i>dateTime</i>.</p>
          </td>
          <td>
            <p>Character (C(15))</p>
          </td>
        </tr><tr>
          <td>
            <p>gYearMonth</p>
          </td>
          <td>
            <p>enumeration, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, whiteSpace</p>
          </td>
          <td>
            <p>Represents a specific Gregorian month in a specific Gregorian year. A set of one month-long, nonperiodic instances.</p>
            <p>The pattern for <i>gYearMonth</i> is CCYY-MM with an optional time zone indicator.</p>
          </td>
          <td>
            <p>Character (C(15))</p>
          </td>
        </tr><tr>
          <td>
            <p>hexBinary</p>
          </td>
          <td>
            <p>length, pattern, maxLength, minLength, enumeration, whiteSpace</p>
          </td>
          <td>
            <p>Represents arbitrary hex-encoded binary data. A <i>hexBinary</i> is the set of finite-length sequences of binary octets. Each binary octet is encoded as a character tuple, consisting of two hexadecimal digits ([0-9a-fA-F]) representing the octet code.</p>
          </td>
          <td>
            <p>Memo (Binary)</p>
          </td>
        </tr><tr>
          <td>
            <p>NOTATION</p>
          </td>
          <td>
            <p>length, enumeration, pattern, maxLength, minLength, whiteSpace</p>
          </td>
          <td>
            <p>Represents a NOTATION attribute type. A set of QNames.</p>
          </td>
          <td>
            <p>Memo</p>
          </td>
        </tr><tr>
          <td>
            <p>QName</p>
          </td>
          <td>
            <p>length, enumeration, pattern, maxLength, minLength, whiteSpace</p>
          </td>
          <td>
            <p>Represents a qualified name. A qualified name is composed of a prefix and a local name separated by a colon. Both the prefix and local names must be an NCName. The prefix must be associated with a namespace Uniform Resource Identifier (URI) reference, using a namespace declaration.</p>
          </td>
          <td>
            <p>Memo</p>
          </td>
        </tr><tr>
          <td>
            <p>string</p>
          </td>
          <td>
            <p>length, pattern, maxLength, minLength, enumeration, whiteSpace</p>
          </td>
          <td>
            <p>Represents character strings.</p>
          </td>
          <td>
            <p>Character when maxLength is specified and less than 255 characters. Otherwise, Memo.</p>
          </td>
        </tr><tr>
          <td>
            <p>time</p>
          </td>
          <td>
            <p>enumeration, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, whiteSpace</p>
          </td>
          <td>
            <p>Represents an instance of time that recurs every day. </p>
            <p>The pattern for <i>time</i> is hh:mm:ss.sss with an optional time zone indicator.</p>
          </td>
          <td>
            <p>Character (C(20))</p>
          </td>
        </tr></table></div>
      <div class="labelheading"><b>XML Schema Derived Types to Visual FoxPro Data Types</b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
            <th>
              XML data type
            </th>
            <th>
              Facets
            </th>
            <th>
              Description
            </th>
            <th>
              Visual FoxPro data type
            </th>
          </tr><tr>
          <td>
            <p>byte</p>
          </td>
          <td>
            <p>enumeration, fractionDigits, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, totalDigits, whiteSpace</p>
          </td>
          <td>
            <p>Represents an integer with a minimum value of -128 and maximum of 127. This data type is derived from short.</p>
          </td>
          <td>
            <p>Integer</p>
          </td>
        </tr><tr>
          <td>
            <p>ENTITIES</p>
          </td>
          <td>
            <p>length, maxLength, minLength, enumeration, whiteSpace</p>
          </td>
          <td>
            <p>Represents the ENTITIES attribute type and contains a set of values of type ENTITY.</p>
          </td>
          <td>
            <p>Character, if maxLength is specified and less than 255. Otherwise, Memo.</p>
          </td>
        </tr><tr>
          <td>
            <p>ENTITY</p>
          </td>
          <td>
            <p>length, enumeration, pattern, maxLength, minLength, whiteSpace</p>
          </td>
          <td>
            <p>Represents the ENTITY attribute type in XML 1.0 Recommendation. This is a reference to an unparsed entity with a name that matches the specified name. An ENTITY must be an NCName and must be declared in the schema as an unparsed entity name. This data type is derived from NCName.</p>
          </td>
          <td>
            <p>Character, if maxLength is specified and less than 255. Otherwise, Memo.</p>
          </td>
        </tr><tr>
          <td>
            <p>ID</p>
          </td>
          <td>
            <p>length, enumeration, pattern, maxLength, minLength, whiteSpace</p>
          </td>
          <td>
            <p>Represents the ID attribute type defined in the XML 1.0 Recommendation. The ID must be a no-colon-name (NCName) and must be unique within an XML document. This data type is derived from NCName.</p>
          </td>
          <td>
            <p>Character, if maxLength is specified and less than 255. Otherwise, Memo.</p>
          </td>
        </tr><tr>
          <td>
            <p>IDREF</p>
          </td>
          <td>
            <p>length, enumeration, pattern, maxLength, minLength, whiteSpace</p>
          </td>
          <td>
            <p>Represents a reference to an element that has an ID attribute that matches the specified ID. An IDREF must be an NCName and must be a value of an element or attribute of type ID within the XML document. This data type is derived from NCName.</p>
          </td>
          <td>
            <p>Character, if maxLength is specified and less than 255. Otherwise, Memo.</p>
          </td>
        </tr><tr>
          <td>
            <p>IDREFS</p>
          </td>
          <td>
            <p>length, maxLength, minLength, enumeration, whiteSpace</p>
          </td>
          <td>
            <p>Represents the IDREFS attribute type and contains a set of values of type IDREF.</p>
          </td>
          <td>
            <p>Character, if maxLength is specified and less than 255. Otherwise, Memo.</p>
          </td>
        </tr><tr>
          <td>
            <p>int</p>
          </td>
          <td>
            <p>enumeration, fractionDigits, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, totalDigits, whiteSpace</p>
          </td>
          <td>
            <p>Represents an integer with a minimum value of -2147483648 and maximum of 2147483647. This data type is derived from long.</p>
          </td>
          <td>
            <p>Integer</p>
          </td>
        </tr><tr>
          <td>
            <p>integer</p>
          </td>
          <td>
            <p>enumeration, fractionDigits, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, totalDigits, whiteSpace</p>
          </td>
          <td>
            <p>Represents a sequence of decimal digits with an optional leading sign (+ or -). This data type is derived from decimal.</p>
          </td>
          <td>
            <p>Integer, if totalDigits is less than 10. Otherwise, Character with totalDigits respected.</p>
          </td>
        </tr><tr>
          <td>
            <p>language</p>
          </td>
          <td>
            <p>length, pattern, maxLength, minLength, enumeration, whiteSpace</p>
          </td>
          <td>
            <p>Represents natural language identifiers (defined by RFC 1766). This data type is derived from token.</p>
          </td>
          <td>
            <p>Character, if maxLength is specified and less than 255. Otherwise, Memo.</p>
          </td>
        </tr><tr>
          <td>
            <p>long</p>
          </td>
          <td>
            <p>enumeration, fractionDigits, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, totalDigits, whiteSpace</p>
          </td>
          <td>
            <p>Represents an integer with a minimum value of -9223372036854775808 and maximum of 9223372036854775807. This data type is derived from integer.</p>
          </td>
          <td>
            <p>Integer, if totalDigits is less than 10. Otherwise, Character with totalDigits respected.</p>
          </td>
        </tr><tr>
          <td>
            <p>Name</p>
          </td>
          <td>
            <p>length, pattern, maxLength, minLength, enumeration, whiteSpace</p>
          </td>
          <td>
            <p>Represents names in XML. A Name is a token that begins with a letter, underscore, or colon and continues with name characters (letters, digits, and other characters). This data type is derived from token.</p>
          </td>
          <td>
            <p>Character, if maxLength is specified and less than 255. Otherwise, Memo.</p>
          </td>
        </tr><tr>
          <td>
            <p>NCName</p>
          </td>
          <td>
            <p>length, pattern, maxLength, minLength, enumeration, whiteSpace</p>
          </td>
          <td>
            <p>Represents noncolonized names. This data type is the same as Name, except it cannot begin with a colon. This data type is derived from Name.</p>
          </td>
          <td>
            <p>Character, if maxLength is specified and less than 255. Otherwise, Memo.</p>
          </td>
        </tr><tr>
          <td>
            <p>negativeInteger</p>
          </td>
          <td>
            <p>enumeration, fractionDigits, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, totalDigits, whiteSpace</p>
          </td>
          <td>
            <p>Represents an integer that is less than zero and consists of a negative sign (-) and sequence of decimal digits. This data type is derived from nonPositiveInteger.</p>
          </td>
          <td>
            <p>Integer, if totalDigits is less than 10. Otherwise, Character with totalDigits respected.</p>
          </td>
        </tr><tr>
          <td>
            <p>NMTOKEN</p>
          </td>
          <td>
            <p>length, pattern, maxLength, minLength, enumeration, whiteSpace</p>
          </td>
          <td>
            <p>Represents the NMTOKEN attribute type. An NMTOKEN is set of name characters, such as letters, digits, and other characters, in any combination. Unlike Name and NCName, NMTOKEN has no restrictions on the starting character. This data type is derived from token.</p>
          </td>
          <td>
            <p>Character, if maxLength is specified and less than 255. Otherwise, Memo.</p>
          </td>
        </tr><tr>
          <td>
            <p>NMTOKENS</p>
          </td>
          <td>
            <p>length, maxLength, minLength, enumeration, whiteSpace</p>
          </td>
          <td>
            <p>Represents the NMTOKENS attribute type and contains a set of values of type NMTOKEN.</p>
          </td>
          <td>
            <p>Memo</p>
          </td>
        </tr><tr>
          <td>
            <p>nonNegativeInteger</p>
          </td>
          <td>
            <p>enumeration, fractionDigits, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, totalDigits, whiteSpace</p>
          </td>
          <td>
            <p>Represents an integer that is greater than or equal to zero. This data type is derived from integer.</p>
          </td>
          <td>
            <p>Integer, if totalDigits is less than 10. Otherwise, Character with totalDigits respected.</p>
          </td>
        </tr><tr>
          <td>
            <p>nonPositiveInteger</p>
          </td>
          <td>
            <p>enumeration, fractionDigits, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, totalDigits, whiteSpace</p>
          </td>
          <td>
            <p>Represents an integer that is less than or equal to zero and A nonPositiveInteger consists of a negative sign (-) and sequence of decimal digits. This data type is derived from integer.</p>
          </td>
          <td>
            <p>Integer, if totalDigits is less than 10. Otherwise, Character with totalDigits respected.</p>
          </td>
        </tr><tr>
          <td>
            <p>normalizedString</p>
          </td>
          <td>
            <p>length, pattern, maxLength, minLength, enumeration, whiteSpace</p>
          </td>
          <td>
            <p>Represents white space normalized strings. This data type is derived from string.</p>
          </td>
          <td>
            <p>Character, if maxLength is specified and less than 255. Otherwise, Memo.</p>
          </td>
        </tr><tr>
          <td>
            <p>positiveInteger</p>
          </td>
          <td>
            <p>enumeration, fractionDigits, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, totalDigits, whiteSpace</p>
          </td>
          <td>
            <p>Represents an integer that is greater than zero. This data type is derived from nonNegativeInteger.</p>
          </td>
          <td>
            <p>Integer, if totalDigits is less than 10. Otherwise, Character with totalDigits respected.</p>
          </td>
        </tr><tr>
          <td>
            <p>token</p>
          </td>
          <td>
            <p>enumeration, pattern, length, minLength, maxLength, whiteSpace</p>
          </td>
          <td>
            <p>Represents tokenized strings. This data type is derived from normalizedString.</p>
          </td>
          <td>
            <p>Character, if maxLength is specified and less than 255. Otherwise, Memo.</p>
          </td>
        </tr><tr>
          <td>
            <p>short</p>
          </td>
          <td>
            <p>enumeration, fractionDigits, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, totalDigits, whiteSpace</p>
          </td>
          <td>
            <p>Represents an integer with a minimum value of -32768 and maximum of 32767. This data type is derived from int.</p>
          </td>
          <td>
            <p>Integer</p>
          </td>
        </tr><tr>
          <td>
            <p>unsignedByte</p>
          </td>
          <td>
            <p>enumeration, fractionDigits, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, totalDigits, whiteSpace</p>
          </td>
          <td>
            <p>Represents an integer with a minimum of zero and maximum of 255. This data type is derived from unsignedShort.</p>
          </td>
          <td>
            <p>Integer</p>
          </td>
        </tr><tr>
          <td>
            <p>unsignedInt</p>
          </td>
          <td>
            <p>enumeration, fractionDigits, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, totalDigits, whiteSpace</p>
          </td>
          <td>
            <p>Represents an integer with a minimum of zero and maximum of 4294967295. This data type is derived from unsignedLong.</p>
          </td>
          <td>
            <p>Integer, if totalDigits is less than 10. Otherwise, Character with totalDigits respected.</p>
          </td>
        </tr><tr>
          <td>
            <p>unsignedLong</p>
          </td>
          <td>
            <p>enumeration, fractionDigits, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, totalDigits, whiteSpace</p>
          </td>
          <td>
            <p>Represents an integer with a minimum of zero and maximum of 18446744073709551615. This data type is derived from nonNegativeInteger.</p>
          </td>
          <td>
            <p>Integer, if totalDigits is less than 10. Otherwise, Character with totalDigits respected.</p>
          </td>
        </tr><tr>
          <td>
            <p>unsignedShort</p>
          </td>
          <td>
            <p>enumeration, fractionDigits, pattern, minInclusive, minExclusive, maxInclusive, maxExclusive, totalDigits, whiteSpace</p>
          </td>
          <td>
            <p>Represents an integer with a minimum of zero and maximum of 65535. This data type is derived from unsignedInt.</p>
          </td>
          <td>
            <p>Integer</p>
          </td>
        </tr></table></div>
      <div class="labelheading"><b>Visual FoxPro Data Types to XML Schema Definition (XSD) Data Types</b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
            <th>
              Visual FoxPro data type
            </th>
            <th>
              XSD data type and examples
            </th>
            <th>
              Restrictions and sample restriction
            </th>
            <th>
              Comments
            </th>
          </tr><tr>
          <td>
            <p>Blob</p>
          </td>
          <td>
            <p>xs:base64Binary</p>
          </td>
          <td>
            <p>
              <code>&lt;xs:element name="ts12" minOccurs="0"&gt;</code>
            </p>
            <p>
              <code>   &lt;xs:simpleType&gt;</code>
            </p>
            <p>
              <code>     &lt;xs:restriction base="xs:base64Binary"/&gt;</code>
            </p>
            <p>
              <code>   &lt;/xs:simpleType&gt;</code>
            </p>
            <p>
              <code>&lt;/xs:element&gt;</code>
            </p>
            <p>
            </p>
          </td>
          <td>
            <p>Content is translated to base64 encoding.</p>
            <p>Maps to SQL Binary.</p>
          </td>
        </tr><tr>
          <td>
            <p>Character </p>
          </td>
          <td>
            <p>xs:string</p>
            <p>Confirm this is electric</p>
          </td>
          <td>
            <p>
              <code>&lt;xs:element name="cc04" minOccurs="0"&gt;</code>
            </p>
            <p>
              <code>   &lt;xs:simpleType&gt;</code>
            </p>
            <p>
              <code>      &lt;xs:restriction base="xs:string"&gt;</code>
            </p>
            <p>
              <code>       &lt;xs:maxLength value="128"/&gt;</code>
            </p>
            <p>
              <code>      &lt;/xs:restriction&gt;</code>
            </p>
            <p>
              <code>   &lt;/xs:simpleType&gt;</code>
            </p>
            <p>
              <code>&lt;/xs:element&gt;</code>
            </p>
            <p>
            </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Character (Binary)</p>
          </td>
          <td>
            <p>xs:string</p>
            <p>Confirm this is electric</p>
          </td>
          <td>
            <p>
              <code>&lt;xs:element name="cc04" minOccurs="0"&gt;</code>
            </p>
            <p>
              <code>   &lt;xs:simpleType&gt;</code>
            </p>
            <p>
              <code>      &lt;xs:restriction base="xs:string"&gt;</code>
            </p>
            <p>
              <code>       &lt;xs:maxLength value="128"/&gt;</code>
            </p>
            <p>
              <code>      &lt;/xs:restriction&gt;</code>
            </p>
            <p>
              <code>   &lt;/xs:simpleType&gt;</code>
            </p>
            <p>
              <code>&lt;/xs:element&gt;</code>
            </p>
            <p>
            </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Currency</p>
          </td>
          <td>
            <p>xs:decimal</p>
            <p>-1.23, 0, 123, 4, 1000.00</p>
          </td>
          <td>
            <p>
              <code>&lt;xs:element name="yc07" minOccurs="0"&gt;</code>
            </p>
            <p>
              <code>    &lt;xs:simpleType&gt;</code>
            </p>
            <p>
              <code>   &lt;xs:restriction base="xs:decimal"&gt;</code>
            </p>
            <p>
              <code>      &lt;xs:totalDigits value="19"/&gt;</code>
            </p>
            <p>
              <code>      &lt;xs:fractionDigits value="4"/&gt;</code>
            </p>
            <p>
              <code>   &lt;/xs:restriction&gt;</code>
            </p>
            <p>
              <code>    &lt;/xs:simpleType&gt;      </code>
            </p>
            <p>
              <code>&lt;/xs:element&gt;</code>
            </p>
            <p>
            </p>
          </td>
          <td>
            <p>Currency is always 19,4.</p>
          </td>
        </tr><tr>
          <td>
            <p>Date</p>
          </td>
          <td>
            <p>xs:date</p>
            <p>1999-05-31</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>DateTime</p>
          </td>
          <td>
            <p>xs:dateTime</p>
            <p>1999-05-31T13:20:00.000-05:00</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Double</p>
          </td>
          <td>
            <p>xs:double</p>
            <p>-INF, -1E4, -0, 0, 12.78E-2, 12, INF, NaN</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p>The export value should include the maximum scale allowed for double and not be limited to display scale (internal value of double).</p>
          </td>
        </tr><tr>
          <td>
            <p>Float</p>
          </td>
          <td>
            <p>xs:decimal</p>
          </td>
          <td>
            <p>
              <code>&lt;xs:element name="fc06" minOccurs="0"&gt;</code>
            </p>
            <p>
              <code>   &lt;xs:simpleType&gt;</code>
            </p>
            <p>
              <code>      &lt;xs:restriction base="xs:decimal"&gt;</code>
            </p>
            <p>
              <code>        &lt;xs:totalDigits value="14"/&gt;</code>
            </p>
            <p>
              <code>        &lt;xs:fractionDigits value="4"/&gt;</code>
            </p>
            <p>
              <code>      &lt;/xs:restriction&gt;</code>
            </p>
            <p>
              <code>   &lt;/xs:simpleType&gt;</code>
            </p>
            <p>
              <code>&lt;/xs:element&gt;</code>
            </p>
            <p>
            </p>
          </td>
          <td>
            <p>
              <i>totalDigits</i> is the number of digits not including decimal point.</p>
          </td>
        </tr><tr>
          <td>
            <p>General</p>
          </td>
          <td>
            <p>Not supported</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Integer</p>
          </td>
          <td>
            <p>xs:int </p>
            <p>-1, 126789675</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Logical</p>
          </td>
          <td>
            <p>xs:boolean</p>
            <p>true, false, 1, 0</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p>Values are either true and false or 1 and 0.</p>
          </td>
        </tr><tr>
          <td>
            <p>Memo</p>
          </td>
          <td>
            <p>xs:string</p>
          </td>
          <td>
            <p>
              <code>&lt;xs:element name="mc03" minOccurs="0"&gt;</code>
            </p>
            <p>
              <code>   &lt;xs:simpleType&gt;</code>
            </p>
            <p>
              <code>      &lt;xs:restriction base="xs:string"&gt;</code>
            </p>
            <p>
              <code>        &lt;xs:maxLength value="2147483647"/&gt;</code>
            </p>
            <p>
              <code>      &lt;/xs:restriction&gt;</code>
            </p>
            <p>
              <code>   &lt;/xs:simpleType&gt;</code>
            </p>
            <p>
              <code>&lt;/xs:element&gt;</code>
            </p>
            <p>
            </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Memo (Binary)</p>
          </td>
          <td>
            <p>xs:base64Binary</p>
          </td>
          <td>
            <p>
              <code>&lt;xs:element name="ts12" minOccurs="0"&gt;</code>
            </p>
            <p>
              <code>   &lt;xs:simpleType&gt;</code>
            </p>
            <p>
              <code>      &lt;xs:restriction base="xs:base64Binary"/&gt;</code>
            </p>
            <p>
              <code>   &lt;/xs:simpleType&gt;</code>
            </p>
            <p>
              <code>&lt;/xs:element&gt;</code>
            </p>
            <p>
            </p>
          </td>
          <td>
            <p>Content is translated to base64 encoding.</p>
            <p>Maps to SQL Binary.</p>
          </td>
        </tr><tr>
          <td>
            <p>Numeric</p>
          </td>
          <td>
            <p>xs:decimal</p>
            <p>-1.23, 0, 123, 1000.00</p>
          </td>
          <td>
            <p>
              <code>&lt;xs:element name="nc00" minOccurs="0"&gt;</code>
            </p>
            <p>
              <code>   &lt;xs:simpleType&gt;</code>
            </p>
            <p>
              <code>      &lt;xs:restriction base="xs:decimal"&gt;</code>
            </p>
            <p>
              <code>       &lt;xs:totalDigits value="10"/&gt;</code>
            </p>
            <p>
              <code>       &lt;xs:fractionDigits value="4"/&gt;</code>
            </p>
            <p>
              <code>      &lt;/xs:restriction&gt;</code>
            </p>
            <p>
              <code>   &lt;/xs:simpleType&gt;</code>
            </p>
            <p>
              <code>&lt;/xs:element &gt;</code>
            </p>
            <p>
            </p>
          </td>
          <td>
            <p>
              <i>totalDigits</i> is the number of digits not including decimal point.</p>
          </td>
        </tr><tr>
          <td>
            <p>Varbinary</p>
          </td>
          <td>
            <p>xs:base64Binary</p>
          </td>
          <td>
            <p>
              <code>&lt;xs:element name="cc04" minOccurs="0"&gt;</code>
            </p>
            <p>
              <code>   &lt;xs:simpleType&gt;</code>
            </p>
            <p>
              <code>      &lt;xs:restriction base="xs:base64Binary"&gt;</code>
            </p>
            <p>
              <code>        &lt;xs:maxLength value="128"/&gt;</code>
            </p>
            <p>
              <code>      &lt;/xs:restriction&gt;</code>
            </p>
            <p>
              <code>   &lt;/xs:simpleType&gt;</code>
            </p>
            <p>
              <code>&lt;/xs:element&gt;</code>
            </p>
            <p>
            </p>
          </td>
          <td>
            <p>Content is translated to base64 encoding.</p>
          </td>
        </tr><tr>
          <td>
            <p>Varchar</p>
          </td>
          <td>
            <p>xs:string</p>
            <p>Confirm this is electric</p>
          </td>
          <td>
            <p>
              <code>&lt;xs:element name="cc04" minOccurs="0"&gt;</code>
            </p>
            <p>
              <code>   &lt;xs:simpleType&gt;</code>
            </p>
            <p>
              <code>      &lt;xs:restriction base="xs:string"&gt;</code>
            </p>
            <p>
              <code>        &lt;xs:maxLength value="128"/&gt;</code>
            </p>
            <p>
              <code>     &lt;/xs:restriction&gt;</code>
            </p>
            <p>
              <code>   &lt;/xs:simpleType&gt;</code>
            </p>
            <p>
              <code>&lt;/xs:element&gt;</code>
            </p>
            <p>
            </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Varchar (Binary)</p>
          </td>
          <td>
            <p>xs:string</p>
            <p>Confirm this is electric</p>
          </td>
          <td>
            <p>
              <code>&lt;xs:element name="cc04" minOccurs="0"&gt;</code>
            </p>
            <p>
              <code>   &lt;xs:simpleType&gt;</code>
            </p>
            <p>
              <code>      &lt;xs:restriction base="xs:string"&gt;</code>
            </p>
            <p>
              <code>        &lt;xs:maxLength value="128"/&gt;</code>
            </p>
            <p>
              <code>     &lt;/xs:restriction&gt;</code>
            </p>
            <p>
              <code>   &lt;/xs:simpleType&gt;</code>
            </p>
            <p>
              <code>&lt;/xs:element&gt;</code>
            </p>
            <p>
            </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr></table></div>
      <p>
        <b>XML Schema Definition (XSD) Data Types to Visual FoxPro Data Types</b>
      </p>
      <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
            <th>
              XSD data type 
            </th>
            <th>
              Visual FoxPro data type
            </th>
          </tr><tr>
          <td>
            <p>xsd:binaryBase64</p>
          </td>
          <td>
            <p>Memo (Binary) </p>
          </td>
        </tr><tr>
          <td>
            <p>xsd:boolean</p>
          </td>
          <td>
            <p>Logical </p>
          </td>
        </tr><tr>
          <td>
            <p>xsd:date</p>
          </td>
          <td>
            <p>Date </p>
          </td>
        </tr><tr>
          <td>
            <p>xsd:dateTime</p>
          </td>
          <td>
            <p>DateTime </p>
          </td>
        </tr><tr>
          <td>
            <p>xsd:decimal</p>
          </td>
          <td>
            <p>Numeric </p>
          </td>
        </tr><tr>
          <td>
            <p>xsd:double</p>
          </td>
          <td>
            <p>Double </p>
          </td>
        </tr><tr>
          <td>
            <p>xsd:int</p>
          </td>
          <td>
            <p>Integer </p>
          </td>
        </tr><tr>
          <td>
            <p>xsd:string</p>
          </td>
          <td>
            <p>Character </p>
          </td>
        </tr><tr>
          <td>
            <p>xsd:string (more than 254 characters in length)</p>
          </td>
          <td>
            <p>Memo </p>
          </td>
        </tr></table></div>
      <div class="labelheading"><b>XML Data Reduced (XDR) Schema Data Types to Visual FoxPro Data Types</b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
            <th>
              XDR data type
            </th>
            <th>
              Description
            </th>
            <th>
              Visual FoxPro data type
            </th>
            <th>
              XSD type
            </th>
          </tr><tr>
          <td>
            <p>bin.base64</p>
          </td>
          <td>
            <p>Specifies MIME-style Base64-encoded binary data.</p>
          </td>
          <td>
            <p>Memo (Binary)</p>
          </td>
          <td>
            <p>base64Binary</p>
          </td>
        </tr><tr>
          <td>
            <p>bin.hex</p>
          </td>
          <td>
            <p>Specifies hexadecimal-encoded binary data.</p>
          </td>
          <td>
            <p>Memo (Binary)</p>
          </td>
          <td>
            <p>hexBinary</p>
          </td>
        </tr><tr>
          <td>
            <p>boolean</p>
          </td>
          <td>
            <p>Specifies a Boolean value of either 0 or 1. </p>
            <p>Example: 0 is false and 1 is true.</p>
          </td>
          <td>
            <p>Logical</p>
          </td>
          <td>
            <p>boolean</p>
          </td>
        </tr><tr>
          <td>
            <p>char</p>
          </td>
          <td>
            <p>Specifies a number corresponding to the Unicode representation of a single character.</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p>Not supported</p>
          </td>
        </tr><tr>
          <td>
            <p>date</p>
          </td>
          <td>
            <p>Specifies the date in a subset of the ISO 8601 format without the time data.</p>
            <p>Example: "1994-11-05"</p>
          </td>
          <td>
            <p>Date</p>
          </td>
          <td>
            <p>date</p>
          </td>
        </tr><tr>
          <td>
            <p>dateTime</p>
          </td>
          <td>
            <p>Specifies a date in a subset of the ISO 8601 format with optional time and no optional zone. Fractional seconds can be as precise as nanoseconds. </p>
            <p>Example: "1988-04-07T18:39:09"</p>
          </td>
          <td>
            <p>DateTime</p>
          </td>
          <td>
            <p>dateTime</p>
          </td>
        </tr><tr>
          <td>
            <p>dateTime.tz</p>
          </td>
          <td>
            <p>Specifies a date in a subset of the ISO 8601 format with optional time and optional zone. Fractional seconds can be as precise as nanoseconds. </p>
            <p>Example: "1988-04-07T18:39:09-08:00"</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p>None</p>
          </td>
        </tr><tr>
          <td>
            <p>entity</p>
          </td>
          <td>
            <p>Specifies a reference to an unparsed entity, requiring a matching &lt;!ENTITY&gt; declaration for each instance of the entity.</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p>None</p>
          </td>
        </tr><tr>
          <td>
            <p>entities</p>
          </td>
          <td>
            <p>Specifies a list of entities delimited by white space.</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p>None</p>
          </td>
        </tr><tr>
          <td>
            <p>enumeration</p>
          </td>
          <td>
            <p>Similar to nmtoken but with an explicit list of allowed values. Supported on attributes only. </p>
            <p>Example: "Red Blue Green"</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p>None</p>
          </td>
        </tr><tr>
          <td>
            <p>fixed.14.4</p>
          </td>
          <td>
            <p>Specifies a number with no more than fourteen digits to the left of the decimal point and no more than four to the right of the decimal point.</p>
            <p>Example: 9999.0044</p>
          </td>
          <td>
            <p>Currency</p>
          </td>
          <td>
            <p>decimal 19,4</p>
          </td>
        </tr><tr>
          <td>
            <p>float</p>
          </td>
          <td>
            <p>Specifies a real floating point number. </p>
            <p>Examples: 111, 3.14, -123.456E+10</p>
          </td>
          <td>
            <p>Double</p>
          </td>
          <td>
            <p>double</p>
          </td>
        </tr><tr>
          <td>
            <p>i1</p>
          </td>
          <td>
            <p>Specifies a 1-byte integer with an optional sign ranging from -128 to 127. </p>
            <p>Examples: 1, 127, -128</p>
          </td>
          <td>
            <p>Integer</p>
          </td>
          <td>
            <p>byte</p>
          </td>
        </tr><tr>
          <td>
            <p>i2</p>
          </td>
          <td>
            <p>Specifies a 2-byte integer with optional sign ranging from -32768 to 32767. </p>
            <p>Examples: 1, 703, -32768</p>
          </td>
          <td>
            <p>Integer</p>
          </td>
          <td>
            <p>short</p>
          </td>
        </tr><tr>
          <td>
            <p>i4</p>
          </td>
          <td>
            <p>Specifies a 4-byte integer with optional sign ranging from -2147483648 to 2147483647 </p>
            <p>Examples: 1, 703, -32768, 148343, -1000000000</p>
          </td>
          <td>
            <p>Integer</p>
          </td>
          <td>
            <p>int</p>
          </td>
        </tr><tr>
          <td>
            <p>i8</p>
          </td>
          <td>
            <p>Specifies an 8-byte integer with optional sign ranging from -9223372036854775808 to 9223372036854775807. </p>
            <p>Examples: 1, 703, -32768, 1483433434334, -1000000000000000</p>
          </td>
          <td>
            <p>Character or Integer</p>
          </td>
          <td>
            <p>long</p>
          </td>
        </tr><tr>
          <td>
            <p>id</p>
          </td>
          <td>
            <p>Specifies a value that identifies an attribute as an id type attribute. The id values must be unique throughout the document. </p>
            <p>In a document, idref(s) attributes refer to an id type attribute, forming a relationship similar to primary key and foreign key in relational databases.</p>
            <p>Example: Cust1</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p>None</p>
          </td>
        </tr><tr>
          <td>
            <p>idref </p>
          </td>
          <td>
            <p>Specifies a value corresponding to an id type, enabling intra-document links. </p>
            <p>Example: Cust1</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p>None</p>
          </td>
        </tr><tr>
          <td>
            <p>idrefs</p>
          </td>
          <td>
            <p>Similar to idref, except it contains multiple id type values separated by white space. </p>
            <p>Example: Cust1 Cust2 Cust3</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p>None</p>
          </td>
        </tr><tr>
          <td>
            <p>int</p>
          </td>
          <td>
            <p>Specifies a signed integer.</p>
            <p>Examples 11123, -123</p>
          </td>
          <td>
            <p>Integer</p>
          </td>
          <td>
            <p>int</p>
          </td>
        </tr><tr>
          <td>
            <p>nmtoken</p>
          </td>
          <td>
            <p>Contains values that conform to the rules of the name token.</p>
            <p>Example: Cust1</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p>None</p>
          </td>
        </tr><tr>
          <td>
            <p>nmtokens</p>
          </td>
          <td>
            <p>Similar to nmtoken except it can have a list of nmtoken values separated by white space. </p>
            <p>Example: Cust1 Cust2 Cust3</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p>None</p>
          </td>
        </tr><tr>
          <td>
            <p>notation</p>
          </td>
          <td>
            <p>A NOTATION type</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p>None</p>
          </td>
        </tr><tr>
          <td>
            <p>number</p>
          </td>
          <td>
            <p>A number with no limits on the digits </p>
            <p>Examples: 111, 3.14, -123.456E+10</p>
            <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
              <p>For ADO RecordSets, a special case exists where the number might have Currency type. When <i>dt:type='number'</i> in an ADO XDR Schema, Visual FoxPro checks for the existence of <i>rs:dbtype='currency'</i>.</p>
            </td></tr></table></div>
          </td>
          <td>
            <p>Character, Currency, or Numeric as appropriate</p>
          </td>
          <td>
            <p>decimal</p>
          </td>
        </tr><tr>
          <td>
            <p>r4</p>
          </td>
          <td>
            <p>Same as float but only 4-byte encoding. Value ranges from 1.17549435E-38F to 3.40282347E+38F.</p>
          </td>
          <td>
            <p>Double</p>
          </td>
          <td>
            <p>float</p>
          </td>
        </tr><tr>
          <td>
            <p>r8</p>
          </td>
          <td>
            <p>Specifies a floating point number. This data type supports only 15 digits of precision and value ranges from 2.2250738585072014E-308 to 1.7976931348623157E+308.</p>
          </td>
          <td>
            <p>Double</p>
          </td>
          <td>
            <p>double</p>
          </td>
        </tr><tr>
          <td>
            <p>string</p>
          </td>
          <td>
            <p>Specifies a string.</p>
            <p>Example: "This is a string"</p>
          </td>
          <td>
            <p>Character, if maxLength is less than 255. Otherwise, Memo.</p>
          </td>
          <td>
            <p>string</p>
          </td>
        </tr><tr>
          <td>
            <p>time</p>
          </td>
          <td>
            <p>Specifies a time in a subset of the ISO 8601 format with no date and no time zone. </p>
            <p>Example: "08:15:27"</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p>None</p>
          </td>
        </tr><tr>
          <td>
            <p>time.tz</p>
          </td>
          <td>
            <p>Specifies a time in a subset of the ISO 8601 format with no date but optional time zone. </p>
            <p>Example: "08:15:27-05:00"</p>
          </td>
          <td>
            <p>None</p>
          </td>
          <td>
            <p>None</p>
          </td>
        </tr><tr>
          <td>
            <p>ui1</p>
          </td>
          <td>
            <p>Specifies a 1-byte unsigned integer ranging from 0 to 255. </p>
            <p>Examples: 1, 255</p>
          </td>
          <td>
            <p>Integer</p>
          </td>
          <td>
            <p>unsignedByte</p>
          </td>
        </tr><tr>
          <td>
            <p>ui2</p>
          </td>
          <td>
            <p>Specifies a 2-byte unsigned integer ranging from 0 to 65535. </p>
            <p>Examples: 1, 255, 65535</p>
          </td>
          <td>
            <p>Integer</p>
          </td>
          <td>
            <p>unsignedShort</p>
          </td>
        </tr><tr>
          <td>
            <p>ui4</p>
          </td>
          <td>
            <p>Specifies a 4-byte unsigned integer ranging from 0 to 4294967296. </p>
            <p>Examples: 1, 703, 3000000000</p>
          </td>
          <td>
            <p>Character or Integer</p>
          </td>
          <td>
            <p>unsignedInt</p>
          </td>
        </tr><tr>
          <td>
            <p>ui8</p>
          </td>
          <td>
            <p>Specifies an 8-byte unsigned integer ranging from 0 to 18446744073709551615. </p>
            <p>Example: 1483433434334</p>
          </td>
          <td>
            <p>Character or Integer</p>
          </td>
          <td>
            <p>unsignedLong</p>
          </td>
        </tr><tr>
          <td>
            <p>uri</p>
          </td>
          <td>
            <p>Identifies a Uniform Resource Identifier (URI). </p>
            <p>Example: "urn:schemas-microsoft-com:Office9"</p>
          </td>
          <td>
            <p>Memo</p>
          </td>
          <td>
            <p>anyURI</p>
          </td>
        </tr><tr>
          <td>
            <p>uuid</p>
          </td>
          <td>
            <p>Contains hexadecimal digits representing octets with optional embedded hyphens that are ignored. </p>
            <p>Example: 333C7BC4-460F-11D0-BC04-0080C7055A83</p>
          </td>
          <td>
            <p>Character (C(40)) </p>
          </td>
          <td>
            <p>string</p>
          </td>
        </tr></table></div>
    </div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle)" tabindex="0"><img id="seeAlsoToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style="display: none;"><h4 class="subHeading">Reference</h4><span class="linkTerms"><a href="/html/67c1d841-7fa8-4e98-afaf-e4b167a52447.htm">Visual FoxPro Data and Field Types</a></span><br /><span class="linkTerms"><a href="/html/0e51628a-7e55-4025-8e92-cc1b6edee2fc.htm">XMLAdapter Class</a></span><br /><span class="linkTerms"><a href="/html/1270863b-32b1-4bbc-a9c2-175a07db9c3b.htm">XMLTable Class</a></span><br /><span class="linkTerms"><a href="/html/62180c49-1670-4df3-8cb6-62847cbc1813.htm">XMLField Class</a></span><br /><h4 class="subHeading">Other Resources</h4><span class="linkTerms"><a href="/html/b353259f-ae44-4c20-9b4c-53741595d66c.htm">Data and Field Types</a></span><br /><br /></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="Visual FoxPro and XML Schema Data Type Mapping">
</OBJECT>
