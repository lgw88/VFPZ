<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>GDI Plus Graphics Foundation Class</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="collapseImage" style="display:none; height:0; width:0;" alt="Collapse image" src="../local/collapse_all.gif">
      
      
    </img>
    <img id="expandImage" style="display:none; height:0; width:0;" alt="Expand image" src="../local/expand_all.gif">
      
      
    </img>
    <img id="collapseAllImage" style="display:none; height:0; width:0;" alt="CollapseAll image" src="../local/collall.gif">
      
      
    </img>
    <img id="expandAllImage" style="display:none; height:0; width:0;" alt="ExpandAll image" src="../local/expall.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">GDI Plus Graphics Foundation Class</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> 
									</td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" alt="CollapseAll image" src="../local/collall.gif">
                
                
              </img>
              <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">
                Collapse All
              </label>
              <label id="expandAllLabel" for="toggleAllImage" style="display: none;">
                Expand All
              </label> </span>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p>The <b>gpGraphics</b> class encapsulates a GDI+ drawing surface. It provides methods for drawing on a window or other canvas.</p>
    <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
          <th>
            
              <b>Category</b>
            
          </th>
          <th>
            
              <b>Reporting</b>
            
          </th>
        </tr><tr>
        <td>
          <p>Default Catalog</p>
        </td>
        <td>
          <p>Visual FoxPro Catalog\Foundation Classes\Output\GDIplus</p>
        </td>
      </tr><tr>
        <td>
          <p>Class</p>
        </td>
        <td>
          <p>gpGraphics</p>
        </td>
      </tr><tr>
        <td>
          <p>Base Class</p>
        </td>
        <td>
          <p>Custom</p>
        </td>
      </tr><tr>
        <td>
          <p>Class Library</p>
        </td>
        <td>
          <p>_GDIPLUS.vcx</p>
        </td>
      </tr><tr>
        <td>
          <p>Parent Class</p>
        </td>
        <td>
          <p>gpObject (<span class="linkTerms"><a href="/html/5f92e093-7044-407b-9b5b-ab9297c74c8d.htm">GDI Plus Object Foundation Class</a></span>)</p>
        </td>
      </tr></table></div>
  <h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle)" tabindex="0"><img id="remarksToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="display: none;">
    
      <p>The following table lists public properties and methods added by this class to its parent class, <b>gpObject</b>.  </p>
      <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
            <th>
              
                <b>Properties and methods</b>
              
            </th>
            <th>
              
                <b>Description</b>
              
            </th>
          </tr><tr>
          <td>
            <p>
              <b>Clear</b> Method</p>
          </td>
          <td>
            <p>Clears entire drawing surface and fills with specified background color.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.Clear(tvColor)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">tvColor</span>, required, a <span class="linkTerms"><a href="/html/24b878e6-e29e-46b0-a93e-69615984d09b.htm">GDI Plus Color Foundation Class</a></span> or ARGB color value.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>ClipBounds</b> Property</p>
          </td>
          <td>
            <p>A clipping region represented as a <span class="linkTerms"><a href="/html/a25255a9-9b11-4eca-b36b-002c7405c0c4.htm">GDI Plus Rectangle Foundation Class</a></span>. Read-only.</p>
            <p>
              <b>Default:</b>  Empty.</p>
            <p>
              <b>Remarks:</b>  If the clipping region is infinite, this member returns a meaningless large rectangle.  See <b>VisibleClipBounds</b> Property.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>CompositingMode</b> Property</p>
          </td>
          <td>
            <p>Specifies how composited images are drawn to this graphics object with possible values indicated by GDIPLUS_CompositingMode_* constants. Read-write.</p>
            <p>
              <b>Default:</b>  Empty.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>CompositingQuality</b> Property</p>
          </td>
          <td>
            <p>Specifies the rendering quality of composited images drawn to this graphics object with possible values indicated by GDIPLUS_CompositingQuality_* constants.</p>
            <p>
              <b>Default:</b>  Empty.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>CreateFromHDC</b> Method</p>
          </td>
          <td>
            <p>Creates a graphics object for a given device context (HDC).</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.CreateFromHDC(hDC)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">hDC</span>, required, numeric, Windows Device Context handle.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>CreateFromHWND</b> Method</p>
          </td>
          <td>
            <p>Creates a graphics object for a given window (HWND).</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.CreateFromHWND(hWND[, tlICM])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">hWND</span>, required, numeric, represents a handle to a window.</p>
            <p>
              <span class="parameter">tlICM</span>, optional, indicates whether to use image color management.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>CreateFromImage</b> Method</p>
          </td>
          <td>
            <p>Creates a graphics object from the specified <b>gpImage</b> object, so you can draw on that image's surface.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.CreateFromImage(toImage)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toImage</span>, required, a <b>gpImage</b> object.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DpiX</b> Property</p>
          </td>
          <td>
            <p>Specifies the horizontal resolution of drawing surface in dots per inch.  Read-only.</p>
            <p>
              <b>Default:</b>  Empty.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DpiY</b> Property</p>
          </td>
          <td>
            <p>Specifies the vertical resolution of drawing surface in dots per inch.  Read-only.</p>
            <p>
              <b>Default:</b>  Empty.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawArc</b> Method</p>
          </td>
          <td>
            <p>Draws an arc representing a portion of an ellipse, given the bounding rectangle of the ellipse, start, and sweep angles.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawArc(toPen,tX,tY,tnW, tnH, tnStart, tnSweep)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">tnX</span>, numeric, X-coordinate of top-left corner of bounding rectangle.</p>
            <p>
              <span class="parameter">tnY</span>, numeric, Y-coordinate of top-left corner of bounding rectangle.</p>
            <p>
              <span class="parameter">tnW</span>, numeric, width of bounding rectangle.</p>
            <p>
              <span class="parameter">tnH</span>, numeric, height of bounding rectangle.</p>
            <p>
              <span class="parameter">tnStart</span>, numeric, starting angle specified in degrees.</p>
            <p>
              <span class="parameter">tnSweep</span>, numeric, sweep angle specified in degrees.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawBezier</b> Method</p>
          </td>
          <td>
            <p>Draws a Bézier spline from four control points.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawBezier(toPen,tX1,tY1, tX2,tY2, tX3,tY3, tX4,tY4)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">tx1</span>, numeric, X-coordinate of 1st control point.</p>
            <p>
              <span class="parameter">ty1</span>, numeric, Y-coordinate of 1st control point.</p>
            <p>
              <span class="parameter">tx2</span>, numeric, X-coordinate of 2nd control point.</p>
            <p>
              <span class="parameter">ty2</span>, numeric, Y-coordinate of 2nd control point.</p>
            <p>
              <span class="parameter">tx3</span>, numeric, X-coordinate of 3rd control point.</p>
            <p>
              <span class="parameter">ty3</span>, numeric, Y-coordinate of 3rd control point.</p>
            <p>
              <span class="parameter">tx4</span>, numeric, X-coordinate of 4th control point.</p>
            <p>
              <span class="parameter">ty4</span>, numeric, Y-coordinate of 4th control point.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawBeziers</b> Method</p>
          </td>
          <td>
            <p>Draws a series of Bézier splines, given a Visual FoxPro array of points.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawBeziers(toPen, taPoints[, tnFirstCol])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">taPoints</span>, required, array containing coordinates of the end points. The array has one row for each point, and must have at least two columns, with <code>taArray[i, tnFirstCol]</code> containing the X-coordinate and <code>taArray[i,tnFirstCol+1]</code> containing the Y-coordinate.</p>
            <p>
              <span class="parameter">tnFirstCol</span>, optional, integer column index of the X-coordinate. Defaults to <code>1</code>.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawBeziersFromCursor</b> Method</p>
          </td>
          <td>
            <p>Draws a series of Bézier splines, given a set of points defined in a Visual FoxPro cursor.</p>
            <p>
              <b>Syntax:</b>
              <code> ? THIS.DrawBeziersFromCursor(toPen, tcAlias, tcExprX, tcExprY)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">tcAlias</span>, required, alias of cursor containing coordinates of the points, one row for each point.</p>
            <p>
              <span class="parameter">tcExprX</span>, required, string, expression to evaluate for X-coordinate (must evaluate to numeric).</p>
            <p>
              <span class="parameter">tcExprY</span>, required, string, expression to evaluate for Y-coordinate (must evaluate to numeric).</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawClosedCurve</b> Method</p>
          </td>
          <td>
            <p>Draws a closed curve through a set of points defined in a Visual FoxPro array.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawClosedCurve(toPen, taPoints[, tnFirstCol])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, <b>gpPen</b> to draw with.</p>
            <p>
              <span class="parameter">taPoints</span>, required, array containing coordinates of the points. The array has one row for each point, and must have at least two columns, with <code>taArray[i, tnFirstCol]</code> containing the X-coordinate and <code>taArray[i,tnFirstCol+1]</code> containing the Y-coordinate.</p>
            <p>
              <span class="parameter">tnFirstCol</span>, optional. Integer column index of the X-coordinate. Defaults to <code>1</code>.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawClosedCurveFromCursor</b> Method</p>
          </td>
          <td>
            <p>Draws a closed curve through a set of points defined in a Visual FoxPro cursor.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawClosedCurveFromCursor(toPen, tcAlias, tcExprX, tcExprY)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">tcAlias</span>, required, alias of cursor containing coordinates of the points, one row for each point.</p>
            <p>
              <span class="parameter">tcExprX</span>, required, string, expression to evaluate for X-coordinate (must evaluate to numeric).</p>
            <p>
              <span class="parameter">tcExprY</span>, required, string, expression to evaluate for Y-coordinate (must evaluate to numeric).</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawCurve</b> Method</p>
          </td>
          <td>
            <p>Draws a curve through a set of points defined in a Visual FoxPro array.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawCurve(toPen, taPoints[, tnFirstCol])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, <b>gpPen</b> to draw with.</p>
            <p>
              <span class="parameter">taPoints</span>, required, Array containing coordinates of the points. The array has one row for each point, and must have at least two columns, with <code>taArray[i, tnFirstCol]</code> containing the X-coordinate and <code>taArray[i,tnFirstCol+1]</code> containing the Y-coordinate.</p>
            <p>
              <span class="parameter">tnFirstCol</span>, optional. Integer column index of the X-coordinate. Defaults to <code>1</code>.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawCurveFromCursor</b> Method</p>
          </td>
          <td>
            <p>Draws a curve through a set of points defined in a Visual FoxPro cursor.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawCurveFromCursor(toPen, tcAlias, tcExprX, tcExprY)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">tcAlias</span>, required, alias of cursor containing coordinates of the points, one row for each point.</p>
            <p>
              <span class="parameter">tcExprX</span>, required, string, expression to evaluate for X-coordinate (must evaluate to numeric).</p>
            <p>
              <span class="parameter">tcExprY</span>, required, string, expression to evaluate for Y-coordinate (must evaluate to numeric).</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawEllipse</b> Method</p>
          </td>
          <td>
            <p>Draws an outlined ellipse specified by its bounding rectangle.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawEllipse(toPen, tXOrRectangle[,tnY,tnW,tnH])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">tXOrRectangle</span>, either a <b>gpRectangle</b> object specifying bounding rectangle or a numeric value specifying the X-coordinate of top-left corner of bounding rectangle</p>
            <p>
              <span class="parameter">tnY</span>, numeric, Y-coordinate of top-left corner of bounding rectangle. Required if <span class="parameter">tXorRectangle</span> is numeric.</p>
            <p>
              <span class="parameter">tnW</span>, numeric, width of bounding rectangle. Required if <span class="parameter">tXorRectangle</span> is numeric.</p>
            <p>
              <span class="parameter">tnH</span>, numeric, height of bounding rectangle. Required if <span class="parameter">tXorRectangle</span> is numeric.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawImageAt</b> Method</p>
          </td>
          <td>
            <p>Draws image at the specified location, using its original physical size.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawImageAt(toImage, destPointOrX[,destY])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toImage</span>, required, the <b>gpImage</b> object (or an instance of a class derived from <b>gpImage</b>) to draw.</p>
            <p>
              <span class="parameter">destPointOrX</span>, either a <b>gpPoint</b> object indicating the point at which to draw image, or numeric value, the X-coordinate of location to draw image.</p>
            <p>
              <span class="parameter">destY</span>, numeric, Y-coordinate of location to draw image. Required if <span class="parameter">tPointOrX</span> is numeric.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawImagePortionAt</b> Method</p>
          </td>
          <td>
            <p>Draws portion of an image at the specified location, using its original size.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawImagePortionAt(toImage, destPoint,srcRectangle[, srcUnit])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toImage</span>, required, the <b>gpImage</b> object (or an instance of a class derived from <b>gpImage</b>) to draw.</p>
            <p>
              <span class="parameter">destPoint</span>, required, a <b>gpPoint</b> object specifying destination location.</p>
            <p>
              <span class="parameter">srcRectangle</span>, required, a <b>gpRectangle</b> object specifying the portion of image to draw.</p>
            <p>
              <span class="parameter">srcUnit</span>, optional, the unit of measure for the source image, as defined in GDIPLUS_Unit_* constants.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawImagePortionScaled</b> Method</p>
          </td>
          <td>
            <p>Draws portion of an image at the specified location and with the specified size.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawImagePortionScaled(toImage, destRectangle,srcRectangle[, srcUnit[, imageAttribs]])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toImage</span>, required, the <b>gpImage</b> object (or an instance of a class derived from <b>gpImage</b>) to draw.</p>
            <p>
              <span class="parameter">destRectangle</span>, required, a <b>gpRectangle</b> object specifying destination location.</p>
            <p>
              <span class="parameter">srcRectangle</span>, required, a <b>gpRectangle</b> object specifying the portion of image to draw.</p>
            <p>
              <span class="parameter">srcUnit</span>, optional, the unit of measure for the source image, as defined in GDIPLUS_Unit_* constants.</p>
            <p>
              <span class="parameter">imageAttribs</span>, optional, an integer GDI+ handle for a GDI+ ImageAttributes object, or an instance of <b>gpObject</b> providing a wrapper for a GDI+ <b>ImageAttributes</b> object.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawImageScaled</b> Method</p>
          </td>
          <td>
            <p>Draws image at the specified location with the specified size.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawImageScaled(toImage, destRectangleOrX, destY,destW,destH)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toImage</span>, required, the <b>gpImage</b> object (or an instance of a class derived from <b>gpImage</b>) to draw.</p>
            <p>
              <span class="parameter">destRectangleOrX</span>, required, either a <b>gpRectangle</b> object specifying the destination location or a numeric value, the X-coordinate of the destination location.</p>
            <p>
              <span class="parameter">destY</span>, numeric, Y-coordinate of location to draw image. Required if <span class="parameter">destRectangleOrX </span>is numeric.</p>
            <p>
              <span class="parameter">destW</span>, numeric, desired width of image to be drawn. Required if <span class="parameter">destRectangleOrX </span>is numeric.</p>
            <p>
              <span class="parameter">destH</span>, numeric, desired height of image to be drawn. Required if <span class="parameter">destRectangleOrX </span>is numeric.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawLine</b> Method</p>
          </td>
          <td>
            <p>Draws a line between two points, in the specified pen.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawLine(toPen, x1,y1,x2,y2)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">x1,</span> required, numeric, X-coordinate of start point.</p>
            <p>
              <span class="parameter">y1</span>, required, numeric, Y-coordinate of start point.</p>
            <p>
              <span class="parameter">x2</span>, required, numeric, X-coordinate of end point.</p>
            <p>
              <span class="parameter">y2</span>, required, numeric, Y-coordinate of end point.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawLines</b> Method</p>
          </td>
          <td>
            <p>Draws a sequence of connected lines, given the endpoints of each line in a Visual FoxPro array.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawLines( toPen, taPoints [, tnFirstCol ] )</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">taPoints</span>, required, an array containing coordinates of the end points. The array has one row for each point, and must have at least two columns, with <code>taArray[i, tnFirstCol]</code> containing the X-coordinate and <code>taArray[i,tnFirstCol+1]</code> containing the Y-coordinate.</p>
            <p>
              <span class="parameter">tnFirstCol</span>, optional, an integer column index of the X-coordinate. Defaults to <code>1</code>.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawLinesFromCursor</b> Method</p>
          </td>
          <td>
            <p>Draws a sequence of connected lines, given the endpoints of each line in a Visual FoxPro cursor.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawLinesFromCursor(toPen, tcAlias, tcExprX, tcExprY)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">tcAlias</span>, required, alias of cursor containing coordinates of the end points, one row for each point.</p>
            <p>
              <span class="parameter">tcExprX</span>, required, string, expression to evaluate for X-coordinate (must evaluate to numeric).</p>
            <p>
              <span class="parameter">tcExprY</span>, required, string, expression to evaluate for Y-coordinate (must evaluate to numeric).</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawPie</b> Method</p>
          </td>
          <td>
            <p>Draws the outline of a pie slice.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawPie(toPen, tXOrRectangle,tnYOrStart,tnWOrSweep,tnH[, tnStart, tnSweep])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, the <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">toXOrRectangle</span>, a <b>gpRectangle</b> object specifying bounding rectangle or a numeric value specifying the X-coordinate of top-left corner of the bounding rectangle.</p>
            <p>
              <span class="parameter">tnYOrStart</span>, a numeric value, the Y-coordinate of top-left corner of bounding rectangle, if <span class="parameter">toXOrRectangle</span> is numeric or the starting angle specified in degrees, if <span class="parameter">toXOrRectangle</span> is a <b>gpRectangle</b> object.</p>
            <p>
              <span class="parameter">tnWOrSweep</span>, a numeric value, the width of the bounding rectangle, if <span class="parameter">toXOrRectangle</span> is numeric, or the sweep angle specified in degrees, if <span class="parameter">toXOrRectangle</span> is a <b>gpRectangle</b> object.</p>
            <p>
              <span class="parameter">tnH</span>, numeric, the height of bounding rectangle, when <span class="parameter">toXOrRectangle</span> is numeric.</p>
            <p>
              <span class="parameter">tnStart</span>, numeric, the starting angle specified in degrees, when <span class="parameter">toXOrRectangle</span> is numeric.</p>
            <p>
              <span class="parameter">tnSweep</span>, numeric, the sweep angle specified in degrees, when <span class="parameter">toXOrRectangle</span> is numeric.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawPolygon</b> Method</p>
          </td>
          <td>
            <p>Draws a polygon defined by a set of points as specified in a Visual FoxPro array.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawPolygon(toPen, taPoints[, tnFirstCol])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, the <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">taPoints</span>, required, an array containing coordinates of the points. The array has one row for each point, and must have at least two columns, with <code>taArray[i, tnFirstCol]</code> containing the X-coordinate and <code>taArray[i,tnFirstCol+1]</code> containing the Y-coordinate.</p>
            <p>
              <span class="parameter">tnFirstCol</span>, optional, the integer column index of the X-coordinate. Defaults to <code>1</code>.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawPolygonFromCursor</b> Method</p>
          </td>
          <td>
            <p>Draws a polygon defined by a set of points provided in a VisualFoxPro cursor.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawPolygonFromCursor(toPen, tcAlias, tcExprX, tcExprY</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">tcAlias</span>, required, alias of cursor containing coordinates of the points, one row for each point.</p>
            <p>
              <span class="parameter">tcExprX</span>, required, string, expression to evaluate for X-coordinate (must evaluate to numeric).</p>
            <p>
              <span class="parameter">tcExprY</span>, required, string, expression to evaluate for Y-coordinate (must evaluate to numeric).</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawRectangle</b> Method</p>
          </td>
          <td>
            <p>Draw an outlined rectangle, defined either by a <b>gpRectangle</b> object, or by separate coordinate and dimension parameters.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawRectangle(toPen, tXOrRectangle[,tnY,tnW,tnH])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">tXOrRectangle</span>, either a <b>gpRectangle</b> object specifying bounding rectangle or a numeric value specifying the X-coordinate of top-left corner of bounding rectangle</p>
            <p>
              <span class="parameter">tnY</span>, numeric, Y-coordinate of top-left corner of bounding rectangle. Required if <span class="parameter">tXorRectangle</span> is numeric.</p>
            <p>
              <span class="parameter">tnW</span>, numeric, width of bounding rectangle. Required if <span class="parameter">tXorRectangle</span> is numeric.</p>
            <p>
              <span class="parameter">tnH</span>, numeric, height of bounding rectangle. Required if <span class="parameter">tXorRectangle</span> is numeric.</p>
            <p>
              <b>Remarks:</b> All coordinates are in the current units of the <b>gpGraphics</b> object; see the <b>PageUnit</b> property entry.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawRectangles</b> Method</p>
          </td>
          <td>
            <p>Draws a set of outlined rectangles, given coordinates in a Visual FoxPro array.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawRectangles(toPen, taRects[, tnFirstCol])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, the <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">taRects</span>, required, an array containing coordinates of the points defining rectangles. The array has one row for each rectangle, and must have at least two columns, with <code>taArray[i, tnFirstCol]</code> containing the X-coordinate, <code>taArray[i,tnFirstCol+1]</code> containing the Y-coordinate, <code>aArray[i, tnFirstCol+2]</code> containing the width, and <code>taArray[i,tnFirstCol+3]</code> containing the height.</p>
            <p>
              <span class="parameter">tnFirstCol</span>, optional, the integer column index of the X-coordinate. Defaults to <code>1</code>.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawRectanglesFromCursor</b> Method</p>
          </td>
          <td>
            <p>Draws a set of outlined rectangles, given coordinates in a Visual FoxPro cursor.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawRectanglesFromCursor(toPen, tcAlias, tcExprX, tcExprY, tcExprW, tcExprH)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toPen</span>, required, <b>gpPen</b> to use.</p>
            <p>
              <span class="parameter">tcAlias</span>, required, alias of cursor containing coordinates of the points, one row for each rectangle.</p>
            <p>
              <span class="parameter">tcExprX</span>, required, string, expression to evaluate for X-coordinate (must evaluate to numeric).</p>
            <p>
              <span class="parameter">tcExprY</span>, required, string, expression to evaluate for Y-coordinate (must evaluate to numeric).</p>
            <p>
              <span class="parameter">tcExprW</span>, required, string, expression to evaluate for width (must evaluate to numeric).</p>
            <p>
              <span class="parameter">tcExprH</span>, required, string, expression to evaluate for height (must evaluate to numeric).</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawStringA</b> Method</p>
          </td>
          <td>
            <p>Draws a string in specified font and position (ANSI version).</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawStringA( tcAnsiString, [toFont],tvRectPoint,[toStringFormat],[toBrush])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">tcAnsiString</span>, required, the ANSI string to draw.</p>
            <p>
              <span class="parameter">toFont</span>, optional, a <b>gpFont</b> object specifying the font to use.</p>
            <p>
              <span class="parameter">tvRectPoint</span>, required, a <b>gpRect</b> object specifying the bounding rectangle, or a <b>gpPoint</b> object specifying the top left corner.</p>
            <p>
              <span class="parameter">toStringFormat</span>, optional, a <b>gpStringFormat</b> object.</p>
            <p>
              <span class="parameter">toBrush</span>, optional, a <b>gpBrush</b> object to use when drawing the text.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>DrawStringW</b> Method</p>
          </td>
          <td>
            <p>Draws a string in specified font and position (Unicode Version)</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.DrawStringW( tcUnicodeString,[toFont],tvRectPoint,[toStringFormat],[toBrush])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">tcUnicodeString</span>, required, the Unicode string to draw.</p>
            <p>
              <span class="parameter">toFont</span>, optional, a <b>gpFont</b> object specifying the font to use.</p>
            <p>
              <span class="parameter">tvRectPoint</span>, required, a <b>gpRect </b>object specifying the bounding rectangle, or a <b>gpPoint</b> object specifying the top left corner.</p>
            <p>
              <span class="parameter">toStringFormat</span>, optional, a <b>gpStringFormat</b> object.</p>
            <p>
              <span class="parameter">toBrush</span>, optional, a <b>gpBrush</b> object to use when drawing the text.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>FillClosedCurve</b> Method</p>
          </td>
          <td>
            <p>Fills a closed curve defined by a set of points in a Visual FoxPro array.</p>
            <p>
              <b>Syntax:</b>
              <code> ? THIS.FillClosedCurve(toBrush, taPoints[, tnFirstCol[, tnFillMode]])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toBrush</span>, required, the <b>gpBrush</b> to use.</p>
            <p>
              <span class="parameter">taPoints</span>, required, array containing coordinates of the end points. The array has one row for each point, and must have at least two columns, with <code>taArray[i, tnFirstCol]</code> containing the X-coordinate and <code>taArray[i,tnFirstCol+1]</code> containing the Y-coordinate.</p>
            <p>
              <span class="parameter">tnFirstCol</span>, optional, integer column index of the X-coordinate. Defaults to <code>1</code>.</p>
            <p>
              <span class="parameter">tnFillMode</span>, optional, the fill mode as defined by the GDIPLUS_FillMode_* constants.  Default value is <code>GDIPLUS_FillMode_Alternate</code>.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>FillClosedCurveFromCursor</b> Method</p>
          </td>
          <td>
            <p>Fills a closed curve as defined by a set of points in a Visual FoxPro cursor.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.FillClosedCurveFromCursor(toBrush, tcAlias, tcExprX, tcExprY[, tnFillMode])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toBrush</span>, required, <b>gpBrush</b> to use.</p>
            <p>
              <span class="parameter">tcAlias</span>, required, alias of cursor containing coordinates of the points, one row for each point.</p>
            <p>
              <span class="parameter">tcExprX</span>, required, string, expression to evaluate for X-coordinate (must evaluate to numeric).</p>
            <p>
              <span class="parameter">tcExprY</span>, required, string, expression to evaluate for Y-coordinate (must evaluate to numeric).</p>
            <p>
              <span class="parameter">tnFillMode</span>, optional, the fill mode as defined by the GDIPLUS_FillMode_* constants.  Default value is <code>GDIPLUS_FillMode_Alternate</code>.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>FillEllipse</b> Method</p>
          </td>
          <td>
            <p>Draws a filled ellipse specified by its bounding rectangle.</p>
            <p>
              <b>Syntax:</b>
              <code> ? THIS.FillEllipse(toBrush, tXOrRectangle[,tnY,tnW,tnH])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toBrush</span>, required, <b>gpBrush</b> to use.</p>
            <p>
              <span class="parameter">tXOrRectangle</span>, either a <b>gpRectangle</b> object specifying bounding rectangle or a numeric value specifying the X-coordinate of top-left corner of bounding rectangle</p>
            <p>
              <span class="parameter">tnY</span>, numeric, Y-coordinate of top-left corner of bounding rectangle. Required if <span class="parameter">tXorRectangle</span> is numeric.</p>
            <p>
              <span class="parameter">tnW</span>, numeric, width of bounding rectangle. Required if <span class="parameter">tXorRectangle</span> is numeric.</p>
            <p>
              <span class="parameter">tnH</span>, numeric, height of bounding rectangle. Required if <span class="parameter">tXorRectangle</span> is numeric.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>FillPie</b> Method</p>
          </td>
          <td>
            <p>Draws a filled pie slice.</p>
            <p>
              <b>Syntax:</b>
              <code> ? THIS.FillPie(toBrush, tXOrRect,tnYOrStart,tnWOrSweep,tnH[, tnStart, tnSweep])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toBrush</span>, required, the <b>gpBrush</b> to use.</p>
            <p>
              <span class="parameter">toXOrRectangle</span>, a <b>gpRectangle</b> object specifying bounding rectangle or a numeric value specifying the X-coordinate of top-left corner of the bounding rectangle.</p>
            <p>
              <span class="parameter">tnYOrStart</span>, a numeric value, the Y-coordinate of top-left corner of bounding rectangle, if <span class="parameter">toXOrRectangle</span> is numeric, or the starting angle specified in degrees, if <span class="parameter">toXOrRectangle</span> is a <b>gpRectangle</b> object.</p>
            <p>
              <span class="parameter">tnWOrSweep</span>, a numeric value, the width of the bounding rectangle, if <span class="parameter">toXOrRectangle</span> is numeric, or the sweep angle specified in degrees, if <span class="parameter">toXOrRectangle</span> is a <b>gpRectangle</b> object.</p>
            <p>
              <span class="parameter">tnH</span>, numeric, the height of bounding rectangle, when <span class="parameter">toXOrRectangle</span> is numeric.</p>
            <p>
              <span class="parameter">tnStart</span>, numeric, the starting angle specified in degrees, when <span class="parameter">toXOrRectangle</span> is numeric.</p>
            <p>
              <span class="parameter">tnSweep</span>, numeric, the sweep angle specified in degrees, when <span class="parameter">toXOrRectangle</span> is numeric.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>FillPolygon</b> Method</p>
          </td>
          <td>
            <p>Fills a polygon defined by a set of points in a Visual FoxPro array.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.FillPolygon(toBrush, taPoints[, tnFirstCol[, tnFillMode]])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toBrush</span>, required, the <b>gpBrush</b> to use.</p>
            <p>
              <span class="parameter">taPoints</span>, required, an array containing coordinates of the points. The array has one row for each point, and must have at least two columns, with <code>taArray[i, tnFirstCol]</code> containing the X-coordinate and <code>taArray[i,tnFirstCol+1]</code> containing the Y-coordinate.</p>
            <p>
              <span class="parameter">tnFirstCol</span>, optional, the integer column index of the X-coordinate. Defaults to <code>1</code>.</p>
            <p>
              <span class="parameter">tnFillMode</span>, optional, the fill mode as defined by the GDIPLUS_FillMode_* constants.  Default value is <code>GDIPLUS_FillMode_Alternate</code>.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>FillPolygonFromCursor</b> Method</p>
          </td>
          <td>
            <p>Fills a polygon defined by a set of points in a Visual FoxPro cursor.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.FillPolygonFromCursor(toBrush, tcAlias, tcExprX, tcExprY[, tnFillMode])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toBrush</span>, required, <b>gpBrush</b> to use.</p>
            <p>
              <span class="parameter">tcAlias</span>, required, alias of cursor containing coordinates of the points, one row for each point.</p>
            <p>
              <span class="parameter">tcExprX</span>, required, string, expression to evaluate for X-coordinate (must evaluate to numeric).</p>
            <p>
              <span class="parameter">tcExprY</span>, required, string, expression to evaluate for Y-coordinate (must evaluate to numeric).</p>
            <p>
              <span class="parameter">tnFillMode</span>, optional, the fill mode as defined by the GDIPLUS_FillMode_* constants.  Default value is <code>GDIPLUS_FillMode_Alternate</code>.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>FillRectangle</b> Method</p>
          </td>
          <td>
            <p>Fills a rectangle, defined either by a <b>gpRectangle</b> object, or by separate coordinates and dimension parameters.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.FillRectangle(toBrush, tXOrRect[,tnY,tnW,tnH])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <span class="parameter">toBrush</span>, required, <b>gpBrush</b> to use.</p>
            <p>
              <span class="parameter">tXOrRectangle</span>, either a <b>gpRectangle</b> object specifying bounding rectangle or a numeric value specifying the X-coordinate of top-left corner of bounding rectangle</p>
            <p>
              <span class="parameter">tnY</span>, numeric, Y-coordinate of top-left corner of bounding rectangle. Required if <span class="parameter">tXorRectangle</span> is numeric.</p>
            <p>
              <span class="parameter">tnW</span>, numeric, width of bounding rectangle. Required if <span class="parameter">tXorRectangle</span> is numeric.</p>
            <p>
              <span class="parameter">tnH</span>, numeric, height of bounding rectangle. Required if <span class="parameter">tXorRectangle</span> is numeric.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>FillRectangles</b> Method</p>
          </td>
          <td>
            <p>Fills a set of rectangles defined by coordinates in a Visual FoxPro array.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.FillRectangles(toBrush, taRects[, tnFirstCol])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toBrush</span>, required, the <b>gpBrush</b> to use.</p>
            <p>
              <span class="parameter">taRects</span>, required, an array containing coordinates of points defining the rectangles. The array has one row for each rectangle, and must have at least two columns, with <code>taArray[i, tnFirstCol]</code> containing the X-coordinate, <code>taArray[i,tnFirstCol+1]</code> containing the Y-coordinate, <code>aArray[i, tnFirstCol+2]</code> containing the width, and <code>taArray[i,tnFirstCol+3]</code> containing the height.</p>
            <p>
              <span class="parameter">tnFirstCol</span>, optional, the integer column index of the X-coordinate. Defaults to <code>1</code>.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>FillRectanglesFromCursor</b> Method</p>
          </td>
          <td>
            <p>Fills a set of rectangles defined in a Visual FoxPro cursor.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.FillRectanglesFromCursor(toBrush, tcAlias, tcExprX, tcExprY, tcExprW, tcExprH)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">toBrush</span>, required, <b>gpBrush</b> to use.</p>
            <p>
              <span class="parameter">tcAlias</span>, required, alias of cursor containing coordinates of the points, one row for each rectangle.</p>
            <p>
              <span class="parameter">tcExprX</span>, required, string, expression to evaluate for X-coordinate (must evaluate to numeric).</p>
            <p>
              <span class="parameter">tcExprY</span>, required, string, expression to evaluate for Y-coordinate (must evaluate to numeric).</p>
            <p>
              <span class="parameter">tcExprW</span>, required, string, expression to evaluate for width (must evaluate to numeric).</p>
            <p>
              <span class="parameter">tcExprH</span>, required, string, expression to evaluate for height (must evaluate to numeric).</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>Flush</b> Method</p>
          </td>
          <td>
            <p>Forces immediate processing of all pending graphics operations.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.Flush(tnFlushIntention)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">tnFlushIntention</span>, required, numeric values defined in GDIPLUS_FlushIntention_* constants.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>GetHdc</b> Method</p>
          </td>
          <td>
            <p>Obtains a Windows device context handle to enable drawing on the gpGraphics surface with Windows GDI functions.</p>
            <p>
              <b>Syntax:</b>
              <code> hDC = THIS.GetHdc()</code>
            </p>
            <p>
              <b>Return Values:</b> Integer handle to the GDI device context, or null (<code>.NULL.</code>) on error.</p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">none.</span>
            </p>
            <p>
              <b>Remarks:</b> This method is equivalent to the .NET <code>Graphics.GetHdc</code>. The handle must be released with <b>ReleaseHdc()</b> after use.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>InterpolationMode</b> Property</p>
          </td>
          <td>
            <p>Specifies the interpolation mode associated with this graphics object.</p>
            <p>
              <b>Default:</b>  Empty.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>MeasureStringA</b> Method</p>
          </td>
          <td>
            <p>Measures ANSI text string when drawn with the specified font and formatting.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.MeasureStringA(tcAnsiString,[toFont,[tvLayoutArea, [toStringFormat,[@rnCharsFitted[,@rnLinesFilled]]]])</code>
            </p>
            <p>
              <b>Return Values:</b> a <b>gpSize</b> object indicating the bounding rectangle of the string.  Returns null (<code>.NULL.</code>) on error.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">tcAnsiString</span>, required, the ANSI string to measure.</p>
            <p>
              <span class="parameter">toFont</span>, optional, a <b>gpFont</b> object specified font to measure in.</p>
            <p>
              <span class="parameter">tvLayoutArea</span>, optional, a <b>gpRectangle</b> or <b>gpSize</b> object to within which text should be laid out.</p>
            <p>
              <span class="parameter">toStringFormat</span>, optional, a <b>gpStringFormat</b> object</p>
            <p>
              <span class="parameter">rnCharsFitted</span>, optional, on return is set to the number of characters that fit into the layout rectangle.</p>
            <p>
              <span class="parameter">rnLinesFilled</span>, optional, on return is set to the number of lines that fit into the layout rectangle.</p>
            <p>
              <b>Remarks:</b> Note that the area of the <b>gpSize</b> object provided as a return value may be larger than a layout rectangle supplied to the method as the <span class="parameter">tvLayoutArea</span> parameter.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>MeasureStringW</b> Method</p>
          </td>
          <td>
            <p>Measures Unicode text string when drawn with the specified font and formatting.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.MeasureStringW(tcUnicodeString,[toFont,[tvLayoutArea, [toStringFormat,[@rnCharsFitted[,@rnLinesFilled]]]])</code>
            </p>
            <p>
              <b>Return Values:</b> a <b>gpSize</b> object indicating the bounding rectangle of the string. Returns null (<code>.NULL.</code>) on error.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">tcUnicodeString</span>, required, the Unicode string to measure.</p>
            <p>
              <span class="parameter">toFont</span>, optional, a <b>gpFont</b> object specified font to measure in.</p>
            <p>
              <span class="parameter">tvLayoutArea</span>, optional, a <b>gpRectangle</b> or <b>gpSize</b> object to within which text should be laid out.</p>
            <p>
              <span class="parameter">toStringFormat</span>, optional, a <b>gpStringFormat</b> object</p>
            <p>
              <span class="parameter">rnCharsFitted</span>, optional, on return is set to the number of characters that fit into the layout rectangle.</p>
            <p>
              <span class="parameter">rnLinesFilled</span>, optional, on return is set to the number of lines that fit into the layout rectangle.</p>
            <p>
              <b>Remarks:</b> Note that the area of the <b>gpSize</b> object provided as a return value may be larger than a layout rectangle supplied to the method as the <span class="parameter">tvLayoutArea</span> parameter. </p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>PageScale</b> Property</p>
          </td>
          <td>
            <p>Specifies the scaling between world units and page units.</p>
            <p>
              <b>Default:</b>  Empty.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>PageUnit</b> Property</p>
          </td>
          <td>
            <p>Specifies the unit of measure used for page coordinates, as defined in GDIPLUS_Unit_* constants. Read-write.</p>
            <p>
              <b>Default:</b>  Empty.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>PixelOffsetMode</b> Property</p>
          </td>
          <td>
            <p>Specifies how pixels are offset during rendering, using values indicated by GDIPLUS_PixelOffsetMode_* defined constants.</p>
            <p>
              <b>Default:</b>  <code>0</code>.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>ReleaseHdc</b> Method</p>
          </td>
          <td>
            <p>Releases a device context handle previously obtained with <b>GetHDC()</b> method.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.ReleaseHDC(tnHDC)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">tnHDC</span>, required, integer device context handle.</p>
            <p>
              <b>Remarks:</b> This method is equivalent to the .NET <code>Graphics.ReleaseHdc</code>.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>RenderingOrigin</b> Property</p>
          </td>
          <td>
            <p>The rendering origin for dithering and for hatch brushes, represented as a <b>gpPoint</b> object. Read-write.</p>
            <p>
              <b>Default:</b>  Empty.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>ResetTransform</b> Method</p>
          </td>
          <td>
            <p>Resets the world transform matrix (to no transformation).</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.ResetTransform()</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">none</span>.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>Restore</b> Method</p>
          </td>
          <td>
            <p>Restores previously saved graphics state.</p>
            <p>
              <b>Syntax:</b>
              <code>? THIS.Restore(tnGraphicsState)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">tnGraphicsState</span>, required, an integer graphics state handle previously obtained through the <b>Save()</b> method.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>RotateTransform</b> Method</p>
          </td>
          <td>
            <p>Prepends rotation by specified angle to this object's transformation matrix.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.RotateTransform(tnAngle[, tnMatrixOrder])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">tnAngle</span>, required, a rotation angle in degrees.</p>
            <p>
              <span class="parameter">tnMatrixOrder</span>, optional, the order of insertion into transformation matrix, as specified in GDIPLUS_MatrixOrder_* defined constants.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>Save</b> Method</p>
          </td>
          <td>
            <p>Saves current graphics state and returns a token (for later restore).</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.Save(@rnGraphicsState)</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">rnGraphicsState</span>, required, on return is set to a graphics state handle which can be passed to the <b>Restore()</b> method.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>ScaleTransform</b> Method </p>
          </td>
          <td>
            <p>Applies scaling to transformation matrix for this graphics object.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.ScaleTransform(tnScaleX, tnScaleY[, tnMatrixOrder])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">tnScaleX</span>, required, the horizontal scaling factor.</p>
            <p>
              <span class="parameter">tnScaleY</span>, required, the vertical scaling factor.</p>
            <p>
              <span class="parameter">tnMatrixOrder</span>, optional, the order of insertion into transformation matrix, as specified in GDIPLUS_MatrixOrder_* defined constants.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>SmoothingMode</b> Property</p>
          </td>
          <td>
            <p>Specifies rendering quality, with possible values indicated by GDIPLUS_SmoothingMode_* constants.</p>
            <p>
              <b>Default:</b>  Empty.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>TextContrast</b> Property</p>
          </td>
          <td>
            <p>Specifies gamma correction value for rendering text.</p>
            <p>
              <b>Default:</b>  Empty.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>TextRenderingHint</b> Property</p>
          </td>
          <td>
            <p>Specifies the rendering mode for text associated with this graphics object.</p>
            <p>
              <b>Default:</b>  Empty.</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>TranslateTransform</b> Method</p>
          </td>
          <td>
            <p>Adds translation by (x,y) to this graphics object's transformation matrix.</p>
            <p>
              <b>Syntax:</b>
              <code> THIS.TranslateTransform(tnOffsetX, tnOffsetY[, tnMatrixOrder])</code>
            </p>
            <p>
              <b>Return Values:</b> Logical, representing success or failure.</p>
            <p>
              <b>Parameters: </b>
            </p>
            <p>
              <span class="parameter">tnOffsetX</span>, required, the horizontal offset value.</p>
            <p>
              <span class="parameter">tnOffsetY</span>, required, the vertical offset value.</p>
            <p>
              <span class="parameter">tnMatrixOrder</span>, optional, the order of insertion into transformation matrix, as specified in GDIPLUS_MatrixOrder_* defined constants</p>
          </td>
        </tr><tr>
          <td>
            <p>
              <b>VisibleClipBounds</b> Property</p>
          </td>
          <td>
            <p>Visible clipping region represented as a <b>gpRectangle</b> object. Read-only.</p>
            <p>
              <b>Default:</b>  Empty.</p>
          </td>
        </tr></table></div>
    
  </div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle)" tabindex="0"><img id="seeAlsoToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style="display: none;"><h4 class="subHeading">Reference</h4><span class="linkTerms"><a href="/html/bc9c384e-280d-4c04-abe0-7f7c7c5fea4f.htm">Visual FoxPro Foundation Classes A-Z</a></span><br /><span class="linkTerms"><a href="/html/a8a60a3e-43d2-4f80-bdd0-89f5f68578ae.htm">GDI Plus API Wrapper Foundation Classes</a></span><br /><h4 class="subHeading">Concepts</h4><span class="linkTerms"><a href="/html/005682e4-5892-4e65-bcc3-2b64213e3fcc.htm">Guidelines for Using Visual FoxPro Foundation Classes</a></span><br /><br /></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="GDI Plus Graphics Foundation Class">
</OBJECT>
