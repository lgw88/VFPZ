<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>SQL Server Upsizing Wizard</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">SQL Server Upsizing Wizard</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoNoToggle" onclick="OpenSection(seeAlsoNoToggle)">
              See Also
            </a>
          </td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p>The SQL Server Upsizing wizard creates a SQL Server database that duplicates, as much as possible, the functionality of Visual FoxPro database. </p>
    <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
      <p>For SQL Server versions 6.5 and higher, the wizard sets the compatibility level to 6.5. You may need to reset this level and make additional changes after upsizing.</p>
    </td></tr></table></div>
    <p>You can create a local working model of your application using Visual FoxPro tables, views, and databases to represent data that eventually will be accessed on a remote server. When you are ready to move this prototype to its working location, you will upsize it. You can use the SQL Server Upsizing wizard to:  </p>
    <ul><li>
        <p>Move local data to a remote server.</p>
      </li><li>
        <p>Transform local base tables and local views into remote base tables and remote views. </p>
      </li><li>
        <p>Migrate a local application to a client/server application.</p>
      </li></ul>
    <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
      <p>Upsizing can take a long time, depending on the size of your data, the amount of network traffic, and the number of concurrent demands being handled by your server. Large tables may require several hours to upsize.</p>
    </td></tr></table></div>
    <p>Before you run the SQL Server Upsizing wizard, you must prepare both the client and server sides. You must have certain CREATE and SELECT permissions on the server and named connections on the client. For more information, see <a href="/html/11f7d8ea-0e20-4e00-bcc6-357972354a40.htm">SQL Server Upsizing Wizard Preparation</a>.</p>
    <p>To access the SQL Server Upsizing wizard from the <b>Tools</b> menu, choose <b>Wizards</b>, and then click <b>Upsizing</b>. </p>
  <h1 class="heading">Step 1 - Select Local Database</h1><div id="sectionSection0" class="seeAlsoNoToggleSection">
      <p>In the first step, you choose which local database you want to upsize.  </p>
      <dl><dt><span class="nonLinkTerms">
          <b>Database to upsize</b>
        </span></dt><dd>
          <p>Lists the currently open databases. Select the database you want to upsize. If you do not have a database open, choose the <b>Open</b> button to select and open a database.</p>
        </dd></dl>
    </div><h1 class="heading">Step 2 - Select Data Source</h1><div id="sectionSection1" class="seeAlsoNoToggleSection">
      <p>In this step, you specify options to select the ODBC SQL Server data source or named connection you want to use.   </p>
      <dl><dt><span class="nonLinkTerms">
          <b>ODBC data sources</b>
        </span></dt><dd>
          <p>Choose this option button to display SQL Server ODBC data sources. When selected, the adjoining list is titled <b>Available data sources</b>.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Connections</b>
        </span></dt><dd>
          <p>Choose this option button to display connections stored in the open database that connect to SQL Server data sources. When selected, the adjoining list is titled <b>Existing connections</b>.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Available data sources</b>
        </span></dt><dd>
          <p>Lists the ODBC data sources that connect to the SQL Server. This list is displayed when the <b>ODBC data sources</b> option button is selected.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Existing connections</b>
        </span></dt><dd>
          <p>This list is displayed when the <b>Connections</b> option button is selected. It lists the connections stored in the open database that connect to SQL Server data sources. </p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>All</b>
        </span></dt><dd>
          <p>Use this check box to display all data sources that are not identified explicitly with the "SQL Server" keywords in the title. The words "SQL Server" must appear in the data source name for Visual FoxPro to identify the data source as a SQL Server data source. If your data source uses a third-party driver to connect to SQL Server, it might not be identified as a SQL Server data source. </p>
          <p>The list displayed depends upon whether you have the <b>ODBC data sources</b> or the <b>Connections</b> option button selected. </p>
        </dd></dl>
      <p>When you click <b>Next</b>, the wizard connects you to SQL Server and displays the <b>SQL Server Login</b> dialog box. If you used a named connection with a saved password, the wizard logs you on to the SQL Server you've selected without prompting you for ODBC login information.</p>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Using a Named Connection</h3><div class="subSection" xmlns="">
          <p>If you use a named connection to access your data source, the <b>SQL Server Upsizing</b> wizard associates the named connection with any remote views it creates during upsizing. If the connection definition includes a password, the <b>Save Password With View</b> option (later in Step 8) is selected automatically for you and disabled; this prevents the password from being removed from the connection definition.</p>
        </div>
      <h3 class="subHeading" xmlns="">Using a Data Source</h3><div class="subSection" xmlns="">
          <p>If you use a data source name rather than a connection name to log on to the data source, and you choose to have the wizard create remote views, the <b>SQL Server Upsizing</b> wizard creates a named connection called "Upsize" (or "Upsize2," "Upsize3," and so on, if a connection definition exists with the suggested name).</p>
        </div>
    </sections></div><h1 class="heading">Step 3 – Choose Tables</h1><div id="sectionSection2" class="seeAlsoNoToggleSection">
      <p>In this step, you can select the Visual FoxPro tables you want to export to SQL Server.  </p>
      <dl><dt><span class="nonLinkTerms">
          <b>Available tables</b>
        </span></dt><dd>
          <p>Lists all the tables stored in the database you have chosen to upsize.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Selected tables</b>
        </span></dt><dd>
          <p>Lists the tables you've chosen to upsize into the database on the server.</p>
          <p>You must select at least one table, and you can choose the <b>&gt;&gt;</b> button to export all tables. </p>
        </dd></dl>
      <p>When you choose <b>Next</b>, the <b>SQL Server Upsizing</b> wizard reads the list of tables you've selected to upsize and tries to open those tables for exclusive use in the database you choose to upsize. Any tables that can't be opened exclusively won't be available to upsize. The tables are opened exclusively to prevent other users from changing the data in the tables during the upsizing process, which helps to ensure the accuracy of exported data. If any tables are already open and shared, the wizard closes them and then reopens them exclusively; this might cause you to lose any temporary relations established with the SET RELATION or SET SKIP commands.</p>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Choosing Tables to Export</h3><div class="subSection" xmlns="">
          <p>It's very important to choose the tables you export carefully, as this choice has a significant impact on the performance of your application. Exporting all tables might result in excessive (and slow) server queries. A well-designed client/server database usually consists of a mix of local and remote tables.</p>
          <p>In general, keep tables, which change rarely or infrequently, in your local database, such as a table of state names and abbreviations. Export tables that change frequently and are accessed by many users, such as a table of orders.</p>
          <p>The <b>SQL Server Upsizing</b> wizard exports the table's field names, data types, and data. For more information, see <a href="/html/7a4c60ae-5309-4014-87ec-08ce277eede4.htm">Planning Client/Server Applications</a> and <a href="/html/ea88b84a-e912-4f11-b6d0-b8ab7f38052a.htm">Optimizing Client/Server Performance</a><span class="parameter">.</span></p>
        </div>
    </sections></div><h1 class="heading">Step 4 - Map Field Data Types</h1><div id="sectionSection3" class="seeAlsoNoToggleSection">
      <p>In this step, Visual FoxPro displays the default data type mappings used to convert local data to remote data, as tables are upsized to the server. You can choose to change these default mappings.</p>
      <p>You cannot change the default mapping for a key field to a data type that prevents the field from being indexed. You can change the default mapping of a field that is part of an index key if you choose a data type that is indexable; however, you might want to change the data types for the other fields in the key to match. Visual FoxPro warns you if you change the default data type mapping for a field that is not a key field but is used in a Visual FoxPro index. If you make a mistake, click <b>Default</b> to reset the data types.  </p>
      <dl><dt><span class="nonLinkTerms">
          <b>Table</b>
        </span></dt><dd>
          <p>Select the table whose fields you want to map from the list of all the tables you've chosen to upsize.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Timestamp column</b>
        </span></dt><dd>
          <p>Select this check box to add a timestamp column to the server version of the table. If you want to apply this to all tables, you can save time by selecting the <b>All Tables</b> check box.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Identity column</b>
        </span></dt><dd>
          <p>Select this check box to add an identity column to the server version of the table. If you want to apply this to all tables, you can save time by checking the <b>All Tables</b> check box.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Default</b>
        </span></dt><dd>
          <p>Choose this button to reset all table field settings for all fields in the selected table back to their defaults. This button in effect undoes any changes you have entered for a specific table earlier in Step 4.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Field Name</b>
        </span></dt><dd>
          <p>Lists the fields contained in the table you selected in the <b>Table</b> list box.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>FoxPro Type</b>
        </span></dt><dd>
          <p>Lists the Visual FoxPro data type for the field.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Server Type</b>
        </span></dt><dd>
          <p>Lists the server data type to which Visual FoxPro data in this field will be mapped when the table is copied to the server. Click this field to display a drop-down list from which you can select a different server data type.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Width</b>
        </span></dt><dd>
          <p>Specifies the width of the field.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Precision</b>
        </span></dt><dd>
          <p>Specifies the decimal precision of the field, when applicable.</p>
        </dd></dl>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Creating Timestamp Columns</h3><div class="subSection" xmlns="">
          <p>A SQL Server timestamp column contains a unique value, generated by SQL Server that is updated whenever the server record is updated. Using a timestamp field on an updatable remote table can increase performance and reliability. </p>
          <p>If you update fields using the Visual FoxPro SQL WhereType values DB_KEYANDMODIFIED or DB_KEYANDUPDATABLE, Visual FoxPro must check all modified or all updatable fields to determine whether they were changed by another user. Because text or image fields can be many megabytes in size, comparing these fields for changes can be network-intensive and time-consuming, thereby reducing performance. Reliability also can be affected, because converting the value of a floating-point field between client and server might cause the value to appear to have changed when it has not.</p>
          <p>When you add a timestamp field to a remote table and update using the SQL WhereType value DB_KEYANDTIMESTAMP, Visual FoxPro uses only the value in the timestamp field to determine whether a record has been changed before updating it. Because Visual FoxPro can compare the value in the timestamp field more quickly than it can evaluate the contexts of large text or image fields, you can increase performance on remote data. However, if you use the SQL WhereType value DB_KEYANDTIMESTAMP, any change in the remote record is recognized as an update conflict, whether or not the changed remote field is in the list of fields you've set as modifiable in your remote view.</p>
          <p>If you prefer to update fields using the Visual FoxPro SQL WhereType values DB_KEYANDMODIFIED, you might improve performance by setting the remote view's Compare Memo property to false (.F.). When CompareMemo is set to false, Memo fields are removed from the list of remote view fields compared against the data in the remote server row.</p>
        </div>
    </sections></div><h1 class="heading">Step 5 - Select Target Database</h1><div id="sectionSection4" class="seeAlsoNoToggleSection">
      <p>In this step, you can select the database on the data source server to which you want to copy tables.</p>
      <p>After you have connected to a server and have chosen a data source, the tables you want to upsize, and the field data type mapping, you can use an existing database or create a new database as the destination for your upsized local database. If you chose a named connection earlier in Step 2, you can use the database named in the connection or create a new database as the destination.  </p>
      <dl><dt><span class="nonLinkTerms">
          <b>Available</b>
          <b> </b>
          <b>databases on '</b>
          <span class="parameter">database name</span>
          <b>'</b>
        </span></dt><dd>
          <p>This list is displayed when you select the <b>Existing</b> option button to add Visual FoxPro tables to an existing SQL Server database. Select the database into which you want to copy Visual FoxPro tables when you upsize.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>New database name</b>
        </span></dt><dd>
          <p>This text box is displayed when the <b>New</b> option button is selected. Enter a name for the new database you want to create on the remote server to which you are upsizing. The name can be up to 30 characters in length and can include letters, digits, and the symbols #, $, and _. Spaces are not allowed. </p>
        </dd></dl>
      <p>If you upsize to an existing database, the wizard jumps to Step 8.</p>
      <p>If you use a version of Microsoft SQL Server later than 6.<span class="parameter">x</span>, the wizard jumps to Step 8 whether you use an existing database or create a new one.</p>
    </div><h1 class="heading">Step 6 - Set Database Properties</h1><div id="sectionSection5" class="seeAlsoNoToggleSection">
      <p>If you chose to create a new SQL Server database earlier in Step 5, then the wizard displays this step to help you to select the database device and size for your database. You can choose to create your new SQL Server database on an existing device, or create a new device.</p>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Selecting an Existing Device</h3><div class="subSection" xmlns="">
          <dl><dt><span class="nonLinkTerms">
              <b>Database device</b>
            </span></dt><dd>
              <p>Displays all the devices on the SQL Server you logged on to, including default devices. Select a device with sufficient free space for your database.</p>
            </dd></dl><dl><dt><span class="nonLinkTerms">
              <b>Size</b>
            </span></dt><dd>
              <p>Displays the size in megabytes of the database device selected in the adjoining <b>Database Device</b> list box. </p>
            </dd></dl><dl><dt><span class="nonLinkTerms">
              <b>Free Space</b>
            </span></dt><dd>
              <p>Displays the amount of free space remaining on the database device selected in the <b>Database Device</b> list box.</p>
            </dd></dl><dl><dt><span class="nonLinkTerms">
              <b>Database size</b>
            </span></dt><dd>
              <p>Enter the amount of space, in megabytes, you want to allocate for the new database. The size of a new database must be at least two megabytes, because that is the minimum allowed by SQL Server.</p>
            </dd></dl>
        <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <h4 class="subHeading" xmlns="">Default Devices</h4><div class="subSection" xmlns="">
              <p>If one or more devices have been set as default devices on your SQL Server, the <b>SQL Server Upsizing</b> wizard includes a <b>Default</b> entry in the list of available devices. The <b>Default</b> entry can represent more than one device. Choosing the default device does not ensure you'll have enough room to upsize your database. The <b>SQL Server Upsizing</b> wizard checks the devices specified as default to make sure there's enough room for the database.</p>
              <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Tip </th></tr><tr><td>
                <p>To place your database on multiple devices, make those devices (and no others) default devices. When you run the <b>SQL Server Upsizing</b> wizard, select <b>Default</b> for your database.</p>
              </td></tr></table></div>
              <p>For more information on setting the default status of devices, see your SQL Server documentation for a description of the sp_diskdefault system procedure.</p>
            </div>
        </sections></div>
      <h3 class="subHeading" xmlns="">Creating a New Device</h3><div class="subSection" xmlns="">
          <p>If existing devices are too full, you might want to create a new device. You must be a system administrator to create new SQL Server devices.</p>
          <procedure xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
            To create a new SQL Server device
            <ddue:steps><ol xmlns=""><li>
                
                  <p>Select <b>Create new device</b> from the list of devices. </p>
                  <p>If you are a system administrator, a dialog box appears. Otherwise, an error message appears. </p>
                
              </li><li>
                
                  <p>Type a name for the new device. </p>
                  <p>The device name must be 30 characters or less and consist of letters, digits, and the symbols #, $, or _. Spaces are not allowed. </p>
                
              </li><li>
                
                  <p>Click <b>OK</b>. </p>
                  <p>The new device name is added to the devices list box. </p>
                
              </li><li>
                
                  <p>Type a device size. </p>
                  <p>The device size must be at least two megabytes. The combined size of new devices cannot exceed available disk space. </p>
                
              </li></ol></ddue:steps>
          </procedure>
          <p>If you are a system administrator, the <b>SQL</b><b> </b><b>Server</b><b> </b><b>Upsizing</b> wizard displays the amount of space on the server drive storing the Master SQL Server database.</p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>The size of a device cannot be changed after it has been set. Make sure you create sufficiently large devices.</p>
          </td></tr></table></div>
          <p>The selected new device is created after you choose the <b>Finish</b> button. The <b>SQL Server Upsizing</b> wizard creates the new device in the same directory as the Master database device. If you add a new device to the list but don't select the new device as the database device, then the new device is not created.</p>
          <p>The <b>SQL Server Upsizing</b> wizard can generate a report that includes the logical name, physical name, and other information about new devices you create.</p>
        </div>
      <h3 class="subHeading" xmlns="">Device Number Limitations</h3><div class="subSection" xmlns="">
          <p>Every SQL Server device is given a number when it is created. However, the available pool of device numbers is limited. The default value is 10, although the number might be different on your server. The <b>SQL Server Upsizing</b> wizard searches for an available device number. If all device numbers are taken, you won't be able to create a new device.</p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>To increase the number of SQL Server device numbers available, see your SQL Server documentation for a description of the sp_configure system procedure.</p>
          </td></tr></table></div>
        </div>
    </sections></div><h1 class="heading">Step 7 - Specify Log Properties</h1><div id="sectionSection6" class="seeAlsoNoToggleSection">
      <p>In this step, you can specify the size and device to store a transaction log. A transaction log is created for your database by SQL Server, and can be used to reconstruct the database in the event of a serious system problem.  </p>
      <dl><dt><span class="nonLinkTerms">
          <b>Log Device</b>
        </span></dt><dd>
          <p>Displays a list of log devices on the remote server. Select the device you want to use for the transaction log.</p>
          <p>Ideally, a database and its corresponding log should be placed on devices that are on separate physical disks. These devices must be created before you start the SQL Server Upsizing wizard, as the wizard creates all new devices on the same physical disk — the disk where the master database device resides.   </p>
          <p>If you have only one physical disk, you should place the database and its log on separate devices, so that you can use the SQL server DUMP TRANSACTION command. </p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Size</b>
        </span></dt><dd>
          <p>Displays the size in megabytes of the database device selected in the adjoining <b>Log Device</b> list box. </p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Free Space</b>
        </span></dt><dd>
          <p>Displays the amount of free space remaining on the log device selected in the <b>Log Device</b> list box.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Log Size</b>
        </span></dt><dd>
          <p>Enter the amount of space, in megabytes, you want to allocate for the transaction log. For more information on how to determine the log size you need, see Specifying Log Size later in this topic.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Database Size</b>
        </span></dt><dd>
          <p>Displays the amount of space allocated for the new database in Step 6.</p>
        </dd></dl>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Specifying Log Size</h3><div class="subSection" xmlns="">
          <p>As a general guideline, you allocate 10 to 20 percent of the size of the new SQL Server database; this guideline is dependent upon a number of considerations that are discussed in your SQL Server documentation.</p>
          <p>You can enter a value of 0 for the log size, which causes the wizard to place the log (a table called syslogs) on the same device as the database. When the log size is set to 0, the log consumes the minimum amount of space on the server but also fills up very quickly.</p>
          <p>When you upsize to a new database, the <b>SQL Server Upsizing</b> wizard dumps the transaction log every time it fills up. The dump makes a backup copy of a database and its transaction log in a form that can be read in with LOAD DATABASE. For more information on the SQL Server DUMP TRANSACTION command and on estimating the amount of space to allocate for a transaction log, see your SQL Server documentation. </p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>You can increase the size of a log or move it to a new device. For more information, see your SQL Server documentation for a description of the ALTER DATABASE command and the sp_logdevice system procedure.</p>
          </td></tr></table></div>
        </div>
    </sections></div><h1 class="heading">Step 8 - Set Upsizing Options</h1><div id="sectionSection7" class="seeAlsoNoToggleSection">
      <p>In this step, you can control how the <b>SQL Server Upsizing</b> wizard exports your tables. You also can specify the changes you want the <b>SQL Server Upsizing</b> wizard to make to the local database. You can create upsizing reports, redirect views to use remote data, create new remote views on tables that are upsized, and save passwords with views.</p>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Specifying Table Attributes to Upsize</h3><div class="subSection" xmlns="">
          <p>By default, the <b>SQL Server Upsizing</b> wizard exports a table's structure and its data. Along with field names and data types, you can also export:  </p>
          <ul><li>
              <p>Indexes</p>
            </li><li>
              <p>Defaults</p>
            </li><li>
              <p>Relationships (referential integrity constraints)</p>
            </li><li>
              <p>Validation rules</p>
            </li></ul>
          <p>The <b>SQL Server Upsizing</b> wizard can export additional table properties and create timestamp columns on certain SQL Server tables. The <b>SQL Server Upsizing</b> wizard also can modify your Visual FoxPro database so your queries, forms, and reports use the data in your new SQL Server tables, rather than the data in the local Visual FoxPro database.</p>
          <p>Visual FoxPro indexes and defaults become SQL Server indexes and defaults. If you choose to export validation rules, the <b>SQL</b><b> </b><b>Server Upsizing</b> wizard attempts to export field- and row-level validation rules to SQL Server, where they become stored procedures called from SQL Server triggers. Exported table relationships also become part of the triggers.</p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Tip </th></tr><tr><td>
            <p>If you export table relationships, be sure to export indexes as well or you might experience mediocre performance.</p>
          </td></tr></table></div>
        </div>
      <h3 class="subHeading" xmlns="">Table Attributes to Upsize</h3><div class="subSection" xmlns="">
          <dl><dt><span class="nonLinkTerms">
              <b>Indexes</b>
            </span></dt><dd>
              <p>Select to upsize Visual FoxPro .cdx indexes.</p>
            </dd></dl><dl><dt><span class="nonLinkTerms">
              <b>Defaults</b>
            </span></dt><dd>
              <p>Select to upsize default values for table fields.</p>
            </dd></dl><dl><dt><span class="nonLinkTerms">
              <b>Relationships</b>
            </span></dt><dd>
              <p>Select to upsize relationships stored in the database you are upsizing.</p>
            </dd></dl><dl><dt><span class="nonLinkTerms">
              <b>Validation rules</b>
            </span></dt><dd>
              <p>Select to upsize field and table validation rules. </p>
            </dd></dl><dl><dt><span class="nonLinkTerms">
              <b>Structure only, no data</b>
            </span></dt><dd>
              <p>Select to upsize the empty table structure, without copying table data to the SQL Server data source.</p>
            </dd></dl><dl><dt><span class="nonLinkTerms">
              <b>Use declarative referential integrity</b>
            </span></dt><dd>
              <p>Enabled when upsizing to a SQL Server version 6.<span class="parameter">x</span> database. Select to create SQL constraints to enforce referential integrity.</p>
            </dd></dl><dl><dt><span class="nonLinkTerms">
              <b>Null Mapping</b>
            </span></dt><dd>
              <p>Select the fields that can accept .NULL.</p>
              <p>This option helps to ensure that insert and update commands against remote data succeed. This option allows you to override the existing null setting fields in the Visual FoxPro tables being upsized. If you choose the General and Memo fields option, then all general and memo fields in your selected Visual FoxPro tables will be upsized with these fields set to allow nulls.   </p>
              <p>There are differences in how Visual FoxPro SQL commands such as INSERT and UPDATE affect local and remote data depending on the null settings for fields. For example, if you have an INSERT command that does not include all the fields in a table, Visual FoxPro inserts blanks into the unspecified fields for local data. If the INSERT command is issued for a remote view (SQL Server data), then nulls are inserted into the fields not specified in the command. The command will fail if any one of these fields does not support nulls. It's fairly easy to write an INSERT command, which includes all the fields and values to be inserted. Note, however, that inserting content into a general field is a little more cumbersome. </p>
            </dd></dl>
        </div>
      <h3 class="subHeading" xmlns="">Changes to Make Locally</h3><div class="subSection" xmlns="">
          <dl><dt><span class="nonLinkTerms">
              <b>Create upsizing report</b>
            </span></dt><dd>
              <p>Creates a series of reports documenting the results of the upsizing process.</p>
            </dd></dl><dl><dt><span class="nonLinkTerms">
              <b>Redirect views to remote data</b>
            </span></dt><dd>
              <p>Changes the definition of local views in the database you are upsizing to remote views that use the upsized server tables as base tables. Your queries, forms, and reports then use views on the data in the new SQL Server data source rather than the original Visual FoxPro data.</p>
            </dd></dl><dl><dt><span class="nonLinkTerms">
              <b>Create remote views on tables</b>
            </span></dt><dd>
              <p>When you upsize a local table, you need a remote view to access the upsized table on the remote server. The <b>SQL Server Upsizing</b> wizard can create new, remote views as you upsize. As the wizard creates new remote views, it renames all local versions of tables by adding the suffix "_local" to the table name.</p>
              <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
                <p>Creating remote views on tables as you upsize is not recommended, because these unoptimized views select all the data in the table rather than selecting only the information your application needs. The preferred method is to create parameterized views. You can either create a local parameterized view, which you then upsize by choosing <b>Redirect views to remote data</b>, or create a new parameterized remote view on the table after you've completed the upsizing process. For more information, see <a href="/html/028ab955-0e39-459e-a26c-bdd39c0fb0b4.htm">How to: Create Parameterized Views</a>.</p>
              </td></tr></table></div>
            </dd></dl><dl><dt><span class="nonLinkTerms">
              <b>Save password with views</b>
            </span></dt><dd>
              <p>By default, you must enter your password and login ID when opening a remote view in a new session with Visual FoxPro. Select this option to store your password locally with the remote view definition in your database.</p>
              <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
                <p>This check box is checked automatically for you and disabled if you used a named connection earlier in Step 2 to access your data source and that named connection includes a password. This prevents the password from being removed from the connection definition.</p>
              </td></tr></table></div>
            </dd></dl>
        </div>
      <h3 class="subHeading" xmlns="">Creating Upsizing Reports</h3><div class="subSection" xmlns="">
          <p>When you select <b>Create Upsizing Report</b>, Visual FoxPro generates upsizing reports that document the tables, views, fields, indexes, and referential integrity constraints the <b>SQL Server Upsizing</b> wizard creates on SQL Server. The wizard places the reports in a new project, using the following report names:  </p>
          <ul><li>
              <p>RptErrors</p>
            </li><li>
              <p>RptField</p>
            </li><li>
              <p>RptIndex</p>
            </li><li>
              <p>RptRels</p>
            </li><li>
              <p>RptTable</p>
            </li><li>
              <p>RptViews</p>
            </li></ul>
          <p>The upsizing reports include information about any devices and databases that are created, information about any errors encountered during the upsizing process, and a complete explanation of the way in which each Visual FoxPro object is mapped to a SQL Server object. You can view or print these reports after upsizing is complete.</p>
        </div>
      <h3 class="subHeading" xmlns="">Upsizing All Tables Used By a Local View</h3><div class="subSection" xmlns="">
          <p>If you upsize all the tables used by a local view, the local view is renamed by adding the suffix "_local" to the existing local view name. The <b>SQL Server Upsizing</b> wizard creates a new view based on the SQL statement of the local view, substituting the remote table names for the local table names. The KeyField and other update properties of the view are preserved.</p>
        </div>
      <h3 class="subHeading" xmlns="">Upsizing Some of the Tables Used By a Local View</h3><div class="subSection" xmlns="">
          <p>If you upsize only some of the tables used by a local view, the <b>SQL Server Upsizing</b> wizard does not rename the local views. Instead, it renames the Visual FoxPro tables you export with the suffix "_local." For example, if you export a table named "Employees," the table is renamed "Employees_local" in your database. The wizard then creates a remote view for each of the tables you exported. Each view selects all fields and all records from the remote table.</p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>Visual FoxPro handles local and remote data in different ways. The data access design of an application using local data may become very inefficient when applied as is to remote data.</p>
          </td></tr></table></div>
        </div>
      <h3 class="subHeading" xmlns="">Advanced Dialog Box</h3><div class="subSection" xmlns="">
          <dl><dt><span class="nonLinkTerms">
              <b>Make Primary Key a Clustered Index </b>
            </span></dt><dd>
              <p>By default, tables that have a primary key automatically get a clustered index created on SQL Server by the Upsizing wizard. This is because it is a SQL Server default if the [CLUSTERED | NONCLUSTERED] clause is not specified in the ALTER TABLE statement, which the wizard uses. Being that primary keys are often already in sequential order, a clustered index may not be needed. This option allows you to control whether a clustered index is created.</p>
            </dd></dl><dl><dt><span class="nonLinkTerms">
              <b>Drop Local Tables</b>
            </span></dt><dd>
              <p>If you choose to create remote views for your tables, the wizard will create a new set of remote views using the names of their corresponding tables (and rename the original tables). It is possible that you no longer need to use the local tables. This option allows you to drop the local tables from the database.</p>
            </dd></dl><dl><dt><span class="nonLinkTerms">
              <b>Default Remote View Name</b>
            </span></dt><dd>
              <p>If you choose to create remote views, you may want to control the naming of these tables. By default, the name used is that of the original table (and the original table is renamed). The following options allow you to control the naming of remote views.</p>
              <ul><li>
                  <p>
                    <b>Prefix</b>   Specifies a character string to prepend to each of the newly created remote view names.</p>
                </li><li>
                  <p>
                    <b>Suffix</b>   Specifies a character string to add to the end each of the newly created remote view names.</p>
                </li><li>
                  <p>
                    <b>None</b>   (Same as local table name.) Defaults to using table name, and renames original table.</p>
                </li></ul>
            </dd></dl>
        </div>
    </sections></div><h1 class="heading">Step 9 -Finish</h1><div id="sectionSection8" class="seeAlsoNoToggleSection">
      <p>In this step, you can choose to:  </p>
      <ul><li>
          <p>Upsize without generating SQL code.</p>
        </li><li>
          <p>Only generate SQL code for upsizing.</p>
        </li><li>
          <p>Upsize and generate SQL code.</p>
        </li></ul>
      <dl><dt><span class="nonLinkTerms">
          <b>Upsize</b>
        </span></dt><dd>
          <p>Select to begin creating databases and tables, as applicable, on the remote server.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Save generated SQL</b>
        </span></dt><dd>
          <p>Select to have the upsizing wizard generate the SQL script necessary to upsize your database and then stop without beginning to create databases and tables on your remote server.</p>
          <p>You can use this option to provide a SQL upsizing script that you then customize to meet the needs of your application. Once you've modified and saved the SQL script, you then run the script to complete the upsizing process. This two-step process provides tremendous flexibility, allowing you to use Visual FoxPro to generate the large majority of the code you'll need, yet providing a method for fine-tuning the upsized installation. </p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Upsize and save generate SQL</b>
        </span></dt><dd>
          <p>Select to upsize your database and save the SQL script generated by the wizard.</p>
        </dd></dl>
      <p>The first and third upsizing options are available only if you have CREATE TABLE permission on the server. If you choose either of the options that save generated SQL code, all the SQL code generated by the <b>SQL Server Upsizing</b> wizard is stored on your hard disk.</p>
      <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
        <p>Upsizing can take a long time, depending on the size of your data, the amount of network traffic, and the number of concurrent demands being handled by your server. Large tables can require several hours to export.</p>
      </td></tr></table></div>
      <p>To upsize your database, select the upsizing option you want and choose <b>Finish</b>.</p>
      <p>The <b>SQL Server Upsizing</b> wizard creates devices and databases if necessary, and begins exporting Visual FoxPro objects to SQL Server.</p>
    </div><h1 class="heading"><span id="seeAlsoNoToggle">See Also</span></h1><div id="seeAlsoSection" class="seeAlsoNoToggleSection"><h4 class="subHeading">Tasks</h4><span class="linkTerms"><a href="/html/2413eb3b-ce4d-44b1-88b2-375042e5cebc.htm">How to: Resolve SQL Server Upsizing Wizard Errors</a></span><br /><h4 class="subHeading">Concepts</h4><span class="linkTerms"><a href="/html/607ab194-ce6b-4b0a-be4f-3f0d93ff760b.htm">How the SQL Server Upsizing Wizard Works</a></span><br /><h4 class="subHeading">Other Resources</h4><span class="linkTerms"><a href="/html/59eb1864-2238-485b-ab3b-9159c999c3c4.htm">Wizards (Visual FoxPro)</a></span><br /><span class="linkTerms"><a href="/html/dac2edfd-d7a9-4f83-8ab7-bd54afa0d0b9.htm">Upsizing Visual FoxPro Databases</a></span><br /><br /></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="SQL Server Upsizing Wizard">
<param name="Alink Name" value="vfp.1999945410">
<param name="Alink Name" value="vfp.1999945411">
<param name="Alink Name" value="vfp.1999945412">
<param name="Alink Name" value="vfp.1999945413">
<param name="Alink Name" value="vfp.1999945414">
<param name="Alink Name" value="vfp.1999945415">
<param name="Alink Name" value="vfp.1999945416">
<param name="Alink Name" value="vfp.1999945417">
<param name="Alink Name" value="vfp.1999945418">
<param name="Alink Name" value="vfp.1999945419">
</OBJECT>
