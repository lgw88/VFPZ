<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>Microsoft Agent Utility Foundation Class</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="collapseImage" style="display:none; height:0; width:0;" alt="Collapse image" src="../local/collapse_all.gif">
      
      
    </img>
    <img id="expandImage" style="display:none; height:0; width:0;" alt="Expand image" src="../local/expand_all.gif">
      
      
    </img>
    <img id="collapseAllImage" style="display:none; height:0; width:0;" alt="CollapseAll image" src="../local/collall.gif">
      
      
    </img>
    <img id="expandAllImage" style="display:none; height:0; width:0;" alt="ExpandAll image" src="../local/expall.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">Microsoft Agent Utility Foundation Class</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> 
									</td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" alt="CollapseAll image" src="../local/collall.gif">
                
                
              </img>
              <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">
                Collapse All
              </label>
              <label id="expandAllLabel" for="toggleAllImage" style="display: none;">
                Expand All
              </label> </span>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p>This class gives you access to Microsoft Agent API routines so that you can integrate agents (similar to Office Assistants) such as Peedy the parakeet into your application.</p>
    <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
          <th>
            Category
          </th>
          <th>
            System Utilities
          </th>
        </tr><tr>
        <td>
          <p>Default Catalog</p>
        </td>
        <td>
          <p>Visual FoxPro Catalog\Foundation Classes\Utilities</p>
        </td>
      </tr><tr>
        <td>
          <p>Class</p>
        </td>
        <td>
          <p>_agent</p>
        </td>
      </tr><tr>
        <td>
          <p>Base Class</p>
        </td>
        <td>
          <p>Custom</p>
        </td>
      </tr><tr>
        <td>
          <p>Class Library</p>
        </td>
        <td>
          <p>_agent.vcx</p>
        </td>
      </tr><tr>
        <td>
          <p>Parent Class</p>
        </td>
        <td>
          <p>_custom</p>
        </td>
      </tr><tr>
        <td>
          <p>Sample</p>
        </td>
        <td>
          <p>...\Samples\Solution\Ffc\Agent.scx </p>
        </td>
      </tr></table></div>
  <h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle)" tabindex="0"><img id="remarksToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="display: none;">
    
      <p>To use, drop the class on a project or form or, from the <b>Component Gallery Item</b> shortcut menu, select <b>Add to Project</b> or <b>Add to Form</b>. When you add the class to a form, Visual FoxPro places the class icon on the form. You can specify the appropriate property values and provide any necessary input and output objects. When you drop the class on a project, you can choose between adding the class or creating a subclass.</p>
      <p>See <span class="linkTerms"><a href="/html/005682e4-5892-4e65-bcc3-2b64213e3fcc.htm">Guidelines for Using Visual FoxPro Foundation Classes</a></span> for more information on using foundation classes.</p>
      <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
            <th>
              Properties, Events, Methods
            </th>
            <th>
              Description
            </th>
          </tr><tr>
          <td>
            <p>ActiveAgent property</p>
          </td>
          <td>
            <p>Provides a pointer to the active Agent character object.</p>
            <p>
              <b>Default:</b> .F.</p>
          </td>
        </tr><tr>
          <td>
            <p>AgentControl property</p>
          </td>
          <td>
            <p>Provides a pointer to the agent object.</p>
            <p>
              <b>Default:</b> .F.</p>
          </td>
        </tr><tr>
          <td>
            <p>ErrorOccurred property</p>
          </td>
          <td>
            <p>Set to True (.T.) when an error occurs on LOAD.</p>
            <p>
              <b>Default: </b>.F.</p>
          </td>
        </tr><tr>
          <td>
            <p>ErrorState property</p>
          </td>
          <td>
            <p>Always set to LOAD.</p>
          </td>
        </tr><tr>
          <td>
            <p>GestureAt method</p>
          </td>
          <td>
            <p>Causes the active agent to gesture at a given point.</p>
            <p>
              <b>Syntax:</b> <code>GestureAt(tnX, tnY, tnCoords, toObj)</code></p>
            <p>
              <b>Return:</b> .F. if there is no ActiveAgent.</p>
            <p>
              <b>Arguments:</b>
              <span class="parameter">tnX</span> specifies x coordinate.<span class="parameter">tnY</span> specifies y coordinate.<span class="parameter">tnCoords</span> whether coordinates are local or world.<span class="parameter">toObj</span> specifies the object reference for LocalToWorld conversion.</p>
          </td>
        </tr><tr>
          <td>
            <p>Hide method</p>
          </td>
          <td>
            <p>Hides the active agent.</p>
            <p>
              <b>Syntax:</b> <code>Hide( )</code></p>
            <p>
              <b>Return:</b> .F. if there is no ActiveAgent.</p>
            <p>
              <b>Arguments: </b>none</p>
          </td>
        </tr><tr>
          <td>
            <p>Interrupt method</p>
          </td>
          <td>
            <p>Interrupts an animation.</p>
            <p>
              <b>Syntax:</b> <code>Interrupt(toRequest)</code></p>
            <p>
              <b>Return:</b> .F. if there is no ActiveAgent.</p>
            <p>
              <b>Arguments: </b>
              <span class="parameter">toRequest</span> specifies request object.</p>
          </td>
        </tr><tr>
          <td>
            <p>Load method</p>
          </td>
          <td>
            <p>Loads an agent character from the specified location (can be a file or URL).</p>
            <p>
              <b>Syntax:</b> <code>Load(tcAgentName, tcAgentLocation)</code></p>
            <p>
              <b>Return:</b> .F. if an error occurred.</p>
            <p>
              <b>Arguments: </b>
              <span class="parameter">tcAgentName </span>specifies name of agent.<span class="parameter">tcAgentLocation</span> specifies the agent file.</p>
          </td>
        </tr><tr>
          <td>
            <p>LocalToWorld method</p>
          </td>
          <td>
            <p>Converts local coordinates to world coordinates.</p>
            <p>
              <b>Syntax:</b> <code>LocalToWorld(tnAxis, tnPos, toObj)</code></p>
            <p>
              <b>Return: </b>converted value of <span class="parameter">tnPos</span>.</p>
            <p>
              <b>Arguments: </b>
              <span class="parameter">tnAxis</span> specifies the axis.<span class="parameter">tnPos</span> specifies axis coordinate.<span class="parameter">toObj </span>specifies object to which conversion is relative.</p>
          </td>
        </tr><tr>
          <td>
            <p>MoveBy method</p>
          </td>
          <td>
            <p>Moves the active agent by the passed values in the x or y direction.</p>
            <p>
              <b>Syntax:</b> <code>MoveBy(tnX, tnY, tnCoords, toObj)</code></p>
            <p>
              <b>Return:</b> .F. if there is no ActiveAgent.</p>
            <p>
              <b>Arguments: </b>
              <span class="parameter">tnX</span> specifies x coordinate.<span class="parameter">tnY</span> specifies y coordinate.<span class="parameter">tnCoords</span> specifies whether coordinates are local or world.<span class="parameter">toObj</span> object reference for LocalToWorld conversion.</p>
          </td>
        </tr><tr>
          <td>
            <p>MoveTo method</p>
          </td>
          <td>
            <p>Moves the default agent or agent passed to the location specificed.</p>
            <p>
              <b>Syntax:</b> <code>MoveTo(tnX, tnY, tnCoords, toObj)</code></p>
            <p>
              <b>Return:</b> .F. if there is no ActiveAgent.</p>
            <p>
              <b>Arguments: </b>
              <span class="parameter">tnX</span> specifies x coordinate.<span class="parameter">tnY</span> specifies y coordinate.<span class="parameter">tnCoords</span> specifies whether coordinates are local or world.<span class="parameter">toObj</span> object reference for LocalToWorld conversion.</p>
          </td>
        </tr><tr>
          <td>
            <p>Play method</p>
          </td>
          <td>
            <p>Causes the active agent to play an animation.</p>
            <p>
              <b>Syntax:</b> <code>Play(tcAnimation)</code></p>
            <p>
              <b>Return:</b> .F. if there is no ActiveAgent or a Request Object reference.</p>
            <p>
              <b>Arguments: </b>
              <span class="parameter">tcAnimation</span> specifies animation to play.</p>
          </td>
        </tr><tr>
          <td>
            <p>SetActiveAgent method</p>
          </td>
          <td>
            <p>Sets the active agent to the agent with the passed name.</p>
            <p>
              <b>Syntax:</b> <code>SetActiveAgent(tcAgentName)</code></p>
            <p>
              <b>Return:</b> .T. if ActiveAgent is set.</p>
            <p>
              <b>Arguments: </b>
              <span class="parameter">tcAgentName</span> specifies the name of the agent.</p>
          </td>
        </tr><tr>
          <td>
            <p>Show method</p>
          </td>
          <td>
            <p>Displays the active agent.</p>
            <p>
              <b>Syntax:</b> <code>Show(tnX, tnY, tnCoords, toObj)</code></p>
            <p>
              <b>Return: </b>.F. if there is no ActiveAgent.</p>
            <p>
              <b>Arguments: </b>
              <span class="parameter">tnX</span> specifies x coordinate<span class="parameter">tnY</span> specifies y coordinate<span class="parameter">tnCoords</span> specifies whether coordinates are local or world.<span class="parameter">toObj</span> object reference for LocalToWorld conversion.</p>
          </td>
        </tr><tr>
          <td>
            <p>Speak method</p>
          </td>
          <td>
            <p>Causes the active agent to speak the passed phrase.</p>
            <p>
              <b>Syntax:</b> <code>Speak(tcText)</code></p>
            <p>
              <b>Return:</b> .F. if there is no ActiveAgent or a Request Object reference.</p>
            <p>
              <b>Arguments: </b>
              <span class="parameter">tcText </span>specifies text to speak.</p>
          </td>
        </tr><tr>
          <td>
            <p>Stop method</p>
          </td>
          <td>
            <p>Stops a looping animation.</p>
            <p>
              <b>Syntax:</b> <code>Stop( )</code></p>
            <p>
              <b>Return:</b> .F. if there is no ActiveAgent.</p>
            <p>
              <b>Arguments: </b>none</p>
          </td>
        </tr><tr>
          <td>
            <p>Wait method</p>
          </td>
          <td>
            <p>Waits for a request to complete.</p>
            <p>
              <b>Syntax:</b> <code>Wait(toRequest)</code></p>
            <p>
              <b>Return: </b>.F. if there is no ActiveAgent.</p>
            <p>
              <b>Arguments: </b>
              <span class="parameter">toRequest </span>specifies the requesting object.</p>
          </td>
        </tr></table></div>
    
  </div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle)" tabindex="0"><img id="seeAlsoToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style="display: none;"><h4 class="subHeading">Reference</h4><span class="linkTerms"><a href="/html/bc9c384e-280d-4c04-abe0-7f7c7c5fea4f.htm">Visual FoxPro Foundation Classes A-Z</a></span><br /><h4 class="subHeading">Concepts</h4><span class="linkTerms"><a href="/html/005682e4-5892-4e65-bcc3-2b64213e3fcc.htm">Guidelines for Using Visual FoxPro Foundation Classes</a></span><br /><h4 class="subHeading">Other Resources</h4><span class="linkTerms"><a href="/html/3abe5487-930b-4981-a8e8-1c09f9d7ec32.htm">Foundation Class Samples</a></span><br /><br /></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="Microsoft Agent Utility Foundation Class">
<param name="Alink Name" value="vfp.1230990">
</OBJECT>
