<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>@ ... GET - Transparent Buttons Command</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="collapseImage" style="display:none; height:0; width:0;" alt="Collapse image" src="../local/collapse_all.gif">
      
      
    </img>
    <img id="expandImage" style="display:none; height:0; width:0;" alt="Expand image" src="../local/expand_all.gif">
      
      
    </img>
    <img id="collapseAllImage" style="display:none; height:0; width:0;" alt="CollapseAll image" src="../local/collall.gif">
      
      
    </img>
    <img id="expandAllImage" style="display:none; height:0; width:0;" alt="ExpandAll image" src="../local/expall.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">@ ... GET - Transparent Buttons Command</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> 
									</td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" alt="CollapseAll image" src="../local/collall.gif">
                
                
              </img>
              <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">
                Collapse All
              </label>
              <label id="expandAllLabel" for="toggleAllImage" style="display: none;">
                Expand All
              </label> </span>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p> </p>
  <div id="sectionSection0" class="seeAlsoNoToggleSection">
      <p>Included for backward compatibility. Use the <a href="/html/c12db413-abee-455c-9ad0-366dd2b68236.htm">CommandButton Control</a> instead.</p>
    </div>
<!-- VFPX FPW2.6 begin -->
	<p class="vfpx">This command is undocumented in the original VFP9 help file, <br />but the following documentation was found in the FoxPro for Windows 2.6 help, and may still be valid:<br /></p>
	<p />
	<p>Creates invisible buttons.</p>
	<div id="syntaxSection" class="section">
		<div id="syntaxCodeBlocks" class="code">
			<span codeLanguage="other">
				<table width="100%" cellspacing="0" cellpadding="0">
				<tr>
					<th align="left"></th>
				</tr>
				<tr>
					<td>
					<pre>@ <span class="parameter">row, column</span> 
GET <span class="parameter">memvar</span> | <span class="parameter">field</span> 
FUNCTION <span class="parameter">expC1</span> | PICTURE <span class="parameter">expC2</span>
	[DEFAULT <span class="parameter">expN1</span>]
	[SIZE <span class="parameter">expN2</span>, <span class="parameter">expN3</span>
		[, <span class="parameter">expN4</span>]]
	[ENABLE | DISABLE]
	[MESSAGE <span class="parameter">expC5</span>]
	[VALID <span class="parameter">expL1</span> | <span class="parameter">expN5</span>]
	[WHEN <span class="parameter">expL2</span>]
	[COLOR SCHEME <span class="parameter">expN6</span>
	| COLOR <span class="parameter">color pair list</span>]</pre>
					</td>
				<tr>
				</table>
			</span>
		</div>
	</div>
	<p />
	<h4 class="subHeading">Parameters</h4>
<span class="nonLinkTerms"><span class="parameter">row, column</span></span><br />
&nbsp;Row and column are numeric expressions with values 0 or greater that determine where the first button in a set of invisible buttons appears. <br />
<br />
&nbsp;The first row is number 0 in the main FoxPro window or a user-defined window. Rows are numbered from top to bottom. In FoxPro for Windows, row 0 is the row immediately under the FoxPro system menu bar. In FoxPro for Macintosh, row 0 is the row immediately under the FoxPro title bar. In FoxPro for MS-DOS, row 0 is the row the FoxPro system menu bar occupies. See SET SYSMENU for information about manipulating the system menu bar so you can place output on row 0 in FoxPro for MS-DOS. <br />
<br />
&nbsp;The first column is number 0 in the main FoxPro window or a user-defined window. Columns are numbered from left to right. <br />
<br />
&nbsp;When the first button in a set of invisible buttons is directed to a user-defined window, the row and column coordinates are relative to the user-defined window, not the main FoxPro window. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, a position in the main FoxPro window or in a user-defined window is determined by the font of the main FoxPro window or the user-defined window. Most fonts can be displayed in a wide variety of sizes, and some are proportionally spaced. A row corresponds to the height of the current font; a column corresponds to the average width of a letter in the current font. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, you can position the first button in a set of invisible buttons in a window with decimal fractions for row and column coordinates. In FoxPro for MS-DOS, decimal fractions used for row and column coordinates are rounded to the nearest integer value.<br />
<br />
<span class="nonLinkTerms"><span class="parameter">memvar</span></span> | <span class="parameter">field</span><br />
&nbsp;When you choose an invisible button, a number corresponding to your choice is stored to a memory variable, an array element or a field. For example, if you create four invisible buttons and choose the third button, 3 is stored to the memory variable, array element or field named by <span class="parameter">memvar</span> or <span class="parameter">field</span>. The initial value of <span class="parameter">memvar</span> or <span class="parameter">field</span> determines which button is initially selected. <br />
<br />
FUNCTION <span class="parameter">expC1</span> | PICTURE <span class="parameter">expC2</span> <br />
&nbsp;When creating invisible buttons, you must include the FUNCTION clause, the PICTURE clause or both. There is no advantage to any of the three methods. The FUNCTION or PICTURE clause contains the invisible button specification code *I.<br />
<br />
&nbsp;The FUNCTION clause character expression <span class="parameter">expC1</span> must begin with *I. To create more than one invisible button, include a semicolon for each additional button. For example, this clause creates three invisible buttons:  <br />
<br />
&nbsp;... FUNCTION '*I ;;' ...<br />
<br />
&nbsp;Note that the clause contains only two semicolons.<br />
<br />
&nbsp;The PICTURE clause character expression <span class="parameter">expC2</span> uses the same syntax as the FUNCTION character expression, except the PICTURE clause expression must begin with @ followed by *I and a space. For example, this clause creates three invisible buttons: <br />
<br />
&nbsp;... PICTURE '@*I ;;' ... <br />
<br />
&nbsp;You can also include both the FUNCTION and PICTURE clauses to create invisible buttons. If both are included, FUNCTION <span class="parameter">expC1</span> must contain *I to create the invisible buttons and can also include a space followed by semicolons to create additional invisible buttons. PICTURE <span class="parameter">expC2</span> can include semicolons to create additional invisible buttons. <br />
<br />
&nbsp;The following examples illustrate the various forms of syntax you can use to create invisible buttons. Five invisible buttons are created and a number corresponding to each button chosen is stored to MCHOICE. The first button is placed in the second row and column. Each button is two rows high and four columns wide, and the buttons are separated by a single row.  <br />
<br />
&nbsp;FUNCTION clause only:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*I ;;;;' SIZE 2, 4, 1<br />
&nbsp;READ<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;STORE '*I ;;;;' TO mfunc<br />
&nbsp;@ 2,2 GET mchoice FUNCTION mfunc SIZE 2, 4, 1<br />
&nbsp;READ<br />
<br />
&nbsp;PICTURE clause only:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice PICTURE '@*I ;;;;' SIZE 2, 4, 1<br />
&nbsp;READ<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice PICTURE '@*I' + ' ;;;;' SIZE 2, 4, 1<br />
&nbsp;READ<br />
<br />
&nbsp;FUNCTION and PICTURE clauses:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*I' PICTURE ' ;;;;' SIZE 2, 4, 1<br />
&nbsp;READ <br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*I ;;' PICTURE ';;' SIZE 2, 4, 1<br />
&nbsp;READ<br />
<br />
PICTURE and FUNCTION Options N, T, H and V<br />
&nbsp;Additional options can be combined with the *I specification code to modify the behavior (N and T options) and appearance (H and V options) of invisible buttons. These options are described below:<br />
<br />
&nbsp;Option&nbsp;Description<br />
&nbsp;------&nbsp;-----------<br />
&nbsp;<br />
&nbsp;   N&nbsp;Does not terminate the READ when an invisible button is chosen. This is the default behavior.<br />
<br />
&nbsp;   T&nbsp;Terminates the READ when an invisible button is chosen. <br />
<br />
&nbsp;   H&nbsp;Positions the invisible buttons in a horizontal row.<br />
<br />
&nbsp;   V&nbsp;Positions the invisible buttons in a vertical row. This is the default position. <br />
<br />
&nbsp;You can combine the H and V options with the T and N options in the following ways: NH, NV, TH and TV. For example, the following clause creates a vertical set of buttons and doesn't cause the READ to terminate when one of the buttons is selected: <br />
<br />
&nbsp;... FUNCTION '*INV ... '<br />
<br />
Disabled Invisible Buttons<br />
&nbsp;You can disable an invisible button so that it cannot be selected. When a button is disabled, it appears in disabled colors. To disable an invisible button, place two backslashes (\\) before the semicolon corresponding to the button in the FUNCTION or PICTURE clause. <br />
<br />
&nbsp;In the following example, five invisible buttons are created. The second and fourth buttons are disabled by placing two backslashes before the second and fourth semicolons respectively. If you are using FoxPro for Windows, set the font for the main FoxPro window to 9-point FoxFont to draw the box characters correctly.<br />
<br />
&nbsp;CLEAR<br />
&nbsp;STORE 1 TO mchoice<br />
<br />
&nbsp;*** Draw boxes for the invisible-button regions. ***<br />
<br />
&nbsp;@ 4,2  SAY CHR(218) + CHR(196) + CHR(196) + CHR(191)<br />
&nbsp;@ 5,2  SAY CHR(192) + CHR(196) + CHR(196) + CHR(217)<br />
&nbsp;@ 7,2  SAY CHR(218) + CHR(196) + CHR(196) + CHR(191)<br />
&nbsp;@ 8,2  SAY CHR(192) + CHR(196) + CHR(196) + CHR(217)<br />
&nbsp;@ 10,2 SAY CHR(218) + CHR(196) + CHR(196) + CHR(191)<br />
&nbsp;@ 11,2 SAY CHR(192) + CHR(196) + CHR(196) + CHR(217)<br />
&nbsp;@ 13,2 SAY CHR(218) + CHR(196) + CHR(196) + CHR(191)<br />
&nbsp;@ 14,2 SAY CHR(192) + CHR(196) + CHR(196) + CHR(217)<br />
&nbsp;@ 16,2 SAY CHR(218) + CHR(196) + CHR(196) + CHR(191)<br />
&nbsp;@ 17,2 SAY CHR(192) + CHR(196) + CHR(196) + CHR(217)<br />
<br />
&nbsp;@ 4,2 GET mchoice FUNCTION '*I ;\\;;\\;' SIZE 2, 4, 1<br />
&nbsp;READ <br />
<br />
DEFAULT <span class="parameter">expN1</span><br />
&nbsp;When you choose an invisible push button, your choice is saved in the memory variable, array element or field you specify. If you specify a memory variable that doesn't exist, it is automatically created and initialized if you include the DEFAULT. However, an array element isn't created if you specify an array element in a DEFAULT clause. The DEFAULT clause is ignored if the memory variable already exists or you specify a field.<br />
<br />
&nbsp;-------------------------------<br />
&nbsp;Note - If the DEFAULT clause isn't included and the memory variable specified with <span class="parameter">memvar</span> doesn't exist, the error message "Variable not found" appears. <br />
&nbsp;-------------------------------<br />
&nbsp;<br />
&nbsp;The DEFAULT expression <span class="parameter">expN1</span> determines the initial value of <span class="parameter">memvar</span>. Here are examples of DEFAULT clauses for invisible buttons:<br />
<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*I ;;;;' DEFAULT 1<br />
&nbsp;READ<br />
&nbsp;STORE 3 TO mbutton<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*I ;;;;' DEFAULT mbutton<br />
&nbsp;READ<br />
<br />
SIZE <span class="parameter">expN2</span>, <span class="parameter">expN3</span> [, <span class="parameter">expN4</span>]<br />
&nbsp;The SIZE clause determines the size and spacing of invisible buttons. The numeric expressions <span class="parameter">expN2</span> and <span class="parameter">expN3</span> control the height and width of each button respectively. The default for the height and width is 0.<br />
<br />
&nbsp;By default, no space is placed between vertical buttons, and a single column is placed between horizontal buttons. The spacing between invisible buttons is determined by <span class="parameter">expN4</span>. If you create vertical buttons, <span class="parameter">expN4</span> designates the number of rows between buttons. If you create horizontal buttons, <span class="parameter">expN4</span> designates the number of columns between buttons. <br />
<br />
ENABLE | DISABLE<br />
&nbsp;Invisible buttons are enabled by default when READ is issued. You can prevent a set of buttons from being activated when READ is issued by including DISABLE. Disabled invisible push buttons cannot be chosen and are displayed in disabled colors. To disable individual invisible buttons instead of the entire set of buttons, see "Disabled Invisible Buttons" earlier in this section. Use SHOW GET ENABLE to enable a set of disabled invisible buttons. <br />
<br />
MESSAGE <span class="parameter">expC5</span><br />
&nbsp;The MESSAGE clause character expression <span class="parameter">expC5</span> appears when an invisible button is selected. In FoxPro for MS-DOS, the message is centered on the last line of the main FoxPro window by default. The message location can be changed with SET MESSAGE. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, the message is placed in the graphics-based status bar. If the graphics-based status bar has been turned off with SET STATUS BAR OFF, the message is placed on the last line of the main FoxPro window.<br />
<br />
VALID <span class="parameter">expL1</span> | <span class="parameter">expN5</span><br />
&nbsp;You can include an optional VALID expression <span class="parameter">expL1</span> or <span class="parameter">expN5</span> that is evaluated when an invisible button is chosen. That is, VALID isn't evaluated when you select (move to) an invisible button, but when you actually choose a button.<br />
<br />
&nbsp;Typically, <span class="parameter">expL1</span> or <span class="parameter">expN5</span> is a user-defined function. With a user-defined function you can select, enable or disable other objects, open a Browse window, open another data-entry screen or move to a new record. CLEAR READ can be included in the user-defined function (UDF) to terminate the READ.<br />
<br />
<span class="nonLinkTerms"><span class="parameter">expL1</span></span><br />
&nbsp;When a logical value is returned to the VALID clause, the logical value is ignored and the invisible buttons remain the current control. However, you can specify a UDF that returns a logical value to the VALID clause and activates another object.<br />
<br />
<span class="nonLinkTerms"><span class="parameter">expN5</span></span><br />
&nbsp;A VALID clause that includes a numeric expression is used to specify which object is activated after an invisible button is chosen. Objects are @ ... GET input fields, check boxes, lists, popups, spinners, text-editing regions and each individual button in a set of push, radio and invisible buttons. <br />
<br />
&nbsp;The numeric expression <span class="parameter">expN5</span> has one of three effects:<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN5</span> = 0, the chosen invisible button remains the active button.<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN5</span> is positive, <span class="parameter">expN5</span> indicates the number of objects to advance. For example, when you're positioned on the last button in a set of invisible buttons and VALID returns 1, the next object is activated. If <span class="parameter">expN5</span> is greater than the number of objects remaining, the READ is terminated (unless READ CYCLE is issued to activate the objects).<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN5</span> is negative, <span class="parameter">expN5</span> indicates the number of objects to move back. For example, when you're positioned on the first button in a set of invisible buttons and VALID returns -1, the previous @ ... GET input field or control is activated. If <span class="parameter">expN5</span> moves back past the first object, the READ is terminated (unless READ CYCLE is issued to activate the objects).<br />
<br />
WHEN <span class="parameter">expL2</span><br />
&nbsp;The WHEN clause allows or prohibits selection of the invisible buttons based on the logical value of <span class="parameter">expL2</span>, which must evaluate to a logical true (.T.) before any of the invisible buttons can be selected. If <span class="parameter">expL2</span> evaluates to false (.F.), none of the invisible buttons can be selected and are skipped if placed between other objects.<br />
<br />
COLOR SCHEME <span class="parameter">expN6</span> | COLOR <span class="parameter">color pair list</span><br />
&nbsp;If you do not include a COLOR clause, invisible button colors are determined by the color scheme for the main FoxPro window; if invisible buttons are placed in a user-defined window, the window's color scheme determines the invisible button colors. <br />
<br />
&nbsp;The colors of invisible buttons can be specified by including the number of an existing color scheme in the COLOR SCHEME clause or a set of color pairs in the COLOR clause. <br />
<br />
&nbsp;A color scheme is a set of 10 predefined color pairs. The color pairs in a color scheme can be changed with SET COLOR OF SCHEME. In FoxPro for MS-DOS, the color pairs in a color scheme can also be changed in the Color Picker.<br />
<br />
&nbsp;A color pair is a set of two letters separated by a forward slash. The first letter specifies the foreground color and the second letter specifies the background color.<br />
<br />
&nbsp;For example, this color pair specifies a red foreground on a white background:<br />
<br />
&nbsp;R/W<br />
<br />
&nbsp;For a list of colors and their corresponding color letters, see SET COLOR Overview or Color Table by Color Pair.<br />
<br />
&nbsp;A color pair can also be specified with a set of six RGB (Red Green Blue) color values separated by commas. The first three color values specify the foreground color and the second three color values specify the background color. The color values can range from 0 through 255. <br />
<br />
&nbsp;The R/W color pair in the example above can also be specified with this RGB color pair:<br />
<br />
&nbsp;RGB(255,0,0,255,255,255)<br />
<br />
&nbsp;Color pair 6 determines the color of the selected invisible button.<br />
<br />
	<h1 class="heading">
	<span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle)" tabindex="0"><img id="remarksToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Remarks</span></h1>
	<div id="remarksSection" class="section" name="collapseableSection" style="display: none;">
<p><br />
This variation of @ ... GET creates invisible buttons, which are rectangular regions of the main FoxPro window or a user-defined window that you can select. You can use @ ... SAY to place characters on the rectangular button regions. When you select an invisible button, the characters in the button are highlighted. Issue READ or READ CYCLE to activate the buttons. <br />
<br />
If you use the Screen Builder to create your data-entry screens, you might not have to use this command at all. The Screen Builder automatically generates the commands that create invisible buttons. <br />
<br />
</p>
</div>
	<h1 class="heading">
	<span onclick="ExpandCollapse(codeExampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(codeExampleToggle)" tabindex="0"><img id="codeExampleToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Example</span></h1>
	<div id="codeExampleSection" class="section" name="collapseableSection" style="display: none;">
<p>The following example demonstrates invisible buttons. @ ... SAY places four sets of characters (hearts, diamonds, clubs and spades) in the main FoxPro window. Four invisible buttons are created that line up with the characters. When an invisible button is chosen, the SHOWCARD routine is executed that indicates which button has been chosen. If you are using FoxPro for Windows, set the font for the main FoxPro window to 9-point FoxFont to draw the box characters correctly.<br />
<br />
<div class="code">
	<span codeLanguage="other">
	<table width="100%" cellspacing="0" cellpadding="0">
		<tr>
		<th> </th>
		<span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0">
		<img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span>
		</th>
		</tr>
		<tr>
			<td colspan="2">
				<pre>STORE 0 TO mchoice
ACTIVATE SCREEN
CLEAR
@ 2,2  SAY REPLICATE(CHR(3),2)  && Hearts
@ 3,2  SAY REPLICATE(CHR(3),2)
@ 2,10 SAY REPLICATE(CHR(4),2)  && Diamonds
@ 3,10 SAY REPLICATE(CHR(4),2)
@ 2,18 SAY REPLICATE(CHR(5),2)  && Clubs
@ 3,18 SAY REPLICATE(CHR(5),2)
@ 2,26 SAY REPLICATE(CHR(6),2)  && Spades
@ 3,26 SAY REPLICATE(CHR(6),2)
@ 1,1,4,4    BOX
@ 1,9,4,12   BOX
@ 1,17,4,20  BOX
@ 1,25,4,28  BOX
*** The next line creates four invisible buttons and ***
*** executes the procedure SHOWCARD when a button is chosen. ***
@ 1,1 GET mchoice PICTURE '@*IH ;;;' SIZE 4, 4, 4 VALID SHOWCARD();
	MESSAGE 'Pick a card, any card!' COLOR ,,,,,R/W
READ CYCLE
PROCEDURE SHOWCARD   && procedure executed when a button is chosen
@ 6,1 CLEAR
DO CASE
	CASE _CUROBJ = 1		&& First button chosen
		@ 6,1 SAY 'Hearts'
	CASE _CUROBJ = 2		&& Second button chosen
		@ 6,9 SAY 'Diamonds'
	CASE _CUROBJ = 3		&& Third  button chosen
		@ 6,17 SAY 'Clubs'
	CASE _CUROBJ = 4		&& Fourth button chosen
		@ 6,25 SAY 'Spades'
ENDCASE
RETURN .T.
</pre>			</td>		</tr>
	</table>
	</span>
</div>
</p>
</div>
<!-- VFPX FPW2.6 end -->
<h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle)" tabindex="0"><img id="seeAlsoToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>See Also</span></h1>
<div id="seeAlsoSection" class="section" name="collapseableSection" style="display: none;">
<!-- VFPX FPW2.6 Footer begin -->
<h4 class="subHeading">Other Resources</h4>
<span class="linkTerms"><a href="/html/672125e7-29a8-4d49-b89d-de87f4db5f79.htm">Backward-Compatible Language Elements</a><img class="vfpxmark" src="../local/vfpXmark.gif"/></span><br />
<span class="linkTerms"><a href="/html/6dcddc3f-9944-4ad8-be2f-003610af616a.htm">Language Reference (Visual FoxPro)</a></span><br />
<br />
<!-- VFPX FPW2.6 Footer end -->
</div>
</div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="@ ... GET - Transparent Buttons Command">
<param name="ALink Name" value="@ ... GET - Transparent Buttons">
</OBJECT>
