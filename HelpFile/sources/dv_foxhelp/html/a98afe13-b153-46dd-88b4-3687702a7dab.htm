<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>Sample Class Libraries</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">Sample Class Libraries</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoNoToggle" onclick="OpenSection(seeAlsoNoToggle)">See Also</a> 
									</td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p>The Visual FoxPro sample class library provides encapsulated functionality that you can easily add to your applications. The <a href="/html/348fec52-e48a-489f-86fb-0b0ac888ba69.htm">Solution Samples</a> illustrate using most of the sample classes. The sample classes are contained in the following files:  </p>
    <ul><li>
        <p>
          <a href="#smpbuttons_class_library">Buttons Class Library</a>
        </p>
      </li><li>
        <p>
          <a href="#smpsamples_class_library">Samples Class Library</a>
        </p>
      </li><li>
        <p>
          <a href="#smputility_class_library">Utility Class Library</a>
        </p>
      </li><li>
        <p>
          <a href="#smpregistry_program">Registry Program</a>
        </p>
      </li></ul>
  <a name="smpbuttons_class_library"></a><h1 class="heading">Buttons Class Library</h1><div id="sectionSection0" class="seeAlsoNoToggleSection">
      <p>Buttons.vcx contains the following classes.</p>
      <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
            <th>
              Class
            </th>
            <th>
              Description
            </th>
          </tr><tr>
          <td>
            <p>CmdOK</p>
          </td>
          <td>
            <p>A command button that releases the form it is added to. If the form is contained in a form set, cmdOK releases the form set.</p>
          </td>
        </tr><tr>
          <td>
            <p>CmdCancel</p>
          </td>
          <td>
            <p>A subclass of cmdOK with the Caption property set to "Cancel."</p>
          </td>
        </tr><tr>
          <td>
            <p>CmdHelp</p>
          </td>
          <td>
            <p>A command button that invokes Help with the HelpContextID of the form to which it is added.</p>
          </td>
        </tr><tr>
          <td>
            <p>MailBtn</p>
          </td>
          <td>
            <p>A container with a command button, a Microsoft MAPI Message control, and a Microsoft MAPI Session control. Code in the Click event of the command button logs on to mail and composes a message containing the values in the current record of a table.</p>
            <p>For an example of using the MailBtn class, see SENDMAIL.SCX in the Visual FoxPro Samples\Solution\OLE folder.</p>
          </td>
        </tr><tr>
          <td>
            <p>VCR</p>
          </td>
          <td>
            <p>A set of table navigation buttons that makes it possible for a user to move the record pointer to the next, prior, top, and bottom records of a table.</p>
            <p>Set the Skiptable property to the alias of the table you want to move the record pointer in. If Skiptable is empty, the record pointer is moved in the currently selected work area.</p>
          </td>
        </tr></table></div>
    </div><a name="smpsamples_class_library"></a><h1 class="heading">Samples Class Library</h1><div id="sectionSection1" class="seeAlsoNoToggleSection">
      <p>Samples.vcx contains the following classes.</p>
      <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
            <th>
              Class
            </th>
            <th>
              Description
            </th>
          </tr><tr>
          <td>
            <p>CboFontName</p>
          </td>
          <td>
            <p>A combo box that displays all the currently available fonts in the system. </p>
          </td>
        </tr><tr>
          <td>
            <p>CboFontSize</p>
          </td>
          <td>
            <p>A combo box that displays all the available point sizes for a particular font. Pass a font name to the FillList method to populate the combo box. The nLargestFont and nSmallestFont properties delimit the maximum and minimum font sizes displayed. You can use this control in conjuction with the cboFontName class. In the InteractiveChange event of the cboFontName object, call the FillList method of the cboFontSize object:</p>
            <p>
              <code>THISFORM.cboFontSize1.FillList(THIS.Value)</code>
            </p>
            <p>For an example of using this class, see the tbrEditing class in the same class library.</p>
          </td>
        </tr><tr>
          <td>
            <p>Clock</p>
          </td>
          <td>
            <p>A container that displays the current date and time.</p>
            <p>The "Display a system clock" component in the Solutions sample also uses the Clock class.</p>
          </td>
        </tr><tr>
          <td>
            <p>Datachecker</p>
          </td>
          <td>
            <p>A custom class that manages resolving data conflicts. Code in the Error event of the VCR class in BUTTONS.vcx calls the CheckConflicts method of this class if an attempt to write buffered data to a table encounters changed values:</p>
            <p>
              <code>nConflictStatus = ; THIS.DataChecker1.CheckConflicts()</code>
            </p>
            <p>The "Run multiple instances of a form" component in the Solutions sample also uses this class to check for data conflicts.</p>
            <p>For more information, open the class and read the comments in the code.</p>
          </td>
        </tr><tr>
          <td>
            <p>Distinct_values_combo</p>
          </td>
          <td>
            <p>A combo box that is populated on initialization with the distinct values in the ControlSource alias. For example, if you add this class to a form and set the ControlSource to "customer.country", the combo box will be populated with the countries in the customer table without displaying the country names more than once.</p>
          </td>
        </tr><tr>
          <td>
            <p>FrmNoTitle</p>
          </td>
          <td>
            <p>A form with properties set so that no title is displayed. If you want to display information in a separate window, you can create an object based on this class and use form graphics methods.</p>
            <p>The "Display line animation on a form" component in the Solutions sample also uses a form with no title to display the animation.</p>
          </td>
        </tr><tr>
          <td>
            <p>Lookup_combo</p>
          </td>
          <td>
            <p>A combo box that makes it easy to display values from one field, for example a company name, while binding a ControlSource to another field, for example a company id number. This class has four custom properties:</p>
            <p>
              <span class="parameter">order_column</span>: Column to sort the table by (optional).</p>
            <p>
              <span class="parameter">lookup_table</span>: Table to fill the combo box from.</p>
            <p>
              <span class="parameter">display_column</span>: Column in the table to display.</p>
            <p>
              <span class="parameter">return_column</span>: Column whose value is written to the ControlSource.</p>
          </td>
        </tr><tr>
          <td>
            <p>MoverLists</p>
          </td>
          <td>
            <p>A container with two list boxes and four command buttons. A user can move selected items from one list to the other list by clicking the command buttons or by dragging and dropping.</p>
            <p>You need to make sure the RowSourceType of each list box is set to 0 and use the AddItem method to add items to the source list box.</p>
            <p>MoverLists has three custom properties:</p>
            <p>
              <span class="parameter">CanDropIcon</span>: Cursor to be displayed over a valid target in a drag and drop operation.</p>
            <p>
              <span class="parameter">NoDropIcon</span>: Cursor to be displayed when dropping will not add the selected items to the list box.</p>
            <p>
              <span class="parameter">DragThreshold</span>: Number of pixels before the drag operation begins.</p>
            <p>The "Move items between list boxes" component in the Solutions sample illustrates the use of this class.</p>
          </td>
        </tr><tr>
          <td>
            <p>Print_reports</p>
          </td>
          <td>
            <p>A modal form that makes it possible for a user to preview a report, print it, or direct it to a file. You can set the cReport property of the class to the name of the report or pass the report name in as a parameter:</p>
            <p>
              <code>o = CREATEOBJECT(print_reports, ; "myreport.frx")</code>
            </p>
          </td>
        </tr><tr>
          <td>
            <p>QBF</p>
          </td>
          <td>
            <p>A container with three command buttons. Add this class and the VCR class to a form with data-bound controls. When the user chooses Enter QBF, the values in the controls are blanked out. Values that the user enters in the controls specify the filter to be set on the table when the user chooses <b>Query</b>.</p>
            <p>The controls need to have a ControlSource set and the Parent of the controls needs to be the form, not another container.</p>
            <p>The "Create a query by example form" component in the Solutions sample illustrates the use of this class.</p>
          </td>
        </tr><tr>
          <td>
            <p>Resizable</p>
          </td>
          <td>
            <p>A custom class that manages resizing and repositioning the controls on a form at run time, maintaining their relative sizes and positions. Add the class to a form and, in the Resize event of the form, call the AdjustControls method:</p>
            <p>
              <code>THIS.Resizable2.AdjustControls</code>
            </p>
            <p>Resizable has two custom properties you need to set:</p>
            <p>
              <span class="parameter">RepositionList</span>: A string containing all the classes for which objects are repositioned.</p>
            <p>
              <span class="parameter">ResizeList</span>: A string containing all the classes for which objects are resized.</p>
            <p>The "Resize and reposition controls at run time" component in the Solutions sample illustrates the use of this class.</p>
          </td>
        </tr><tr>
          <td>
            <p>RTFcontrols</p>
          </td>
          <td>
            <p>A container class containing cboFontName, cboFontSize and command buttons for <b>Bold</b>, <b>Italic</b>, and <b>ForeColor</b>. The cboFontSize control is refreshed in the InteractiveChange event of cboFontName, but no additional functionality is coded with the <b>Bold</b>, <b>Italic</b> and <b>ForeColor</b> command buttons.</p>
            <p>The "Use the RichText control" component in the Solutions sample illustrates the use of this class.</p>
          </td>
        </tr><tr>
          <td>
            <p>SoundPlayer</p>
          </td>
          <td>
            <p>This class can be used to play a non-visual multimedia file such as a .WAV audio file. See the following section, Sample Multimedia Classes, for more information about this class.</p>
          </td>
        </tr><tr>
          <td>
            <p>StopWatch</p>
          </td>
          <td>
            <p>A container class with a timer and labels to display stop watch values.</p>
            <p>StopWatch has three custom methods you'll want to use:</p>
            <p>
              <span class="parameter">Start</span>: Starts the stop watch</p>
            <p>
              <span class="parameter">Stop</span>: Stops the stop watch</p>
            <p>
              <span class="parameter">Reset</span>: Resets the displayed time to 0:00</p>
            <p>The "Display a stop watch" component in the Solutions sample illustrates the use of this class.</p>
          </td>
        </tr><tr>
          <td>
            <p>TbrEditing</p>
          </td>
          <td>
            <p>tbrEditing has a custom property and a method you'll want to use:</p>
            <p>
              <span class="parameter">nAppliesTo Property</span>: This property can be set to 1, 2, or 3.   </p>
            <ol><li>
                <p>User choices affect the current control on the active form.</p>
              </li><li>
                <p>User choices affect all text boxes and edit boxes on the active form.</p>
              </li><li>
                <p>User choices affect all controls on the active form.</p>
              </li></ol>
            <p>
              <span class="parameter">Refresh</span>: Accepts an object reference as a parameter and sets all the editing controls to the appropriate values of the object. Call the Refresh method in the GotFocus event of a control.</p>
            <p>The "Change font attributes" component in the Solutions sample illustrates the use of this class.</p>
          </td>
        </tr><tr>
          <td>
            <p>VideoFrame</p>
          </td>
          <td>
            <p>This class can be used to play a visual multimedia file, such as a video for Windows file. See the following section, Sample Multimedia Classes, for more information about this class.</p>
          </td>
        </tr></table></div>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Sample Multimedia Classes</h3><div class="subSection" xmlns="">
          <p>Two of the classes (SoundPlayer and VideoFrame) in the Visual FoxPro Samples\Classes\Samples.vcx class library make it possible for you to use the MCI (Multimedia Command Interface) to play multimedia files.</p>
          <p>To locate documentation for the MCI commands, search for "Multimedia Commands" in the MSDN Library (<b>http://msdn.microsoft.com/library</b>).</p>
        <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <h4 class="subHeading" xmlns="">Sound Player Class</h4><div class="subSection" xmlns="">
              <p>This class can be used to play a non-visual multimedia file, such as a .WAV audio file. It makes it possible for you to specify the file to be played, and then provides built-in methods to easily play the media file.</p>
              <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
                    <th>
                      Property
                    </th>
                    <th>
                      Description
                    </th>
                  </tr><tr>
                  <td>
                    <p>AutoOpen</p>
                  </td>
                  <td>
                    <p>Specifies whether the sound file should be automatically opened and displayed when the object is instantiated. The default value is True (.T.).</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>AutoPlay</p>
                  </td>
                  <td>
                    <p>Specifies whether the sound file should be automatically played when it is opened. The default value is True (.T.).</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>AutoRepeat</p>
                  </td>
                  <td>
                    <p>Specifies whether the sound file plays continuously. The default value is False (.F.).</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>ControlSource</p>
                  </td>
                  <td>
                    <p>Specifies the column that contains the sound file reference. If empty, the class expects a static file name to be in the SoundFile property.</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>MCIAlias</p>
                  </td>
                  <td>
                    <p>Specifies the alias to be used by MCI. If left empty, the alias defaults to the Name property of the class. Normally this can be left empty, but if the user wants to play the same sound file twice at the same time, a different alias would need to be specified for each.</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>SoundFile</p>
                  </td>
                  <td>
                    <p>Holds the name of a sound file to play, for example "<code>C:\WINDOWS\CHIMES.WAV</code>".</p>
                  </td>
                </tr></table></div>
              <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
                    <th>
                      Method
                    </th>
                    <th>
                      Description
                    </th>
                  </tr><tr>
                  <td>
                    <p>OpenSound</p>
                  </td>
                  <td>
                    <p>Opens the sound file.</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>PlaySound</p>
                  </td>
                  <td>
                    <p>Plays the sound file. The file must be opened with the OpenSound method before it can be played.</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>PauseSound</p>
                  </td>
                  <td>
                    <p>Pauses the playing of a sound file. Play can be continued by calling the PlaySound method.</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>SetPosition</p>
                  </td>
                  <td>
                    <p>Makes it possible for the user to specify the position of the media file. It can be executed at any time after the file has been opened. Valid values are "Start," "End," or a specific millisecond into the sound.</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>CloseSound</p>
                  </td>
                  <td>
                    <p>Closes the sound file and releases all resources associated with it.</p>
                  </td>
                </tr></table></div>
            </div>
          <h4 class="subHeading" xmlns="">VideoFrame Class</h4><div class="subSection" xmlns="">
              <p>The VideoFrame class can be used to play a visual multimedia file such as a video for Windows file. This class makes it possible for you to position and size the video to be played, and then provides built-in methods to easily play the media file.</p>
              <p>For an example of using this class, see Video.scx in the Visual FoxPro Samples\Solution\Forms folder.</p>
              <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
                    <th>
                      Property
                    </th>
                    <th>
                      Description
                    </th>
                  </tr><tr>
                  <td>
                    <p>AutoOpen</p>
                  </td>
                  <td>
                    <p>Specifies whether the video file should automatically be opened and displayed when the object is instantiated. The default value is True (.T.).</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>AutoPlay</p>
                  </td>
                  <td>
                    <p>Specifies whether the video file should automatically play when it is opened. The default value is True (.T.).</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>AutoRepeat</p>
                  </td>
                  <td>
                    <p>Specifies whether the video file will loop the video. Setting this to .T. will cause the video to play continuously. The default value is False (.F.).</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>ControlSource</p>
                  </td>
                  <td>
                    <p>Specifies a Field that contains the video file reference. If empty, the class expects a static file name to be in the VideoFile property.</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>MCIalias</p>
                  </td>
                  <td>
                    <p>Specifies the alias to be used by MCI. If left empty, the alias defaults to the Name property of the class. Normally this can be left empty, but if the user wants to play the same video file twice at the same time, a different alias would need to be specified for each.</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>VideoFile</p>
                  </td>
                  <td>
                    <p>Holds the name of a video file to play, for example: "<code>C:\VFP\SAMPLES\SOLUTION\FORMS\FOX.AVI</code>".</p>
                  </td>
                </tr></table></div>
              <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
                    <th>
                      Method
                    </th>
                    <th>
                      Description
                    </th>
                  </tr><tr>
                  <td>
                    <p>CloseVideo</p>
                  </td>
                  <td>
                    <p>Closes the video file and releases all resources associated with it.</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>DoMCI</p>
                  </td>
                  <td>
                    <p>Called by the other methods to execute MCI commands. It can also be called by a user to execute a specific MCI command.</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>OpenVideo</p>
                  </td>
                  <td>
                    <p>Opens the video file and shows the first frame.</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>PauseVideo</p>
                  </td>
                  <td>
                    <p>Pauses a playing video. The video can be restarted by using the PlayVideo method.</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>PlayVideo</p>
                  </td>
                  <td>
                    <p>Plays the video file. The video file must be opened in the OpenVideo method before it can be played.</p>
                  </td>
                </tr><tr>
                  <td>
                    <p>SetPosition</p>
                  </td>
                  <td>
                    <p>Makes it possible for the user to specify the position of the media file. It can be executed at any time after the video file has been opened. Valid values are "Start", "End", or a specific millisecond into the video.</p>
                  </td>
                </tr></table></div>
            </div>
        </sections></div>
    </sections></div><a name="smputility_class_library"></a><h1 class="heading">Utility Class Library</h1><div id="sectionSection2" class="seeAlsoNoToggleSection">
      <p>Utility.vcx contains the following classes.</p>
      <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
            <th>
              Class
            </th>
            <th>
              Description
            </th>
          </tr><tr>
          <td>
            <p>Arraylib</p>
          </td>
          <td>
            <p>A custom class with methods for inserting array elements, deleting array elements, and scanning array columns.</p>
          </td>
        </tr><tr>
          <td>
            <p>Execsp</p>
          </td>
          <td>
            <p>A custom class with methods that facilitate SQL pass through and executing stored procedures on a remote database.</p>
          </td>
        </tr><tr>
          <td>
            <p>Filelib</p>
          </td>
          <td>
            <p>A custom class with methods that perform common string tasks used when manipulating file names, for example, removing the extension, adding a backslash to a path, and so on.</p>
          </td>
        </tr><tr>
          <td>
            <p>Menulib</p>
          </td>
          <td>
            <p>A container class with methods that create a shortcut menu from an array.</p>
            <p>The "Create dynamic shortcut menus" component in the Solutions sample illustrates the use of this class.</p>
          </td>
        </tr></table></div>
    </div><a name="smpregistry_program"></a><h1 class="heading">Registry Program</h1><div id="sectionSection3" class="seeAlsoNoToggleSection">
      <p>Registry.prg contains the following classes.</p>
      <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
            <th>
              Class
            </th>
            <th>
              Description
            </th>
          </tr><tr>
          <td>
            <p>FileReg</p>
          </td>
          <td>
            <p>A subclass of the Registry class that provides methods for reading the application associated with particular file extensions and the path to the application.</p>
          </td>
        </tr><tr>
          <td>
            <p>FoxReg</p>
          </td>
          <td>
            <p>A subclass of the Registry class that provides methods for reading and writing Visual FoxPro settings in the Windows Registry.</p>
          </td>
        </tr><tr>
          <td>
            <p>ODBCReg</p>
          </td>
          <td>
            <p>A subclass of the Registry class that provides methods for reading ODBC data source and driver information.</p>
          </td>
        </tr><tr>
          <td>
            <p>OldINIReg</p>
          </td>
          <td>
            <p>A subclass of the Registry class that provides methods for reading and writing to an .INI file.</p>
          </td>
        </tr><tr>
          <td>
            <p>Registry</p>
          </td>
          <td>
            <p>A custom class that provides methods for accessing Windows API functions for manipulating the Windows Registry.</p>
          </td>
        </tr></table></div>
      <p>For examples of using the registry classes, run SOLUTION.app in the ..\Samples\Solution folder.</p>
    </div><h1 class="heading"><span id="seeAlsoNoToggle">See Also</span></h1><div id="seeAlsoSection" class="seeAlsoNoToggleSection"><h4 class="subHeading">Tasks</h4><span class="linkTerms"><a href="/html/348fec52-e48a-489f-86fb-0b0ac888ba69.htm">Solution Samples</a></span><br /><h4 class="subHeading">Other Resources</h4><span class="linkTerms"><a href="/html/4e1445ac-5e6a-45ad-bd95-c53a9deb4353.htm">Samples and Walkthroughs</a></span><br /><span class="linkTerms"><a href="/html/3abe5487-930b-4981-a8e8-1c09f9d7ec32.htm">Foundation Class Samples</a></span><br /><span class="linkTerms"><a href="/html/7c390e15-7f39-4c76-9949-97fc3d4a5670.htm">Server Samples (Visual FoxPro)</a></span><br /><br /></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="Sample Class Libraries">
</OBJECT>
