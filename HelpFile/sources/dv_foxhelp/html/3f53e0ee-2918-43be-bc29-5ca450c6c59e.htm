<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>@ ... GET - List Boxes Command</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="collapseImage" style="display:none; height:0; width:0;" alt="Collapse image" src="../local/collapse_all.gif">
      
      
    </img>
    <img id="expandImage" style="display:none; height:0; width:0;" alt="Expand image" src="../local/expand_all.gif">
      
      
    </img>
    <img id="collapseAllImage" style="display:none; height:0; width:0;" alt="CollapseAll image" src="../local/collall.gif">
      
      
    </img>
    <img id="expandAllImage" style="display:none; height:0; width:0;" alt="ExpandAll image" src="../local/expall.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">@ ... GET - List Boxes Command</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> 
									</td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" alt="CollapseAll image" src="../local/collall.gif">
                
                
              </img>
              <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">
                Collapse All
              </label>
              <label id="expandAllLabel" for="toggleAllImage" style="display: none;">
                Expand All
              </label> </span>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p> </p>
  <div id="sectionSection0" class="seeAlsoNoToggleSection">
      <p>Included for backward compatibility. Use the <a href="/html/821b8b23-3955-4d32-b53c-dcf5a5ef339c.htm">ListBox Control</a> instead.</p>
    </div>
<!-- VFPX FPW2.6 begin -->
	<p class="vfpx">This command is undocumented in the original VFP9 help file, <br />but the following documentation was found in the FoxPro for Windows 2.6 help, and may still be valid:<br /></p>
	<p />
	<p>Creates a list.</p>
	<div id="syntaxSection" class="section">
		<div id="syntaxCodeBlocks" class="code">
			<span codeLanguage="other">
				<table width="100%" cellspacing="0" cellpadding="0">
				<tr>
					<th align="left"></th>
				</tr>
				<tr>
					<td>
					<pre>@ <span class="parameter">row, column</span> 
GET <span class="parameter">memvar</span> | <span class="parameter">field</span> 
FROM <span class="parameter">array</span> [RANGE <span class="parameter">expN1</span>
	[, <span class="parameter">expN2</span>]] 
| POPUP <span class="parameter">pop-up name</span>
	[FUNCTION <span class="parameter">expC1</span>] 
	| [PICTURE <span class="parameter">expC2</span>]
	[FONT <span class="parameter">expC3</span> [, <span class="parameter">expN3</span>]]
	[STYLE <span class="parameter">expC4</span>]
	[DEFAULT <span class="parameter">expr</span>]
	[SIZE <span class="parameter">expN4</span>, <span class="parameter">expN5</span>]
	[ENABLE | DISABLE]
	[MESSAGE <span class="parameter">expC5</span>]
	[VALID <span class="parameter">expL1</span> | <span class="parameter">expN6</span>]
	[WHEN <span class="parameter">expL2</span>]
	[COLOR SCHEME <span class="parameter">expN7</span> 
	| COLOR <span class="parameter">color pair list</span>]</pre>
					</td>
				<tr>
				</table>
			</span>
		</div>
	</div>
	<p />
	<h4 class="subHeading">Parameters</h4>
<span class="nonLinkTerms"><span class="parameter">row, column</span></span><br />
&nbsp;Row and column are numeric expressions with values of 0 or greater that determine where the list appears. <br />
<br />
&nbsp;The first row is number 0 in the main FoxPro window or a user-defined window. Rows are numbered from top to bottom. In FoxPro for Windows, row 0 is the row immediately under the FoxPro system menu bar. In FoxPro for Macintosh, row 0 is the row immediately under the FoxPro title bar. In FoxPro for MS-DOS, row 0 is the row the FoxPro system menu bar occupies. See SET SYSMENU for information about manipulating the system menu bar so you can place output on row 0 in FoxPro for MS-DOS. <br />
<br />
&nbsp;The first column is number 0 in the main FoxPro window or a user-defined window. Columns are numbered from left to right. <br />
<br />
&nbsp;When the list is directed to a user-defined window, the row and column coordinates are relative to the user-defined window, not the main FoxPro window. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, a position in the main FoxPro window or in a user-defined window is determined by the font of the main FoxPro window or the user-defined window. Most fonts can be displayed in a wide variety of sizes, and some are proportionally spaced. A row corresponds to the height of the current font; a column corresponds to the average width of a letter in the current font. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, you can position the list in a window with decimal fractions for row and column coordinates. In FoxPro for MS-DOS, decimal fractions used for row and column coordinates are rounded to the nearest integer value.<br />
<br />
<span class="nonLinkTerms"><span class="parameter">memvar</span></span> | <span class="parameter">field</span>  <br />
&nbsp;When you choose an item from a list, a value corresponding to your choice is stored to the memory variable or array element <span class="parameter">memvar</span>, or the field <span class="parameter">field</span>. <span class="parameter">memvar</span> or <span class="parameter">field</span> must be of numeric or character type. If <span class="parameter">memvar</span> or <span class="parameter">field</span> is numeric, the chosen item's position in the list is stored. If <span class="parameter">memvar</span> or <span class="parameter">field</span> is character, the chosen item's prompt is stored. <br />
<br />
Initial Option Selection<br />
&nbsp;When a list appears, the value of <span class="parameter">memvar</span> or <span class="parameter">field</span> determines which list option (if any) is initially selected. For example, if the value of <span class="parameter">memvar</span> or <span class="parameter">field</span> is 4, the fourth option in the list is selected when the list is activated by READ. If <span class="parameter">memvar</span> or <span class="parameter">field</span> doesn't correspond to any of the options in the list (the value is less than 1 or greater than the number of options), no option is initially selected. <br />
<br />
FROM <span class="parameter">array</span>  <br />
&nbsp;The FROM <span class="parameter">array</span> clause creates a list from an array. If the array is one-dimensional, the contents of the first array element are the first item in the list, the contents of the second array element are the second item and so on. <br />
<br />
&nbsp;If the array is two-dimensional, the elements in the first column of the array are used to create the list items. The first element in the first column is the first item in the list, the second element in the first column is the second item, and so on.<br />
<br />
RANGE <span class="parameter">expN1</span> [, <span class="parameter">expN2</span>]<br />
&nbsp;List items by default starting with the contents of the first array element. You can designate a different starting element in the array by including RANGE <span class="parameter">expN1</span>. For example, if the array is one-dimensional and <span class="parameter">expN1</span> is 3, the third element in the array is the first item in the list, the fourth element is the second item, and so on. <br />
<br />
&nbsp;An element's position number in a two-dimensional array is determined by counting along rows. For example, suppose you create the following 3-by-3 array:<br />
<br />
&nbsp;a b c<br />
<br />
&nbsp;d e f<br />
<br />
&nbsp;g h i<br />
<br />
&nbsp;Elements a, b, and c are in position numbers 1, 2, and 3. Elements d, e, and f are in position numbers 4, 5, and 6, and so on. If a two-dimensional array is used, only elements in the same column as array element <span class="parameter">expN1</span> become items in the list. For example, if <span class="parameter">expN1</span> is 2, the contents of elements b, e, and h are the list items. If <span class="parameter">expN1</span> is 5, only the contents of elements e and h are included. <br />
<br />
&nbsp;If you include a starting element <span class="parameter">expN1</span>, you can also specify the number of elements in the list by including <span class="parameter">expN2</span>. If <span class="parameter">expN2</span> isn't included, the contents of all array elements from the starting element <span class="parameter">expN1</span> through the last element in the column are items in the list.<br />
<br />
&nbsp;If SHOW GETS is issued, the RANGE clause is reevaluated. If the value of <span class="parameter">expN1</span> or <span class="parameter">expN2</span> has changed, the list is updated to reflect the changes. <br />
<br />
&nbsp;The contents of a list can be dynamically changed. You can insert and remove items by modifying the array. The ACOPY(), ADEL(), ADIR(), AELEMENT(), AFIELDS(), AINS(), ALEN(), ASCAN(), ASORT() and ASUBSCRIPT() functions facilitate the manipulation of arrays. <br />
<br />
POPUP <span class="parameter">pop-up name</span><br />
&nbsp;The list can also be built from a popup created with DEFINE POPUP. Each popup item is used to create an item in the list. <br />
<br />
&nbsp;To create a list from a popup, first create the popup with DEFINE POPUP. Include in the POPUP <span class="parameter">popup name</span> clause the name of the popup created with DEFINE POPUP.<br />
<br />
&nbsp;You can create a popup (and thus, a list) containing records from a field in a table (PROMPT FIELDS), files available on disk (PROMPT FILES) or the names of the fields in a table (PROMPT STRUCTURE).<br />
<br />
&nbsp;The following example demonstrates how to create a list from a popup. DEFINE POPUP is used to create a popup containing the names of table files available on disk. The table names appear as options in the list. MARGIN is included to provide an additional space for the mark character. The SCROLL option places a scroll bar to the right of the list.<br />
<br />
&nbsp;CLEAR<br />
&nbsp;SET TALK OFF<br />
&nbsp;STORE 1 TO mchoice<br />
<br />
&nbsp;DEFINE POPUP scrollopts FROM 0, 0 PROMPT FILES LIKE *.DBF ;<br />
&nbsp;&nbsp;MARGIN SCROLL<br />
<br />
&nbsp;@ 2,2 GET mchoice POPUP scrollopts SIZE 8, 20<br />
<br />
&nbsp;READ&nbsp;&& Activate the list.<br />
<br />
FUNCTION <span class="parameter">expC1</span> | PICTURE <span class="parameter">expC2</span><br />
&nbsp;To terminate the READ when an item is chosen from the list, include FUNCTION '&T' or PICTURE '@&T'. Include FUNCTION '&N' or PICTURE '@&N' to prevent the READ from terminating when an item is chosen from the list. For example:<br />
<br />
&nbsp;... FUNCTION '&T' ... <br />
&nbsp;... PICTURE '@&T' ... <br />
<br />
&nbsp;If a FUNCTION or PICTURE clause isn't included, the READ isn't terminated when an item is chosen.<br />
<br />
&nbsp;In FoxPro for Macintosh, you can create a two- or three-dimensional list by including 2 or 3 after the & specification code. Include 2 to create a flat, two-dimensional list identical to lists in Macintosh dialogs. Include 3 to create a three-dimensional list identical to lists in FoxPro for Macintosh dialogs. A two-dimensional list is created by default if you omit the 2 and 3 specification codes.<br />
<br />
&nbsp;In FoxPro for Macintosh, the following clause creates a three-dimensional list and doesn't cause the READ to terminate when an item is chosen from the list.<br />
<br />
&nbsp;... FUNCTION '&N3' ... <br />
<br />
FONT <span class="parameter">expC3</span> [, <span class="parameter">expN3</span>]<br />
&nbsp;The character expression <span class="parameter">expC3</span> is the name of the font, and the numeric expression <span class="parameter">expN3</span> is the font size. For example, the following clause can be used to display the items in the list in 16-point Courier font:<br />
<br />
&nbsp;FONT 'Courier', 16 <br />
<br />
&nbsp;If you include the FONT clause but omit the font size <span class="parameter">expN3</span>, a 10-point font is used.<br />
<br />
&nbsp;In FoxPro for Windows, if the font you specify is not available, a font with similar font characteristics is substituted.<br />
<br />
&nbsp;In FoxPro for Macintosh, if the font you specify is not available, the Chicago font is used.<br />
<br />
&nbsp;In FoxPro for MS-DOS, the FONT clause is ignored.<br />
<br />
&nbsp;If the FONT clause is omitted and the list is placed in the main FoxPro window, the main FoxPro window font is used. If the FONT clause is omitted and the list is placed in a user-defined window, the user-defined window font is used. <br />
<br />
STYLE <span class="parameter">expC4</span><br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, include the STYLE clause to specify a font style for the items in the list. <br />
<br />
&nbsp;The font style is specified with <span class="parameter">expC4</span>. If the STYLE clause is omitted, the normal font style is used.<br />
<br />
&nbsp;In FoxPro for Windows, if the font style you specify is not available, a font style with similar characteristics is substituted.<br />
<br />
&nbsp;In FoxPro for Macintosh, if the font you specify is not available, the normal font style is used.<br />
<br />
&nbsp;The STYLE clause is ignored in FoxPro for MS-DOS.<br />
<br />
&nbsp;Character&nbsp;Font Style<br />
&nbsp;---------&nbsp;----------<br />
&nbsp;<br />
&nbsp;&nbsp;B&nbsp;&nbsp;Bold<br />
<br />
&nbsp;&nbsp;C&nbsp;&nbsp;Condense*<br />
<br />
&nbsp;&nbsp;E&nbsp;&nbsp;Extend*<br />
<br />
&nbsp;&nbsp;I&nbsp;&nbsp;Italic<br />
<br />
&nbsp;&nbsp;N&nbsp;&nbsp;Normal<br />
<br />
&nbsp;&nbsp;O&nbsp;&nbsp;Outline<br />
<br />
&nbsp;&nbsp;Q&nbsp;&nbsp;Opaque<br />
<br />
&nbsp;&nbsp;S&nbsp;&nbsp;Shadow<br />
<br />
&nbsp;&nbsp;-&nbsp;&nbsp;Strikeout*<br />
<br />
&nbsp;&nbsp;T&nbsp;&nbsp;Transparent<br />
<br />
&nbsp;&nbsp;U&nbsp;&nbsp;Underline<br />
<br />
&nbsp;* The Condense and Extend styles are only available in FoxPro for Macintosh. The Strikeout style is only available in FoxPro for Windows.<br />
<br />
&nbsp;You can include more than one character to specify a combination of font styles. For example, the following clause specifies Bold Italic: <br />
<br />
&nbsp;STYLE 'BI'<br />
<br />
DEFAULT <span class="parameter">expr</span><br />
&nbsp;When you choose an item from the list, your choice is saved in a memory variable, array element or field you specified. If you specify a memory variable that doesn't exist, it is automatically created and initialized if you include the DEFAULT clause. However, an array element isn't created if you specify an array element in a DEFAULT clause. The DEFAULT clause is ignored if the memory variable already exists or you specify a field.<br />
<br />
&nbsp;-------------------------------<br />
&nbsp;Note - If the DEFAULT clause is omitted and the memory variable <span class="parameter">memvar</span> doesn't exist, the error message "Variable not found" appears. <br />
&nbsp;-------------------------------<br />
&nbsp;<br />
&nbsp;The DEFAULT expression <span class="parameter">expr</span> determines the type of memory variable created and its initial value. <span class="parameter">expr</span> must be of numeric or character type. <br />
<br />
SIZE <span class="parameter">expN4</span>, <span class="parameter">expN5</span> <br />
&nbsp;The width of the list is, by default, determined by the width of the longest item text in the list. The number of items in the pop-up or array by default determines the number of items displayed in the list. You can optionally specify the length and width of the list by including SIZE. The length of the list in rows is specified by <span class="parameter">expN4</span>, and the width of the list in columns is specified by <span class="parameter">expN5</span>. <br />
<br />
&nbsp;If there are more items than can be displayed in the list at one time, a scroll bar is automatically placed to the right of the list items. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, the list's font determines the size of the editing region. The list's font is specified with the FONT clause. If the FONT clause is omitted, the list uses the font of its parent window (the main FoxPro window or a user-defined window). <br />
<br />
ENABLE | DISABLE<br />
&nbsp;Lists are by default enabled when READ is issued. You can prevent a list from being activated when READ is issued by including DISABLE. A disabled list cannot be selected and appears in disabled colors. Use SHOW GET ENABLE to enable a disabled list.<br />
<br />
MESSAGE <span class="parameter">expC5</span><br />
&nbsp;The MESSAGE clause character expression <span class="parameter">expC5</span> appears when a list is selected. In FoxPro for MS-DOS, the message is centered on the last line of the main FoxPro window and the message location can be changed with SET MESSAGE. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, the message is placed in the graphics-based status bar. If the graphics-based status bar has been turned off with SET STATUS BAR OFF, the message is placed on the last line of the main FoxPro window.<br />
<br />
VALID <span class="parameter">expL1</span> | <span class="parameter">expN6</span><br />
&nbsp;You can include an optional VALID expression <span class="parameter">expL1</span> or <span class="parameter">expN6</span> that is evaluated when an option is chosen from the list. That is, VALID isn't evaluated when you select an item, but when you actually choose an item by selecting it and pressing Enter or double-clicking on the item.<br />
<br />
&nbsp;Typically, <span class="parameter">expL1</span> or <span class="parameter">expN6</span> is a user-defined function (UDF). With a user-defined function you can select, enable or disable other @ ... GET input fields or objects, open a Browse window, open another data-entry screen or move to a new record. CLEAR READ can be included in the user-defined function to terminate the READ.<br />
<br />
<span class="nonLinkTerms"><span class="parameter">expL1</span></span><br />
&nbsp;When a logical value is returned to the VALID clause, the logical value is ignored and the list remains the current control. However, you can specify a UDF that returns a logical value to the VALID clause and then activates another object.<br />
<br />
<span class="nonLinkTerms"><span class="parameter">expN6</span></span><br />
&nbsp;A VALID clause that includes a numeric expression is used to specify which object is activated after an item in the list is chosen. Objects are @ ... GET input fields, check boxes, lists, popups, spinners, text-editing regions and each individual button in a set of push, radio and invisible buttons. <br />
<br />
&nbsp;The numeric expression <span class="parameter">expN6</span> has one of these effects:<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN6</span> = 0, the list remains the active control.<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN6</span> is positive, <span class="parameter">expN6</span> indicates the number of objects to advance. For example, when the list is selected and VALID returns 1, the next object is activated. If <span class="parameter">expN6</span> is greater than the number of objects remaining, the READ is terminated (unless READ CYCLE is issued to activate the objects).<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN6</span> is negative, <span class="parameter">expN6</span> specifies the number of objects to move back. For example, when you're positioned on a list and VALID returns -1, the previous object is activated. If <span class="parameter">expN6</span> moves back past the first object, the READ is terminated (unless READ CYCLE is issued to activate the objects).<br />
<br />
WHEN <span class="parameter">expL2</span><br />
&nbsp;The WHEN clause allows or prohibits selection of a list based on the logical value of <span class="parameter">expL2</span>, which must evaluate to a logical true (.T.) before any of the list can be selected. If <span class="parameter">expL2</span> evaluates to a logical false (.F.), the list cannot be selected and is skipped over if placed between other objects.<br />
<br />
COLOR SCHEME <span class="parameter">expN7</span> | COLOR <span class="parameter">color pair list</span><br />
&nbsp;If you do not include a COLOR clause, the list's colors are determined by the color scheme for the main FoxPro window; if a list is placed in a user-defined window, the window's color scheme determines the list's colors. <br />
<br />
&nbsp;The colors of a list can be specified by including the number of an existing color scheme in the COLOR SCHEME clause or a set of color pairs in the COLOR clause. <br />
<br />
&nbsp;A color scheme is a set of 10 predefined color pairs. The color pairs in a color scheme can be changed with SET COLOR OF SCHEME. In FoxPro for MS-DOS the color pairs in a color scheme can also be changed in the Color Picker.<br />
<br />
&nbsp;A color pair is a set of two letters separated by a forward slash. The first letter specifies the foreground color and the second letter specifies the background color.<br />
<br />
&nbsp;For example, this color pair specifies a red foreground on a white background:<br />
<br />
&nbsp;R/W<br />
<br />
&nbsp;For a list of colors and their corresponding color letters, see SET COLOR Overview or Color Table by Color Pair.<br />
<br />
&nbsp;A color pair can also be specified with a set of six RGB (Red Green Blue) color values separated by commas. The first three color values specify the foreground color and the second three color values specify the background color. The color values can range from 0 through 255. <br />
<br />
&nbsp;The R/W color pair in the example above can also be specified with this RGB color pair:<br />
<br />
&nbsp;RGB(255,0,0,255,255,255)<br />
<br />
&nbsp;Color Pair&nbsp;&nbsp;  List <br />
&nbsp;  Number&nbsp;&nbsp;Attribute<br />
&nbsp;----------&nbsp;&nbsp;---------<br />
<br />
&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;Disabled option<br />
<br />
&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;Enabled option<br />
<br />
&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;Border and scroll bar*<br />
<br />
&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;Message<br />
<br />
&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;Selected list item <br />
<br />
&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;Enabled list <br />
<br />
&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;Disabled list<br />
<br />
&nbsp;* Controls drawn in background color.<br />
&nbsp;Bar drawn in dim of foreground color.<br />
<br />
&nbsp;This example uses the array created in the previous example to override the color scheme of the main FoxPro window with another predefined color scheme:<br />
<br />
&nbsp;ACTIVATE SCREEN<br />
&nbsp;CLEAR<br />
&nbsp;SET TALK OFF<br />
&nbsp;STORE 1 TO mchoice<br />
<br />
&nbsp;DEFINE POPUP scrollopts FROM 0,0 PROMPT FILES LIKE *.DBF ;<br />
&nbsp;&nbsp;MARGIN SCROLL COLOR SCHEME 4<br />
<br />
&nbsp;@ 2,2 GET mchoice POPUP scrollopts SIZE 8, 20<br />
&nbsp;READ&nbsp;&& Activate the list<br />
<br />
&nbsp;The following example, which uses the array created in an example above, defines a list with the following color characteristics:<br />
<br />
&nbsp;&nbsp;A selected list item is shown in bright white on a blue background (W+/B). <br />
<br />
&nbsp;&nbsp;An enabled list is shown with yellow options on a blue background (GR+/B).<br />
<br />
&nbsp;&nbsp;A disabled list is shown with white options on a blue background (W/B).<br />
<br />
&nbsp;When you skip a color pair, you must include a comma where the color pair would have been. <br />
<br />
&nbsp;Here are the commands:<br />
<br />
&nbsp;CLEAR<br />
&nbsp;SET TALK OFF<br />
&nbsp;STORE 1 TO mchoice<br />
<br />
&nbsp;DEFINE POPUP scrollopts FROM 0,0 PROMPT FILES LIKE *.DBF ;<br />
&nbsp;&nbsp;MARGIN SCROLL COLOR ,GR+/B,,,,W+/B,,,,W/B<br />
<br />
&nbsp;@ 2,2 GET mchoice POPUP scrollopts SIZE 8, 20<br />
&nbsp;READ&nbsp;&& Activate the list<br />
<br />
	<h1 class="heading">
	<span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle)" tabindex="0"><img id="remarksToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Remarks</span></h1>
	<div id="remarksSection" class="section" name="collapseableSection" style="display: none;">
<p><br />
This variation of @ ... GET creates a list. A list is a set of items from which you can choose one item. To choose an item from a list, select the item and press Enter or double-click on the item.<br />
<br />
If you use the Screen Builder to create your data-entry screens, you might not have to use this command at all. The Screen Builder automatically generates the commands that create lists. <br />
<br />
The list appears inside a box, often with a scroll bar to the right. The scroll bar lets you move quickly through the items with the mouse and provides a visual indication of your position in the list. Another quick way to move around in the list is to press the Home key to go to the first item, or the End key to go to the last item. This method works even if the list does not have a scroll bar.<br />
<br />
The items in the list are obtained from an array or a popup. Include FROM <span class="parameter">array</span> to build the from an array. Include POPUP <span class="parameter">pop-up name</span> to build the list from a popup created with DEFINE POPUP.<br />
<br />
Issue READ or READ CYCLE to activate the list.<br />
<br />
</p>
</div>
	<h1 class="heading">
	<span onclick="ExpandCollapse(codeExampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(codeExampleToggle)" tabindex="0"><img id="codeExampleToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Example</span></h1>
	<div id="codeExampleSection" class="section" name="collapseableSection" style="display: none;">
<p><div class="code">
	<span codeLanguage="other">
	<table width="100%" cellspacing="0" cellpadding="0">
		<tr>
		<th> </th>
		<span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0">
		<img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span>
		</th>
		</tr>
		<tr>
			<td colspan="2">
				<pre>SET TALK OFF
DEFINE WINDOW example FROM 4,3 TO 21,76 TITLE ' List Example ' ;
	FLOAT SHADOW SYSTEM COLOR SCHEME 8
*** Fill the array cityarray with city data ***
SELECT DISTINCT city FROM customer INTO ARRAY cityarray
SELECT customer
*** Define a pop-up that contains the structure of customer ***
DEFINE POPUP popstru PROMPT STRUCTURE SCROLL MARGIN MARK CHR(16)
*** Define a pop-up containing data from the company field ***
DEFINE POPUP popfield PROMPT FIELD company SCROLL MARGIN MARK CHR(16)
ACTIVATE WINDOW example
@ 1,3 SAY 'Structure Popup:'
*** Get information using predefined popstru pop-up ***
@ 2,2 GET liststructure POPUP popstru SIZE 11, 20;
	DEFAULT FIELD(1,'customer') WHEN refresh();
	VALID dispitem(liststructure) COLOR SCHEME 9
@ 13,3 SAY liststructure SIZE 1, 18
@ 1,26 SAY 'Field Popup:'
*** Get information using predefined popfield pop-up ***
@ 2,25 GET listfield POPUP popfield SIZE 11, 20 ;
	DEFAULT company WHEN refresh() VALID dispitem(listfield);
	COLOR SCHEME 9
@ 13,26 SAY listfield SIZE 1, 18
@ 1,50 SAY 'Array of City Names:'
*** Get information using predefined array ***
@ 2,49 GET arrayitem FROM cityarray SIZE 11, 20 ;
	DEFAULT cityarray(1) WHEN refresh() VALID dispitem(arrayitem);
	COLOR SCHEME 9
@ 13,50 SAY arrayitem SIZE 1,18
@ 14.5,63 GET ok FUNCTION '*t \!OK' DEFAULT 1 SIZE 1, 6
READ CYCLE SHOW popshow()  && Activate gets
RELEASE WINDOW example
RELEASE POPUPS popstru, popfield
FUNCTION refresh
*** Refresh window information without calling subroutine ***
SHOW GETS OFF
FUNCTION dispitem
*** Display which item has been chosen ***
PARAMETER item
WAIT WINDOW 'You have chosen: ' + ALLTRIM(item) NOWAIT
	FUNCTION popshow
*** Display current items for each list ***
@ 13,3 SAY liststructure	SIZE 1, 18
@ 13,26 SAY listfield		SIZE 1, 18
@ 13,50 SAY arrayitem		SIZE 1, 18
</pre>			</td>		</tr>
	</table>
	</span>
</div>
</p>
</div>
<!-- VFPX FPW2.6 end -->
<h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle)" tabindex="0"><img id="seeAlsoToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>See Also</span></h1>
<div id="seeAlsoSection" class="section" name="collapseableSection" style="display: none;">
<!-- VFPX FPW2.6 Footer begin -->
<h4 class="subHeading">Other Resources</h4>
<span class="linkTerms"><a href="/html/672125e7-29a8-4d49-b89d-de87f4db5f79.htm">Backward-Compatible Language Elements</a><img class="vfpxmark" src="../local/vfpXmark.gif"/></span><br />
<span class="linkTerms"><a href="/html/6dcddc3f-9944-4ad8-be2f-003610af616a.htm">Language Reference (Visual FoxPro)</a></span><br />
<br />
<!-- VFPX FPW2.6 Footer end -->
</div>
</div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="@ ... GET - List Boxes Command">
<param name="ALink Name" value="@ ... GET - List Boxes">
</OBJECT>
