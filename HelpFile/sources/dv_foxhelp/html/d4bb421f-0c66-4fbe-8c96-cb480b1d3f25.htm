<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>@ ... GET - Combo Boxes Command</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="collapseImage" style="display:none; height:0; width:0;" alt="Collapse image" src="../local/collapse_all.gif">
      
      
    </img>
    <img id="expandImage" style="display:none; height:0; width:0;" alt="Expand image" src="../local/expand_all.gif">
      
      
    </img>
    <img id="collapseAllImage" style="display:none; height:0; width:0;" alt="CollapseAll image" src="../local/collall.gif">
      
      
    </img>
    <img id="expandAllImage" style="display:none; height:0; width:0;" alt="ExpandAll image" src="../local/expall.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">@ ... GET - Combo Boxes Command</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> 
									</td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" alt="CollapseAll image" src="../local/collall.gif">
                
                
              </img>
              <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">
                Collapse All
              </label>
              <label id="expandAllLabel" for="toggleAllImage" style="display: none;">
                Expand All
              </label> </span>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p> </p>
  <div id="sectionSection0" class="seeAlsoNoToggleSection">
      <p>Included for backward compatibility. Use the <a href="/html/10b56cf0-55bf-4242-88f2-481e6a013d16.htm">ComboBox Control</a> instead.</p>
    </div>
<!-- VFPX FPW2.6 begin -->
	<p class="vfpx">This command is undocumented in the original VFP9 help file, <br />but the following documentation was found in the FoxPro for Windows 2.6 help, and may still be valid:<br /></p>
	<p />
	<p>Creates a popup.</p>
	<div id="syntaxSection" class="section">
		<div id="syntaxCodeBlocks" class="code">
			<span codeLanguage="other">
				<table width="100%" cellspacing="0" cellpadding="0">
				<tr>
					<th align="left"></th>
				</tr>
				<tr>
					<td>
					<pre>@ <span class="parameter">row, column</span> 
GET <span class="parameter">memvar</span> | <span class="parameter">field</span> 
FUNCTION <span class="parameter">expC1</span> | PICTURE <span class="parameter">expC2</span>
	[FONT <span class="parameter">expC3</span> [, <span class="parameter">expN1</span>]]
	[STYLE <span class="parameter">expC4</span>]
	[DEFAULT <span class="parameter">expr</span>]
	[FROM <span class="parameter">array</span>]
	[RANGE <span class="parameter">expN2</span> [, <span class="parameter">expN3</span>]]
	[SIZE <span class="parameter">expN4</span>, <span class="parameter">expN5</span>]
	[ENABLE | DISABLE]
	[MESSAGE <span class="parameter">expC5</span>]
	[VALID <span class="parameter">expL1</span> | <span class="parameter">expN6</span>]
	[WHEN <span class="parameter">expL2</span>]
	[COLOR SCHEME <span class="parameter">expN7</span>
		[, <span class="parameter">expN8</span>] 
	| COLOR <span class="parameter">color pair list</span>]</pre>
					</td>
				<tr>
				</table>
			</span>
		</div>
	</div>
	<p />
	<h4 class="subHeading">Parameters</h4>
<span class="nonLinkTerms"><span class="parameter">row, column</span></span><br />
&nbsp;Row and column are numeric expressions with values of 0 or greater that determine where the list appears. <br />
<br />
&nbsp;The first row is number 0 in the main FoxPro window or a user-defined window. Rows are numbered from top to bottom. In FoxPro for Windows, row 0 is the row immediately under the FoxPro system menu bar. In FoxPro for Macintosh, row 0 is the row immediately under the FoxPro title bar. In FoxPro for MS-DOS, row 0 is the row the FoxPro system menu bar occupies. See SET SYSMENU for information about manipulating the system menu bar so you can place output on row 0 in FoxPro for MS-DOS. <br />
<br />
&nbsp;The first column is number 0 in the main FoxPro window or a user-defined window. Columns are numbered from left to right. <br />
<br />
&nbsp;When the list is directed to a user-defined window, the row and column coordinates are relative to the user-defined window, not the main FoxPro window. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, a position in the main FoxPro window or in a user-defined window is determined by the font of the main FoxPro window or the user-defined window. Most fonts can be displayed in a wide variety of sizes, and some are proportionally spaced. A row corresponds to the height of the current font; a column corresponds to the average width of a letter in the current font. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, you can position the list in a window with decimal fractions for row and column coordinates. In FoxPro for MS-DOS, decimal fractions used for row and column coordinates are rounded to the nearest integer value.<br />
<br />
<span class="nonLinkTerms"><span class="parameter">memvar</span></span> | <span class="parameter">field</span> <br />
&nbsp;When you choose an option from the popup, your choice is stored to the memory variable or array element specified with <span class="parameter">memvar</span> or a field specified with <span class="parameter">field</span>. If you press Esc to exit the popup, the value of <span class="parameter">memvar</span> or <span class="parameter">field</span> isn't changed.<br />
<br />
&nbsp;<span class="parameter">memvar</span> or <span class="parameter">field</span> must be of numeric or character type. If <span class="parameter">memvar</span> or <span class="parameter">field</span> is character, the prompt of the item you choose is stored to <span class="parameter">memvar</span>. If <span class="parameter">memvar</span> or <span class="parameter">field</span> is numeric, the number representing the position of the item in the popup is stored to <span class="parameter">memvar</span> or <span class="parameter">field</span>.   <br />
<br />
<span class="nonLinkTerms">Initial Option Selection<br /></span>
<br />
&nbsp;When a popup appears, the value of <span class="parameter">memvar</span> or <span class="parameter">field</span> determines which popup option (if any) is initially displayed on the face of the popup. <br />
<br />
&nbsp;If <span class="parameter">memvar</span> or <span class="parameter">field</span> is numeric, the option in the specified numeric position in the list of options is initially displayed on the face of the popup. For example, if the memory variable, array element or field contains 1, the first popup option you specify is initially displayed. If the value of <span class="parameter">memvar</span> or <span class="parameter">field</span> doesn't correspond to any of the popup options (the value is less than 1 or greater than the number of options), the face of the popup is initially blank.<br />
<br />
&nbsp;If <span class="parameter">memvar</span> or <span class="parameter">field</span> is of character type, a case-sensitive comparison is made between <span class="parameter">memvar</span> or <span class="parameter">field</span> and each popup option. When the comparison is made, all special characters and any leading or trailing spaces are ignored. If a match is found, the matching option is initially displayed on the face of the popup. If a match isn't found, the character value of <span class="parameter">memvar</span> or <span class="parameter">field</span> is initially displayed on the face of the popup and is added as a temporary option at the end of the list of options.<br />
<br />
<span class="nonLinkTerms">FUNCTION <span class="parameter">expC1</span> | PICTURE <span class="parameter">expC2</span>  <br /></span>
&nbsp;When creating popups, you must include the FUNCTION clause, the PICTURE clause or both. There is no advantage to any of the three methods. The FUNCTION or PICTURE clause contains the popup specification code ^ and the set of popup options.<br />
<br />
&nbsp;Options can also be specified in the FROM <span class="parameter">array</span> clause. If the options are specified there, you do not need to include them in the FUNCTION or PICTURE clause.<br />
<br />
&nbsp;However, if you include FROM <span class="parameter">array</span>, ^ must still be included in the FUNCTION or PICTURE clause.<br />
<br />
&nbsp;The FUNCTION character expression <span class="parameter">expC1</span> must begin with ^. To create the options that appear in the popup list, include a space after ^ followed by a list of options separated by semicolons. The following example creates the option prompts Cash, Charge, Net 30 and Net 60:<br />
<br />
&nbsp;... FUNCTION '^ Cash;Charge;Net 30;Net 60' ... <br />
<br />
&nbsp;The PICTURE character expression <span class="parameter">expC2</span> uses the same syntax as the FUNCTION character expression except the PICTURE expression must begin with @ followed by ^. <br />
<br />
&nbsp;For example, the following PICTURE clause creates the option prompts Cash, Charge, Net 30 and Net 60:<br />
<br />
&nbsp;... PICTURE '@^ Cash;Charge;Net 30;Net 60' ... <br />
<br />
&nbsp;You can also include both the FUNCTION and PICTURE clauses to create popups. If both are included, the FUNCTION character expression <span class="parameter">expC1</span> must contain ^ to create the popup, and can also include a space and the popup options. The PICTURE character expression <span class="parameter">expC2</span> can include prompts to create additional options. <br />
<br />
&nbsp;The following examples illustrate the various forms of syntax you can use to create a popup. In all the examples, a popup is placed in the second row and column. It contains four options with the prompts Cash, Charge, Net 30 and Net 60. It is initialized by the memory variable MCHOICE. When you choose one of the options from the popup, your choice is stored to MCHOICE.<br />
<br />
&nbsp;FUNCTION clause only:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '^ Cash;Charge;Net 30;Net 60'<br />
&nbsp;READ<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;STORE '^ Cash;Charge;Net 30;Net 60' TO mfunc<br />
&nbsp;@ 2,2 GET mchoice FUNCTION mfunc<br />
&nbsp;READ<br />
<br />
&nbsp;PICTURE clause only:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice PICTURE '@^ Cash;Charge;Net 30;Net 60'<br />
&nbsp;READ<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice PICTURE '@^' + ' Cash;Charge;Net 30;Net 60'<br />
&nbsp;READ<br />
<br />
&nbsp;FUNCTION and PICTURE clauses:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '^' ;<br />
&nbsp;&nbsp;PICTURE ' Cash;Charge;Net 30;Net 60'<br />
&nbsp;READ<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '^ Cash;Charge' ;<br />
&nbsp;&nbsp;PICTURE ';Net 30;Net 60'<br />
&nbsp;READ<br />
<br />
<span class="nonLinkTerms">PICTURE and FUNCTION Options N,T, 2 and 3<br /></span>
&nbsp;Additional options can be placed after the caret ()^ ) specification code in the FUNCTION or PICTURE clause to modify the behavior (N and T) and appearance (2 and 3) of the popup.<br />
<br />
&nbsp;The 2 (two-dimensional) and 3 (three-dimensional) specification codes are only available in FoxPro for Macintosh.<br />
<br />
&nbsp;Option&nbsp;Description<br />
&nbsp;------&nbsp;-----------<br />
&nbsp;<br />
&nbsp;   N&nbsp;Does not terminate the READ when an option is chosen. This is the default behavior.<br />
<br />
&nbsp;   T&nbsp;Terminates the READ when an option is chosen. <br />
<br />
&nbsp;   2&nbsp;Creates a flat (two-dimensional) popup identical to popups in Macintosh dialogs. This is the default popup in FoxPro for Macintosh.<br />
<br />
&nbsp;   3&nbsp;Creates a three-dimensional popup identical to popups in FoxPro for Macintosh dialogs.<br />
<br />
<span class="nonLinkTerms">Popup Options with Special Features<br /></span>
&nbsp;When defining a prompt, you can assign special characteristics to a popup option. For example, you can assign a hot key to the option or disable the option by including special characters. <br />
<br />
<span class="nonLinkTerms">Hot Keys<br /></span>
&nbsp;In FoxPro for MS-DOS, a hot key is a highlighted letter in a prompt that you can type to immediately choose an option on an open popup. To assign a hot key, place a backslash and a less-than sign (\&lt;) before the desired character of the popup option. <br />
<br />
&nbsp;In FoxPro for Windows, a hot key is an underlined letter on a prompt that you can type to immediately choose an option on the popup. The popup doesn't have to be open to choose an option with a hot key if KEYCOMP is set to WINDOWS.<br />
<br />
&nbsp;In FoxPro for Macintosh, if KEYCOMP is set to MAC (the default), hot keys aren't highlighted or underlined. If KEYCOMP is set to DOS or WINDOWS, hot keys are underlined.<br />
<br />
&nbsp;The following example assigns the hot keys C and R to the Cash and Charge options, respectively: <br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '^ \&lt;Cash;Cha\&lt;rge;Net 30;Net 60'<br />
&nbsp;READ <br />
<br />
<span class="nonLinkTerms">Disabled Options<br /></span>
&nbsp;You can disable an option so it can't be chosen. Disabled options are shown in disabled colors. To disable a popup option, place a backslash (\) before the option. To disable the entire popup, include the DISABLE keyword. <br />
<br />
&nbsp;The Charge option is disabled in this example:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '^ Cash;\Charge;Net 30;Net 60'<br />
&nbsp;READ<br />
<br />
<span class="nonLinkTerms">FONT <span class="parameter">expC3</span> [, <span class="parameter">expN1</span>]<br /></span>
&nbsp;The character expression <span class="parameter">expC3</span> is the name of the font, and the numeric expression <span class="parameter">expN1</span> is the font size. For example, the following clause can be used to display the options in the popup in 16-point Courier font:<br />
<br />
&nbsp;FONT 'Courier', 16 <br />
<br />
&nbsp;If you include the FONT clause but omit the font size <span class="parameter">expN1</span>, a 10-point font is used.<br />
<br />
&nbsp;In FoxPro for Windows, if the font you specify is not available, a font with similar font characteristics is substituted.<br />
<br />
&nbsp;In FoxPro for Macintosh, if the font you specify is not available, the Chicago font is used.<br />
<br />
&nbsp;In FoxPro for MS-DOS, the FONT clause is ignored.<br />
<br />
&nbsp;If the FONT clause is omitted and the popup is placed in the main FoxPro window, the main FoxPro window font is used. If the FONT clause is omitted and the popup is placed in a user-defined window, the user-defined window font is used. <br />
<br />
<span class="nonLinkTerms">STYLE <span class="parameter">expC4</span><br /></span>
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, include the STYLE clause to specify a font style for the options in the popup. <br />
<br />
&nbsp;The font style is specified with <span class="parameter">expC4</span>. If the STYLE clause is omitted, the normal font style is used.<br />
<br />
&nbsp;In FoxPro for Windows, if the font style you specify is not available, a font style with similar characteristics is substituted.<br />
<br />
&nbsp;In FoxPro for Macintosh, if the font you specify is not available, the normal font style is used.<br />
<br />
&nbsp;The STYLE clause is ignored in FoxPro for MS-DOS.<br />
<br />
&nbsp;Character&nbsp;Font Style<br />
&nbsp;---------&nbsp;----------<br />
&nbsp;<br />
&nbsp;&nbsp;B&nbsp;&nbsp;Bold<br />
<br />
&nbsp;&nbsp;C&nbsp;&nbsp;Condense*<br />
<br />
&nbsp;&nbsp;E&nbsp;&nbsp;Extend*<br />
<br />
&nbsp;&nbsp;I&nbsp;&nbsp;Italic<br />
<br />
&nbsp;&nbsp;N&nbsp;&nbsp;Normal<br />
<br />
&nbsp;&nbsp;O&nbsp;&nbsp;Outline<br />
<br />
&nbsp;&nbsp;Q&nbsp;&nbsp;Opaque<br />
<br />
&nbsp;&nbsp;S&nbsp;&nbsp;Shadow<br />
<br />
&nbsp;&nbsp;-&nbsp;&nbsp;Strikeout*<br />
<br />
&nbsp;&nbsp;T&nbsp;&nbsp;Transparent<br />
<br />
&nbsp;&nbsp;U&nbsp;&nbsp;Underline<br />
<br />
&nbsp;* The Condense and Extend styles are only available in FoxPro for Macintosh. The Strikeout style is only available in FoxPro for Windows.<br />
<br />
<br />
&nbsp;You can include more than one character to specify a combination of font styles. For example, the following specifies Bold Italic:<br />
<br />
&nbsp;STYLE 'BI'<br />
<br />
<span class="nonLinkTerms">DEFAULT <span class="parameter">expr</span><br /></span>
&nbsp;When you choose an option from a popup, your choice is saved in the memory variable, array element or field you specify. If you specify a memory variable that doesn't exist, it is automatically created and initialized if you include the DEFAULT clause. However, an array element isn't created if you specify an array element in a DEFAULT clause. The DEFAULT clause is ignored if the memory variable already exists or you specify a field.<br />
<br />
&nbsp;-------------------------------<br />
&nbsp;Note - If the DEFAULT clause isn't included and the memory variable <span class="parameter">memvar</span> doesn't exist, the error message "Variable not found" appears. <br />
&nbsp;-------------------------------<br />
<br />
&nbsp;The DEFAULT expression <span class="parameter">expr</span> determines the type of memory variable created and its initial value. <span class="parameter">expr</span> must be a numeric or character expression. Here are examples of DEFAULT clauses for popups: <br />
<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '^ Cash;Charge;Net 30;Net 60' ;<br />
&nbsp;&nbsp;DEFAULT 'Cash'<br />
&nbsp;READ<br />
<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '^ Cash;Charge;Net 30;Net 60';<br />
&nbsp;&nbsp;DEFAULT 3<br />
&nbsp;READ<br />
<br />
<span class="nonLinkTerms">FROM <span class="parameter">array</span> <br /></span>
&nbsp;The FROM <span class="parameter">array</span> clause can be included to create the popup options from a predefined array. If you create popup options with FROM <span class="parameter">array</span>, you must still specify @^ in the PICTURE clause or ^ in the FUNCTION clause. For example:<br />
<br />
&nbsp;... FROM marray PICTURE '@^' ... <br />
&nbsp;... FROM marray FUNCTION '^' ... <br />
<br />
&nbsp;If FROM <span class="parameter">array</span> is included, any option prompts specified in the PICTURE or FUNCTION clause are ignored.<br />
<br />
&nbsp;The options that appear in the popup are taken from the elements of the array you specify with <span class="parameter">array</span>. If the array is one-dimensional, the first element in the array creates the first option in the popup, the second array element creates the second option, and so on. <br />
<br />
&nbsp;If the array is two-dimensional, only the elements in the first column of the array create the options in the popup. The first element in the array creates the first option in the popup, the second element in the first column creates the second option, and so on.<br />
<br />
<span class="nonLinkTerms">RANGE <span class="parameter">expN2</span> [, <span class="parameter">expN3</span>]<br /></span>
&nbsp;By default, popup options start with the first array element. You can designate a different starting element in the array by including the RANGE value <span class="parameter">expN2</span>. For example, if the array is one-dimensional and <span class="parameter">expN2</span> is 3, the third element in the array creates the first option in the popup, the fourth element creates the second option, and so on. <br />
<br />
&nbsp;An element's position number in a two-dimensional array is determined by counting along rows. For example, suppose you create the following 3-by-3 array:<br />
<br />
&nbsp;a b c<br />
<br />
&nbsp;d e f<br />
<br />
&nbsp;g h i<br />
<br />
&nbsp;Elements a, b, and c are in position numbers 1, 2, and 3. Elements d, e, and f are in position numbers 4, 5, and 6, and so on. With two-dimensional arrays, only elements in the same column as array element <span class="parameter">expN2</span> create the options on the popup. For example, if <span class="parameter">expN2</span> is 2, the contents of elements b, e, and h are used to create the popup options. If <span class="parameter">expN2</span> is 5, only the contents of elements e and h are used. <br />
<br />
&nbsp;If you include a starting element <span class="parameter">expN2</span>, you can also specify the number of elements used to create options by including the numeric expression <span class="parameter">expN3</span>. The number of options appearing in the popup is determined by <span class="parameter">expN3</span>. If <span class="parameter">expN3</span> isn't included, the contents of all array elements in the specified column from the starting element <span class="parameter">expN2</span> through the last element in the column are the popup options. <br />
<br />
&nbsp;If the array is two-dimensional, <span class="parameter">expN3</span> designates the number of elements used from the array column containing the starting element <span class="parameter">expN2</span>. For example, if <span class="parameter">expN2</span> is 2 and <span class="parameter">expN3</span> is 3, the second array element and the next two elements in the same array column create options on the popup. <br />
<br />
&nbsp;The contents of a popup can be dynamically changed. You can insert and delete options by modifying the array. When SHOW GETS is issued, the RANGE clause is reevaluated. If the value of the element numbered <span class="parameter">expN2</span> or <span class="parameter">expN3</span> has changed, the popup is updated to reflect the change. <br />
<br />
&nbsp;The ACOPY(), ADEL(), ADIR(), AELEMENT(), AFIELDS(), AINS(), ALEN(), ASCAN(), ASORT() and ASUBSCRIPT() functions facilitate the manipulation of arrays.<br />
<br />
&nbsp;The following program example demonstrates how a popup can be dynamically changed. Two radio buttons, Vegetable and Fruits, can be chosen. Another set of radio buttons specifies the color (red, yellow or green) of the vegetables or fruits. The popup is modified and refreshed as different buttons are chosen. <br />
<br />
&nbsp;CLEAR<br />
&nbsp;SET TALK OFF<br />
&nbsp;STORE 1 TO color, fruitorveg, popchoice, start<br />
&nbsp;DIMENSION poparray(4,3)<br />
&nbsp;STORE 'Apples'&nbsp;&nbsp;TO poparray(1,1)<br />
&nbsp;STORE 'Bananas'&nbsp;&nbsp;TO poparray(1,2)<br />
&nbsp;STORE 'Limes'&nbsp;&nbsp;&nbsp;TO poparray(1,3)<br />
&nbsp;STORE 'Strawberries'&nbsp;TO poparray(2,1)<br />
&nbsp;STORE 'Lemons'&nbsp;&nbsp;TO poparray(2,2)<br />
&nbsp;STORE 'Grapes'&nbsp;&nbsp;TO poparray(2,3)<br />
&nbsp;STORE 'Radishes'&nbsp;TO poparray(3,1)<br />
&nbsp;STORE 'Corn'&nbsp;&nbsp;&nbsp;TO poparray(3,2)<br />
&nbsp;STORE 'Lettuce'&nbsp;&nbsp;TO poparray(3,3)<br />
&nbsp;STORE 'Beets'&nbsp;&nbsp;&nbsp;TO poparray(4,1)<br />
&nbsp;STORE 'Squash'&nbsp;&nbsp;TO poparray(4,2)<br />
&nbsp;STORE 'Celery'&nbsp;&nbsp;TO poparray(4,3)<br />
&nbsp;@ 9,2   SAY 'Color:'<br />
&nbsp;@ 11,2  SAY 'Type:'<br />
&nbsp;@ 9,10  GET color  FUNCTION '*RH \&lt;Red;\&lt;Yellow;\&lt;Green' ;<br />
&nbsp;&nbsp;SIZE 1, 9, 1 VALID PROC1()<br />
&nbsp;@ 11,10 GET fruitorveg FUNCTION '*RH \&lt;Fruit;\&lt;Vegetable' ;<br />
&nbsp;&nbsp;SIZE 1, 12, 1 VALID PROC2()<br />
&nbsp;@ 4,14  GET popchoice FUNCTION '^' FROM poparray RANGE start,2<br />
&nbsp;@ 14,17 GET ok FUNCTION '*T OK' DEFAULT 1 SIZE 1, 8<br />
&nbsp;@ 10,0,10,41 BOX<br />
&nbsp;@ 8,0,12,41  BOX<br />
&nbsp;READ CYCLE<br />
<br />
&nbsp;PROCEDURE PROC1<br />
&nbsp;DO CASE<br />
&nbsp;&nbsp;CASE COLOR = 1<br />
&nbsp;&nbsp;&nbsp;IF fruitorveg = 1<br />
&nbsp;&nbsp;&nbsp;&nbsp;start = 1<br />
&nbsp;&nbsp;&nbsp;ELSE<br />
&nbsp;&nbsp;&nbsp;&nbsp;start = 7<br />
&nbsp;&nbsp;&nbsp;ENDIF<br />
&nbsp;&nbsp;CASE COLOR = 2<br />
&nbsp;&nbsp;&nbsp;IF fruitorveg = 1<br />
&nbsp;&nbsp;&nbsp;&nbsp;start = 2<br />
&nbsp;&nbsp;&nbsp;ELSE<br />
&nbsp;&nbsp;&nbsp;&nbsp;start = 8<br />
&nbsp;&nbsp;&nbsp;ENDIF<br />
&nbsp;&nbsp;CASE COLOR = 3<br />
&nbsp;&nbsp;&nbsp;IF fruitorveg = 1<br />
&nbsp;&nbsp;&nbsp;&nbsp;start = 3<br />
&nbsp;&nbsp;&nbsp;ELSE<br />
&nbsp;&nbsp;&nbsp;&nbsp;start = 9<br />
&nbsp;&nbsp;&nbsp;ENDIF<br />
&nbsp;ENDCASE<br />
&nbsp;STORE 1 TO popchoice<br />
&nbsp;SHOW GETS<br />
&nbsp;RETURN .T.<br />
<br />
&nbsp;PROCEDURE PROC2<br />
&nbsp;IF fruitorveg = 1<br />
&nbsp;&nbsp;DO CASE<br />
&nbsp;&nbsp;&nbsp;CASE color = 1<br />
&nbsp;&nbsp;&nbsp;&nbsp;STORE 1 TO start<br />
&nbsp;&nbsp;&nbsp;CASE color = 2<br />
&nbsp;&nbsp;&nbsp;&nbsp;STORE 2 TO start<br />
&nbsp;&nbsp;&nbsp;CASE color = 3<br />
&nbsp;&nbsp;&nbsp;&nbsp;STORE 3 TO start<br />
&nbsp;&nbsp;ENDCASE<br />
&nbsp;ELSE<br />
&nbsp;&nbsp;DO CASE<br />
&nbsp;&nbsp;&nbsp;CASE color = 1<br />
&nbsp;&nbsp;&nbsp;&nbsp;STORE 7 TO start<br />
&nbsp;&nbsp;&nbsp;CASE color = 2<br />
&nbsp;&nbsp;&nbsp;&nbsp;STORE 8 TO start<br />
&nbsp;&nbsp;&nbsp;CASE color = 3<br />
&nbsp;&nbsp;&nbsp;&nbsp;STORE 9 TO start<br />
&nbsp;&nbsp;ENDCASE<br />
&nbsp;ENDIF<br />
&nbsp;STORE 1 TO popchoice<br />
&nbsp;SHOW GETS<br />
&nbsp;RETURN .T.<br />
<br />
<span class="nonLinkTerms">SIZE <span class="parameter">expN4</span> [, <span class="parameter">expN5</span>] <br /></span>
&nbsp;By default, the width of the popup is determined by the length of the longest option text in columns. You can optionally specify the width of the popup in columns by specifying <span class="parameter">expN5</span>. For popups, the first SIZE argument <span class="parameter">expN4</span> is ignored, because the height of a popup is determined by the number of options. You can include any numeric value for <span class="parameter">expN4</span>.<br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, the popup font determines the size of the popup. The popup font is specified with the FONT clause. If the FONT clause is omitted, the popup uses the font of its parent window (the main FoxPro window or a user-defined window). <br />
<br />
<span class="nonLinkTerms">ENABLE | DISABLE<br /></span>
&nbsp;Popups are enabled by default when READ or READ CYCLE is issued. You can prevent a popup from being activated when READ or READ CYCLE is issued by including DISABLE. A disabled popup cannot be selected and appears in disabled colors. To disable individual popup options instead of the entire popup, see "Disabled Options" earlier in this section. Use SHOW GET ENABLE to enable a disabled popup. <br />
<br />
<span class="nonLinkTerms">MESSAGE <span class="parameter">expC5</span><br /></span>
&nbsp;The MESSAGE clause character expression <span class="parameter">expC5</span> appears when the pop-up is selected. In FoxPro for MS-DOS, the message is centered by default on the last line of the main FoxPro window. The message location can be changed with SET MESSAGE. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, the message is placed in the graphics-based status bar. If the graphics-based status bar has been turned off with SET STATUS BAR OFF, the message is placed on the last line of the main FoxPro window.<br />
<br />
<span class="nonLinkTerms">VALID <span class="parameter">expL1</span> | <span class="parameter">expN6</span><br /></span>
&nbsp;You can include an optional VALID expression <span class="parameter">expL1</span> or <span class="parameter">expN6</span> that is evaluated when a popup option is chosen. That is, VALID isn't evaluated when you select the popup, but when you choose an option in the popup.<br />
<br />
&nbsp;Typically, <span class="parameter">expL1</span> or <span class="parameter">expN6</span> is a user-defined function (UDF). With a user-defined function (UDF) you can select, enable or disable other objects; open a Browse window, open another data-entry screen or move to a new record. CLEAR READ may be included in the user-defined function to terminate the READ.<br />
<br />
&nbsp;<span class="parameter">expL1</span><br />
&nbsp;&nbsp;When a logical value is returned to the VALID clause, the logical value is ignored and the pop-up remains the current control. However, you can specify a UDF that returns a logical value to the VALID clause and activates another object.<br />
<br />
&nbsp;<span class="parameter">expN6</span><br />
&nbsp;&nbsp;A VALID clause that includes a numeric expression is used to specify which object is activated after an option in the popup is chosen. Objects are @ ... GET input fields, check boxes, lists, popups, spinners, text-editing regions and each individual button in a set of push, radio and invisible buttons. <br />
<br />
&nbsp;The expression <span class="parameter">expN6</span> has one of these effects:<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN6</span> = 0, the popup remains the active control.<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN6</span> is positive, <span class="parameter">expN6</span> specifies the number of objects to advance. For example, when the popup is the current object and VALID returns 1, the next object is activated. If <span class="parameter">expN6</span> is greater than the number of objects remaining, the READ is terminated (unless READ CYCLE is issued to activate the objects).<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN6</span> is negative, <span class="parameter">expN6</span> specifies the number of objects to move back. For example, if the popup is the current object and VALID returns -1, the previous object is activated. If <span class="parameter">expN6</span> moves back past the first object, the READ is terminated (unless READ CYCLE is issued to activate the objects).<br />
<br />
<span class="nonLinkTerms">WHEN <span class="parameter">expL2</span><br /></span>
&nbsp;The WHEN clause allows or prohibits selection of a popup based on the logical value of <span class="parameter">expL2</span>, which must evaluate to a logical true (.T.) before a popup can be selected. If <span class="parameter">expL2</span> evaluates to a logical false (.F.), the popup cannot be selected and is skipped over if placed between other objects.<br />
<br />
<span class="nonLinkTerms">COLOR SCHEME <span class="parameter">expN7</span> [, <span class="parameter">expN8</span>] | COLOR <span class="parameter">color pair list</span><br /></span>
&nbsp;If you do not include a COLOR clause, popup colors are determined by the color scheme for the  main FoxPro window; if a popup is placed in a user-defined window, the window's color scheme determines the popup's colors. <br />
<br />
&nbsp;The colors of a popup can be specified by including the number of an existing color scheme in the COLOR SCHEME clause or a set of color pairs in the COLOR clause. <br />
<br />
&nbsp;A color scheme is a set of 10 predefined color pairs. The color pairs in a color scheme can be changed with SET COLOR OF SCHEME. In FoxPro for MS-DOS, the color pairs in a color scheme can also be changed in the Color Picker.<br />
<br />
&nbsp;A color pair is a set of two letters separated by a forward slash. The first letter specifies the foreground color and the second letter specifies the background color.<br />
<br />
&nbsp;For example, this color pair specifies a red foreground on a white background:<br />
<br />
&nbsp;R/W<br />
<br />
&nbsp;For a list of colors and their corresponding color letters, see SET COLOR Overview or Color Table by Color Pair.<br />
<br />
&nbsp;A color pair can also be specified with a set of six RGB (Red Green Blue) color values separated by commas. The first three color values specify the foreground color and the second three color values specify the background color. The color values can range from 0 through 255. <br />
<br />
&nbsp;The R/W color pair in the example above can also be specified with this RGB color pair:<br />
<br />
&nbsp;RGB(255,0,0,255,255,255)<br />
<br />
&nbsp;By default, the colors of a popup and its options are derived from the color scheme of the main FoxPro window or the active user-defined window and color scheme 2.<br />
<br />
&nbsp;The first color scheme <span class="parameter">expN7</span> determines the colors of the face of the popup when the popup is selected, enabled or disabled. It also determines the color of the message. The second color scheme <span class="parameter">expN8</span> determines the color of the popup options and the border of the box containing the options.<br />
<br />
&nbsp;The following table lists the color pairs in each color scheme and what each color pair controls in a popup.<br />
<br />
&nbsp;Color Pair&nbsp;&nbsp; <span class="parameter">expN7</span> or&nbsp;  <br />
&nbsp;  Number&nbsp;&nbsp;Output window&nbsp;&nbsp;<br />
&nbsp;----------&nbsp;&nbsp;-------------<br />
&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;Message<br />
<br />
&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;Selected popup<br />
<br />
&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;Enabled popups<br />
<br />
&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;Disabled popups<br />
<br />
&nbsp;Color Pair&nbsp;&nbsp; <span class="parameter">expN8</span> or&nbsp;  <br />
&nbsp;  Number&nbsp;&nbsp;Color Scheme 2&nbsp;&nbsp;<br />
&nbsp;----------&nbsp;&nbsp;--------------<br />
&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;Disabled options  <br />
<br />
&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;Enabled options   <br />
<br />
&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;Border            <br />
<br />
&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;Selected option   <br />
<br />
&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;Hot keys          <br />
<br />
&nbsp;A color pair list only controls colors of the face of the popup when the popup is selected, enabled or disabled and the color of the message (popup color attributes controlled by color scheme <span class="parameter">expN7</span>). For complete color control of a popup, specify two color schemes.<br />
<br />
&nbsp;This example shows how to override the current color scheme with other predefined color schemes:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '^ Cash;Charge;Net 30;Net 60' ;<br />
&nbsp;&nbsp;COLOR SCHEME 4, 5<br />
&nbsp;READ<br />
<br />
	<h1 class="heading">
	<span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle)" tabindex="0"><img id="remarksToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Remarks</span></h1>
	<div id="remarksSection" class="section" name="collapseableSection" style="display: none;">
<p><br />
This variation of @ ... GET creates a popup. When selected, the popup opens, displaying a set of options from which you can choose one. The set of options is specified in the FUNCTION and/or PICTURE clause containing the specification code for a popup - a caret (^).<br />
<br />
If you use the Screen Builder to create your data-entry screens, you might not have to use this command at all. The Screen Builder automatically generates the commands that create pop-ups. <br />
<br />
To open a popup in FoxPro for MS-DOS, press Enter or the Spacebar or click on the popup. You can open a popup in the same manner in FoxPro for Windows and FoxPro for Macintosh if KEYCOMP is set to DOS. <br />
<br />
To open a popup in FoxPro for Windows when KEYCOMP is set to WINDOWS (the default setting), press the Spacebar, Alt+Up Arrow, or Alt+Down, Arrow or click on the popup.<br />
<br />
To open a popup in FoxPro for Macintosh when KEYCOMP is set to MAC (the default setting), click the popup. When KEYCOMP is set to DOS or WINDOWS, you can open the popup by pressing the Spacebar or clicking the popup.<br />
<br />
</p>
</div>
	<h1 class="heading">
	<span onclick="ExpandCollapse(codeExampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(codeExampleToggle)" tabindex="0"><img id="codeExampleToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Example</span></h1>
	<div id="codeExampleSection" class="section" name="collapseableSection" style="display: none;">
<p>The following example uses a popup to get a field for the browse order from the CUSTOMER table: <br />
<br />
<div class="code">
	<span codeLanguage="other">
	<table width="100%" cellspacing="0" cellpadding="0">
		<tr>
		<th> </th>
		<span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0">
		<img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span>
		</th>
		</tr>
		<tr>
			<td colspan="2">
				<pre>SET TALK OFF
DEFINE WINDOW popupex FROM 5,10 TO 15,55 ;
	FLOAT DOUBLE COLOR SCHEME 5
CLOSE DATABASES
USE customer
DIMENSION dbftags(256)
dbftags(1) = 'Record #'
FOR i = 2 to 256
	IF empty(tag(i-1))
		i = i - 1
		DIMENSION dbftags(i)
		EXIT
	ELSE
		dbftags(i) = tag(i-1)
	ENDIF
ENDFOR
dbforder = 'Record #'
ACTIVATE WINDOW popupex
@ 3.5,7  GET dbforder PICTURE '@^' FROM dbftags SIZE 3, 14
@ 0.5,2  TO 7.5,43
@ 0,5  SAY ' Customer Browse Order: '
@ 2.5,27 GET okcancel PICTURE '@*VT \!OK;\?Cancel' SIZE 1,10,2 DEFAULT 0
READ CYCLE
RELEASE WINDOW popupex
IF okcancel = 1
	IF dbforder = "Record #"
		SET ORDER TO
	ELSE
		SET ORDER TO (dbforder)
	ENDIF
	WAIT WINDOW 'Order set to '+dbforder NOWAIT
	BROWSE WIDTH 10 NOWAIT
ELSE
	WAIT WINDOW 'Order not set' NOWAIT
ENDIF
</pre>			</td>		</tr>
	</table>
	</span>
</div>
</p>
</div>
<!-- VFPX FPW2.6 end -->
<h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle)" tabindex="0"><img id="seeAlsoToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>See Also</span></h1>
<div id="seeAlsoSection" class="section" name="collapseableSection" style="display: none;">
<!-- VFPX FPW2.6 Footer begin -->
<h4 class="subHeading">Other Resources</h4>
<span class="linkTerms"><a href="/html/672125e7-29a8-4d49-b89d-de87f4db5f79.htm">Backward-Compatible Language Elements</a><img class="vfpxmark" src="../local/vfpXmark.gif"/></span><br />
<span class="linkTerms"><a href="/html/6dcddc3f-9944-4ad8-be2f-003610af616a.htm">Language Reference (Visual FoxPro)</a></span><br />
<br />
<!-- VFPX FPW2.6 Footer end -->
</div>
</div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="@ ... GET - Combo Boxes Command">
<param name="ALink Name" value="@ ... GET - Combo Boxes">
</OBJECT>
