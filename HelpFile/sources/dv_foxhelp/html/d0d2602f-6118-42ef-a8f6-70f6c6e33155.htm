<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>@ ... GET - Option Buttons Command</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="collapseImage" style="display:none; height:0; width:0;" alt="Collapse image" src="../local/collapse_all.gif">
      
      
    </img>
    <img id="expandImage" style="display:none; height:0; width:0;" alt="Expand image" src="../local/expand_all.gif">
      
      
    </img>
    <img id="collapseAllImage" style="display:none; height:0; width:0;" alt="CollapseAll image" src="../local/collall.gif">
      
      
    </img>
    <img id="expandAllImage" style="display:none; height:0; width:0;" alt="ExpandAll image" src="../local/expall.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">@ ... GET - Option Buttons Command</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> 
									</td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" alt="CollapseAll image" src="../local/collall.gif">
                
                
              </img>
              <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">
                Collapse All
              </label>
              <label id="expandAllLabel" for="toggleAllImage" style="display: none;">
                Expand All
              </label> </span>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p> </p>
  <div id="sectionSection0" class="seeAlsoNoToggleSection">
      <p>Included for backward compatibility. Use the <a href="/html/11e98c55-43b3-4c8b-a7a0-6427f31c2e68.htm">OptionGroup Control</a> instead.</p>
    </div>
<!-- VFPX FPW2.6 begin -->
	<p class="vfpx">This command is undocumented in the original VFP9 help file, <br />but the following documentation was found in the FoxPro for Windows 2.6 help, and may still be valid:<br /></p>
	<p />
	<p>Creates a set of radio buttons or picture radio buttons.</p>
	<div id="syntaxSection" class="section">
		<div id="syntaxCodeBlocks" class="code">
			<span codeLanguage="other">
				<table width="100%" cellspacing="0" cellpadding="0">
				<tr>
					<th align="left"></th>
				</tr>
				<tr>
					<td>
					<pre>@ <span class="parameter">row, column</span> 
GET <span class="parameter">memvar</span> | <span class="parameter">field</span>
FUNCTION <span class="parameter">expC1</span> | PICTURE <span class="parameter">expC2</span>
	[FONT <span class="parameter">expC3</span> [, <span class="parameter">expN1</span>]]
	[STYLE <span class="parameter">expC4</span>]
	[DEFAULT <span class="parameter">expr</span>]
	[SIZE <span class="parameter">expN2</span>, <span class="parameter">expN3</span>
		[, <span class="parameter">expN4</span>]]
	[ENABLE | DISABLE]
	[MESSAGE <span class="parameter">expC5</span>]
	[VALID <span class="parameter">expL1</span> | <span class="parameter">expN5</span>]
	[WHEN <span class="parameter">expL2</span>]
	[COLOR SCHEME <span class="parameter">expN6</span> 
	| COLOR <span class="parameter">color pair list</span>]</pre>
					</td>
				<tr>
				</table>
			</span>
		</div>
	</div>
	<p />
	<h4 class="subHeading">Parameters</h4>
<span class="nonLinkTerms"><span class="parameter">row, column</span></span><br />
&nbsp;Row and column are numeric expressions with values of 0 or greater that determine where the first button in a set of radio buttons appears. <br />
<br />
&nbsp;The first row is number 0 in the main FoxPro window or a user-defined window. Rows are numbered from top to bottom. In FoxPro for Windows, row 0 is the row immediately under the FoxPro system menu bar. In FoxPro for Macintosh, row 0 is the row immediately under the FoxPro title bar. In FoxPro for MS-DOS, row 0 is the row the FoxPro system menu bar occupies. See SET SYSMENU for information about manipulating the system menu bar so you can place output on row 0 in FoxPro for MS-DOS. <br />
<br />
&nbsp;The first column is number 0 in the main FoxPro window or a user-defined window. Columns are numbered from left to right. <br />
<br />
&nbsp;When the first button in a set of radio buttons is directed to a user-defined window, the row and column coordinates are relative to the user-defined window, not the main FoxPro window. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, a position in the main FoxPro window or in a user-defined window is determined by the font of the main FoxPro window or the user-defined window. Most fonts can be displayed in a wide variety of sizes, and some are proportionally spaced. A row corresponds to the height of the current font; a column corresponds to the average width of a letter in the current font. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, you can position the first button in a set of radio buttons in a window with decimal fractions for row and column coordinates. In FoxPro for MS-DOS, decimal fractions used for row and column coordinates are rounded to the nearest integer value.<br />
<br />
GET <span class="parameter">memvar</span> | <span class="parameter">field</span> <br />
&nbsp;When you choose a radio button, your choice is stored to the memory variable or array element <span class="parameter">memvar</span> or to the field <span class="parameter">field</span>. <span class="parameter">memvar</span> or <span class="parameter">field</span> must be of numeric or character type.<br />
<br />
&nbsp;If <span class="parameter">memvar</span> or <span class="parameter">field</span> is of numeric type, a number corresponding to your radio button choice is stored to the memory variable, array element or field specified with <span class="parameter">memvar</span> or <span class="parameter">field</span>. For example, if you create three radio buttons and choose the second button, 2 is stored. If <span class="parameter">memvar</span> or <span class="parameter">field</span> is of character type, the prompt of the radio button you choose is stored to the memory variable, array element or field specified with <span class="parameter">memvar</span> or <span class="parameter">field</span>.<br />
<br />
&nbsp;Initial Radio Button Selection<br />
<br />
&nbsp;When a set of radio buttons appears, the value of <span class="parameter">memvar</span> or <span class="parameter">field</span> determines which radio button (if any) is initially selected.<br />
<br />
&nbsp;If <span class="parameter">memvar</span> or <span class="parameter">field</span> is numeric, the radio button corresponding to the numeric value is initially selected. For example, if <span class="parameter">memvar</span> or <span class="parameter">field</span> is 1, the first radio button you define is initially selected. If <span class="parameter">memvar</span> or <span class="parameter">field</span> doesn't correspond to any of the buttons (the value is less than 1 or greater than the number of radio buttons) no button is initially selected.<br />
<br />
&nbsp;If <span class="parameter">memvar</span> or <span class="parameter">field</span> is of character type, a case-sensitive comparison is made between <span class="parameter">memvar</span> or <span class="parameter">field</span> and each radio button prompt. When the comparison is made, all special characters and any leading or trailing spaces are removed from the button prompts. If a match is found, the matching button is initially selected. If a match can't be found, no button is initially selected. <br />
<br />
FUNCTION <span class="parameter">expC1</span> | PICTURE <span class="parameter">expC2</span><br />
&nbsp;When creating a set of radio buttons, you must include the FUNCTION clause, the PICTURE clause or both. There is no advantage to any of the three methods. The FUNCTION or PICTURE clause contains the radio button specification code *R and the text for the individual radio button prompts.<br />
<br />
&nbsp;The FUNCTION character expression <span class="parameter">expC1</span> must begin with *R. To create the radio button prompts, include a space after *R  followed by a list of the prompts separated by semicolons. One button is created for each prompt. For example, the following FUNCTION clause creates three radio buttons with the prompts None, Single and Double:<br />
<br />
&nbsp;... FUNCTION '*R None;Single;Double' ... <br />
<br />
&nbsp;The PICTURE character expression <span class="parameter">expC2</span> uses the same syntax as the FUNCTION  expression except the PICTURE expression must begin with @ followed by *R. For example, the following PICTURE clause creates three radio buttons with the prompts None, Single and Double:<br />
<br />
&nbsp;... PICTURE '@*R None;Single;Double' ... <br />
<br />
&nbsp;You can also include both the FUNCTION and PICTURE clauses to create radio buttons. If both are included, the FUNCTION character expression <span class="parameter">expC1</span> must contain *R to create the radio buttons and can also include a space and some radio button prompts. The PICTURE character expression <span class="parameter">expC2</span> can include prompts to create additional radio buttons. <br />
<br />
&nbsp;The following examples illustrate the various forms of syntax you can use to create a set of radio buttons. The radio buttons begin in the second row and second column. Three radio buttons are created with the prompts None, Single and Double. A number corresponding to the button chosen is stored to the memory variable MCHOICE. <br />
<br />
&nbsp;FUNCTION clause only:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*R None;Single;Double'<br />
&nbsp;READ<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;STORE '*R None;Single;Double' TO mfunc<br />
&nbsp;@ 2,2 GET mchoice FUNCTION mfunc<br />
&nbsp;READ <br />
<br />
&nbsp;PICTURE clause only:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice PICTURE '@*R None;Single;Double'<br />
&nbsp;READ<br />
<br />
&nbsp;FUNCTION and PICTURE clause:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*R' PICTURE ' None;Single;Double'<br />
&nbsp;READ<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*R None;Single' PICTURE ';Double'<br />
&nbsp;READ<br />
<br />
Radio Buttons with Picture Prompts<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, the prompt for a radio button can also be the name of a picture file. In FoxPro for Macintosh, you can use a picture file of PICT type or a .BMP bitmap file.<br />
<br />
&nbsp;When a radio button uses a picture file for a prompt, the radio button mimics the behavior of a radio button with a text prompt. For example, the picture file appears but the radio button isn't displayed. Like choosing a radio button, choosing the picture prompt stores the radio button's value to <span class="parameter">memvar</span> or <span class="parameter">field</span>. <br />
<br />
&nbsp;To use a picture file in a radio button, add B to the radio button specification code. The FUNCTION and PICTURE clause specification codes that create a radio button are *R and @*R, respectively. To create a radio button with picture prompts, use the codes *RB and @*RB, followed by a space and the picture filename. If the picture file is not located in the default directory or folder, include the path to picture file with the picture filename.<br />
<br />
&nbsp;-------------------------------<br />
&nbsp;Note - The pictures aren't clipped, reduced or enlarged to fit the radio button. Use the SIZE clause to adjust the size of the radio buttons to accommodate the pictures.<br />
&nbsp;-------------------------------<br />
&nbsp;<br />
&nbsp;If you omit the extension for the picture file, FoxPro for Macintosh first looks for a picture file with the name you specified and a .BMP extension. If a picture file with a .BMP extension and the name you specified isn't found, FoxPro for Macintosh then looks for a file with the name you specified and a .PCT extension. If a picture file with a .PCT extension and the name you specified isn't found, FoxPro for Macintosh then looks for a picture file with the name you specified without an extension.<br />
<br />
Picture Masks and Radio Buttons<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, a picture radio button has three states: up, down and disabled. FoxPro automatically controls the appearance a picture radio button when it is in each of these three states, but you can override the default appearance by using a picture mask. <br />
<br />
&nbsp;A mask is used to control the transparent areas of a picture radio button. By default, the white areas are transparent. If a mask is present, the white areas of the mask, not the picture file, are transparent. <br />
<br />
&nbsp;A mask is a monochrome picture file. In FoxPro for Windows, a mask is a .BMP with an .MSK extension. In FoxPro for Macintosh, a mask can be a .BMP with an .MSK extension or a PICT type file with a .PCM extension. The mask must have the same base name as the picture file and the appropriate extension. FoxPro automatically looks for a mask for a picture file in the same directory or folder where the picture file is located. <br />
<br />
&nbsp;In most cases, a mask isn't necessary. If you don't need anything in your picture to appear white or your picture file has a white background, the picture radio button will appear as desired in the up, down and disabled states.<br />
<br />
&nbsp;When a picture radio button has a mask and is in the up or down state, any white areas in the picture file appear transparent, allowing the color of the button face to show through. However, you can maintain the white color of certain areas. Suppose that you have a picture file with a dog on a white background; the dog has white eyes and the button face is red. You want the background of the button to appear red but you want the dog's eyes to be white, not red. Make a mask that is the same size as the picture file but includes only two colors, black and white. Leave the background of the mask white but make the dog - including his eyes- completely black. When the button appears, the background is red to match the button face but the dog's eyes are white.<br />
<br />
&nbsp;When a picture radio button is disabled, any white areas in the picture file appear transparent so the color of the button face shows through. Any non-white areas appear dark gray. If the button has a mask, all white areas in the mask are transparent so the color of the button face shows through, and all black areas appear dark gray.<br />
<br />
PICTURE and FUNCTION Options N, T, H, V, 2 and 3<br />
&nbsp;Additional options can be combined with the *R specification code to modify the behavior (N and T) and appearance (H, V, 2 and 3) of radio buttons.<br />
<br />
&nbsp;The 2 (two-dimensional) and 3 (three-dimensional) specification codes are only available in FoxPro for Macintosh.<br />
<br />
&nbsp;Option&nbsp;Description<br />
<br />
&nbsp;   N&nbsp;Does not terminate the READ when a radio button is chosen. This is the default behavior.<br />
<br />
&nbsp;   T&nbsp;Terminates the READ when a radio button is chosen.<br />
<br />
&nbsp;   H&nbsp;Positions the radio buttons in a horizontal row.<br />
<br />
&nbsp;   V&nbsp;Positions the radio buttons in a vertical column. This is the default orientation.<br />
<br />
&nbsp;   2&nbsp;Creates flat (two-dimensional) radio buttons identical to radio buttons in Macintosh dialogs. This is the default radio button type in FoxPro for Macintosh.<br />
<br />
&nbsp;   3&nbsp;Creates three-dimensional radio buttons identical to radio buttons in FoxPro for Macintosh dialogs. <br />
<br />
&nbsp;You can combine the T or N options with the H or V and 2 or 3 options. For example, the following clause creates a vertical row of radio buttons and doesn't cause the READ to terminate when a button is chosen:<br />
<br />
&nbsp;... FUNCTION '*RNV ... '<br />
<br />
&nbsp;In FoxPro for Macintosh, the following clause creates a vertical row of two-dimensional radio buttons and doesn't cause the READ to terminate when a button is chosen:<br />
<br />
&nbsp;... FUNCTION '*RNV2 ... '<br />
<br />
Radio Buttons with Special Features<br />
&nbsp;You can assign a hot key to a radio button or disable a radio button. To assign these special features to a radio button, you must include special characters when defining the prompt. The special characters are removed when the prompt is stored to <span class="parameter">memvar</span> or <span class="parameter">field</span>.<br />
<br />
Hot Keys<br />
&nbsp;In FoxPro for MS-DOS, a hot key is a highlighted letter in a radio button prompt that you can type to immediately choose the radio button. Pressing the hot key selects the radio button and chooses it. To assign a hot key, place a backslash and a less-than sign (\&lt;) before the desired character of the radio button prompt. <br />
<br />
&nbsp;A hot key doesn't choose the radio button if the current object is a GET field, a text-editing region, a popup or a list.<br />
<br />
&nbsp;If the current object is an @ ... GET input field or a text-editing region, pressing the hot key enters the character in the field or the text-editing region. If the current object is a pop-up or a list, pressing the hot key selects the first option in the popup or list whose prompt begins with the hot key character. <br />
<br />
&nbsp;In FoxPro for Windows, a hot key is an underlined letter in the radio button prompt that you can type to immediately choose the radio button. If the current object is an @ ... GET input field, a text-editing region, a popup or a list and KEYCOMP is set to WINDOWS, you can press the Alt key and the hot key to choose the radio button. <br />
<br />
&nbsp;In FoxPro for Macintosh, the KEYCOMP setting determines if hot keys are underlined. If KEYCOMP is set to DOS or WINDOWS, hot keys are underlined. If KEYCOMP is set to MAC, hot keys are not underlined but are still available.<br />
<br />
&nbsp;The following example creates three radio buttons with the prompts None, Single and Double and assigns the hot keys N to None, S to Single and D to Double:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*R' PICTURE '\&lt;None;\&lt;Single;\&lt;Double'<br />
&nbsp;READ<br />
<br />
Disabled Radio Buttons<br />
&nbsp;You can disable a radio button so it can't be selected or chosen. Disabled buttons are shown in disabled colors. To disable a single radio button, place two backslashes (\\) before the button's prompt. To disable a set of radio buttons, use DISABLE, which is discussed later in this section. <br />
<br />
&nbsp;The radio button with the prompt Single is disabled in this example:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*R' PICTURE 'None;\\Single;Double'<br />
&nbsp;READ<br />
<br />
FONT <span class="parameter">expC3</span> [, <span class="parameter">expN1</span>]<br />
&nbsp;The character expression <span class="parameter">expC3</span> is the name of the font, and the numeric expression <span class="parameter">expN1</span> is the font size. For example, the following clause can be used to display the radio button prompts in 16-point Courier font:<br />
<br />
&nbsp;FONT 'Courier', 16 <br />
<br />
&nbsp;If you include the FONT clause but omit the font size <span class="parameter">expN1</span>, a 10-point font is used. <br />
<br />
&nbsp;In FoxPro for Windows, if the font you specify is not available, a font with similar font characteristics is substituted.<br />
<br />
&nbsp;In FoxPro for Macintosh, if the font you specify is not available, the Chicago font is used.<br />
<br />
&nbsp;In FoxPro for MS-DOS, the FONT clause is ignored.<br />
<br />
&nbsp;If the FONT clause is omitted and the radio buttons are placed in the main FoxPro window, the main FoxPro window font is used. If the FONT clause is omitted and the radio buttons are placed in a user-defined window, the user-defined window font is used. <br />
<br />
STYLE <span class="parameter">expC4</span><br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, include the STYLE clause to specify a font style for the radio button prompts. If the font style you specify is not available, a font style with similar characteristics is substituted.<br />
<br />
&nbsp;The font style is specified with <span class="parameter">expC4</span>. If the STYLE clause is omitted, the normal font style is used.<br />
<br />
&nbsp;Character&nbsp;Font Style<br />
&nbsp;---------&nbsp;----------<br />
&nbsp;<br />
&nbsp;&nbsp;B&nbsp;&nbsp;Bold<br />
<br />
&nbsp;&nbsp;C&nbsp;&nbsp;Condense*<br />
<br />
&nbsp;&nbsp;E&nbsp;&nbsp;Extend*<br />
<br />
&nbsp;&nbsp;I&nbsp;&nbsp;Italic<br />
<br />
&nbsp;&nbsp;N&nbsp;&nbsp;Normal<br />
<br />
&nbsp;&nbsp;O&nbsp;&nbsp;Outline<br />
<br />
&nbsp;&nbsp;Q&nbsp;&nbsp;Opaque<br />
<br />
&nbsp;&nbsp;S&nbsp;&nbsp;Shadow<br />
<br />
&nbsp;&nbsp;-&nbsp;&nbsp;Strikeout*<br />
<br />
&nbsp;&nbsp;T&nbsp;&nbsp;Transparent<br />
<br />
&nbsp;&nbsp;U&nbsp;&nbsp;Underline<br />
<br />
&nbsp;* The Condense and Extend styles are only available in FoxPro for Macintosh. The Strikeout style is only available in FoxPro for Windows.<br />
<br />
<br />
&nbsp;You can include more than one character to specify a combination of font styles. For example, the following clause specifies Bold Italic:<br />
<br />
&nbsp;STYLE 'BI'<br />
<br />
&nbsp;The STYLE clause is ignored in FoxPro for MS-DOS.<br />
<br />
DEFAULT <span class="parameter">expr</span><br />
&nbsp;When you choose a radio button, your choice is saved in the memory variable, array element or field you specify. If you specify a memory variable that doesn't exist, it is automatically created and initialized if you include the DEFAULT clause. However, an array element isn't created if you specify an array element in a DEFAULT clause. The DEFAULT clause is ignored if the memory variable already exists or you specify a field.<br />
<br />
&nbsp;If the DEFAULT clause isn't included and <span class="parameter">memvar</span> doesn't exist, the error message "Variable not found" appears. <br />
<br />
&nbsp;The DEFAULT expression <span class="parameter">expr</span> determines the type of memory variable created and its initial value. <span class="parameter">expr</span> must be of numeric or character type. Here are examples of DEFAULT clauses for radio buttons: <br />
<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*R' + ;<br />
&nbsp;&nbsp;'None;Single;Double' DEFAULT 'Single'<br />
&nbsp;READ <br />
<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*R None;Single;Double' ;<br />
&nbsp;&nbsp;DEFAULT 2<br />
&nbsp;READ<br />
<br />
SIZE <span class="parameter">expN2</span>, <span class="parameter">expN3</span> [, <span class="parameter">expN4</span>]<br />
&nbsp;The size <span class="parameter">expN2</span> clause specifies the height in rows of the radio buttons. In FoxPro for MS-DOS, a radio button is always one line high, so the numeric expression <span class="parameter">expN2</span> is ignored. <br />
<br />
&nbsp;By default, the width of each individual button is determined by the length of the radio button prompt text. <span class="parameter">expN3</span> specifies the width (in columns) of each radio button.<br />
<br />
&nbsp;By default, no rows are placed between vertical buttons and a single column is placed between horizontal buttons. The spacing between radio buttons in rows is specified with <span class="parameter">expN4</span>. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, the radio button font determines the size of the editing region. The radio button font is specified with the FONT clause. If the FONT clause is omitted, the radio buttons use the font of the parent window (the main FoxPro window or a user-defined window). <br />
<br />
&nbsp;This example demonstrates how the SIZE clause control's the button spacing:<br />
<br />
&nbsp;CLEAR<br />
&nbsp;@ 2,2 GET mchoice1 FUNCTION '*R'+ '\&lt;None;\&lt;Single;\&lt;Double' ;<br />
&nbsp;&nbsp;DEFAULT 'None' SIZE 1, 12, 1<br />
&nbsp;@ 2,16 GET mchoice2 FUNCTION '*R'+ '\&lt;None;\&lt;Single;\&lt;Double' ;<br />
&nbsp;&nbsp;DEFAULT 'None' SIZE 1, 12, 3<br />
&nbsp;READ<br />
<br />
ENABLE | DISABLE<br />
&nbsp;Radio buttons are by default enabled when READ or READ CYCLE is issued. You can prevent a set of radio buttons from being selected when READ or READ CYCLE is issued by including DISABLE.<br />
<br />
&nbsp;Disabled radio buttons cannot be selected and are displayed in the disabled colors. To disable individual radio buttons instead of an entire set, see "Disabled Radio Buttons" earlier in this section. Use SHOW GET ENABLE to enable a set of disabled radio buttons.<br />
<br />
MESSAGE <span class="parameter">expC5</span><br />
&nbsp;The MESSAGE clause character expression <span class="parameter">expC5</span> appears when a radio button is selected. In FoxPro for MS-DOS the message is by default centered on the last line of the main FoxPro window. The message location can be changed with SET MESSAGE.<br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, the message is placed in the graphics-based status bar. If the graphics-based status bar has been turned off with SET STATUS BAR OFF, the message is placed on the last line of the main FoxPro window.<br />
<br />
VALID <span class="parameter">expL1</span> | <span class="parameter">expN5</span> <br />
&nbsp;You can include an optional VALID expression <span class="parameter">expL1</span> or <span class="parameter">expN5</span> that is evaluated when a radio button is chosen. That is, VALID isn't evaluated when you select (move to) a radio button, but when you actually choose the radio button by pressing Enter, Spacebar or clicking on the radio button.<br />
<br />
&nbsp;Typically, <span class="parameter">expL1</span> or <span class="parameter">expN5</span> is a user-defined function (UDF). With a user-defined function (UDF) you can select, enable or disable other objects, open a Browse window, open another data-entry screen or move to a new record. CLEAR READ can be included in the user-defined function to terminate the READ.<br />
<br />
&nbsp;<span class="parameter">expL1</span><br />
&nbsp;&nbsp;When a logical value is returned to the VALID clause, the logical value is ignored and the radio buttons remain the active control. However, you can specify a UDF that returns a logical value to the VALID clause and activates another object.<br />
<br />
&nbsp;<span class="parameter">expN5</span><br />
&nbsp;&nbsp;A VALID clause that includes a numeric expression is used to specify which object is activated after a radio button is chosen. Objects are @ ... GET input fields, check boxes, lists, popups, spinners, text-editing regions and each individual button in a set of push, radio and invisible buttons. <br />
<br />
&nbsp;The expression <span class="parameter">expN5</span> has one of three effects:<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN5</span> = 0, the chosen radio button remains the active button.<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN5</span> is positive, <span class="parameter">expN5</span> indicates the number of objects to advance. For example, when the last radio button in a set of radio buttons is selected and VALID returns 1, the next object is activated. If <span class="parameter">expN5</span> is greater than the number of remaining objects, the READ is terminated (unless READ CYCLE is issued to activate the objects).<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN5</span> is negative, <span class="parameter">expN5</span> indicates the number of objects to move back. For example, when the first radio button in a set of radio buttons is selected and VALID returns -1, the previous object is activated. If <span class="parameter">expN5</span> moves back past the first object, the READ is terminated (unless READ CYCLE is issued to activate the objects).<br />
<br />
WHEN <span class="parameter">expL2</span><br />
&nbsp;The WHEN clause allows or prohibits selection of a set of radio buttons based on the logical value of <span class="parameter">expL2</span>, which must evaluate to a logical true (.T.) before the radio buttons can be selected. If <span class="parameter">expL2</span> evaluates to a logical false (.F.), the radio buttons cannot be selected and are skipped over if placed between other objects.<br />
<br />
COLOR SCHEME <span class="parameter">expN6</span> | COLOR <span class="parameter">color pair list</span><br />
&nbsp;If you do not include a COLOR clause, radio button colors are determined by the color scheme for the main FoxPro window; if radio buttons are placed in a user-defined window, the window's color scheme determines the radio button colors. <br />
<br />
&nbsp;The colors of radio buttons can be specified by including the number of an existing color scheme in the COLOR SCHEME clause or a set of color pairs in the COLOR clause. <br />
<br />
&nbsp;A color scheme is a set of 10 predefined color pairs. The color pairs in a color scheme can be changed with SET COLOR OF SCHEME. In FoxPro for MS-DOS the color pairs in a color scheme can also be changed in the Color Picker.<br />
<br />
&nbsp;A color pair is a set of two letters separated by a forward slash. The first letter specifies the foreground color and the second letter specifies the background color.<br />
<br />
&nbsp;For example, this color pair specifies a red foreground on a white background:<br />
<br />
&nbsp;R/W<br />
<br />
&nbsp;For a list of colors and their corresponding color letters, see SET COLOR Overview or Color Table by Color Pair.<br />
<br />
&nbsp;A color pair can also be specified with a set of six RGB (Red Green Blue) color values separated by commas. The first three color values specify the foreground color and the second three color values specify the background color. The color values can range from 0 through 255. <br />
<br />
&nbsp;The R/W color pair in the example above can also be specified with this RGB color pair:<br />
<br />
&nbsp;RGB(255,0,0,255,255,255)<br />
<br />
&nbsp;The following table lists the color pairs and what each color pair in the list controls.<br />
<br />
&nbsp;Color Pair&nbsp;&nbsp;Radio Button<br />
&nbsp;  Number&nbsp;&nbsp; Attribute<br />
&nbsp;----------&nbsp;&nbsp;------------<br />
<br />
&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;Message<br />
<br />
&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;Selected radio prompt <br />
<br />
&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;Hot keys<br />
<br />
&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;Enabled radio prompt<br />
<br />
&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;Disabled radio prompt<br />
<br />
&nbsp;This example shows how to override one color scheme with another predefined color scheme:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*R None;Single;Double';<br />
&nbsp;&nbsp;COLOR SCHEME 4<br />
&nbsp;READ   <br />
<br />
&nbsp;The following example creates None, Single and Double radio buttons with the hot keys N for None and S for Single. In addition, the buttons have the following color characteristics:<br />
<br />
&nbsp;&nbsp;The selected button is shown with a bright white prompt on a blue background (W+/B).<br />
<br />
&nbsp;&nbsp;Hot key characters are shown in red on a blue background (R/B).<br />
<br />
&nbsp;&nbsp;Enabled buttons are shown with a yellow prompt on a blue background (GR+/B).<br />
<br />
&nbsp;&nbsp;Disabled buttons are shown with a white prompt on a blue background (W/B).<br />
<br />
&nbsp;When you skip a color pair, you must include a comma where the color pair is omitted. <br />
<br />
&nbsp;Here are the commands:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*R \&lt;None;\&lt;Single;\\Double';<br />
&nbsp;&nbsp;COLOR ,,,,,W+/B,R/B,,GR+/B,W/B<br />
&nbsp;READ<br />
<br />
	<h1 class="heading">
	<span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle)" tabindex="0"><img id="remarksToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Remarks</span></h1>
	<div id="remarksSection" class="section" name="collapseableSection" style="display: none;">
<p><br />
This variation of @ ... GET creates a set of radio buttons. As their name suggests, radio buttons are similar to the buttons of a car radio - choosing a button makes your choice current and releases your previous choice. A bullet next to a radio button indicates that it is the current choice. <br />
<br />
If you use the Screen Builder to create your data-entry screens, you might not have to use this command at all. The Screen Builder automatically generates the commands that create radio buttons and picture radio buttons. <br />
<br />
The string of text to the right of each button is called a prompt. The text of the prompt is specified with the FUNCTION or PICTURE clause. Issue READ or READ CYCLE to activate the buttons. <br />
<br />
You can create picture radio buttons in FoxPro for Windows and FoxPro for Macintosh. Pictures replace the radio button prompts.<br />
<br />
</p>
</div>
	<h1 class="heading">
	<span onclick="ExpandCollapse(codeExampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(codeExampleToggle)" tabindex="0"><img id="codeExampleToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Example</span></h1>
	<div id="codeExampleSection" class="section" name="collapseableSection" style="display: none;">
<p><div class="code">
	<span codeLanguage="other">
	<table width="100%" cellspacing="0" cellpadding="0">
		<tr>
		<th> </th>
		<span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0">
		<img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span>
		</th>
		</tr>
		<tr>
			<td colspan="2">
				<pre>CLOSE DATABASES
SET TALK OFF
CLEAR
USE customer
*** Define and activate window for GET information. ***
DEFINE WINDOW one FROM 3, 5 TO 13, 33 FLOAT DOUBLE COLOR SCHEME 5
ACTIVATE WINDOW one
*** Define a set of radio buttons. ***
@ 1,2 GET mchoice FUNCTION '*RNV Next;Prior;Top;Bottom';
	SIZE 1, 10, 1 DEFAULT 'Next'
*** Define a set of push buttons to terminate the READ. ***
@ 3,15 GET okcancel FUNCTION '*V \!OK;\?Cancel' DEFAULT 1;
	SIZE 1, 10, 1
READ CYCLE
*** If Cancel was selected, ***
IF okcancel = 2
	WAIT WINDOW 'Cancel Selected' NOWAIT
ELSE
*** If OK is selected, move record pointer to user's choice. ***
	DO CASE
		CASE mchoice = 'Next'
			SKIP
			IF EOF()
				SKIP -1
			ENDIF
		CASE mchoice = 'Prior'
			IF !BOF()
				SKIP -1
			ENDIF
		CASE mchoice = 'Top'
			GO TOP
		CASE mchoice = 'Bottom'
			GO BOTTOM
	ENDCASE
*** Display user's choice ***
	WAIT WINDOW mchoice + ' Selected' NOWAIT
ENDIF
CLEAR WINDOW
</pre>			</td>		</tr>
	</table>
	</span>
</div>
</p>
</div>
<!-- VFPX FPW2.6 end -->
<h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle)" tabindex="0"><img id="seeAlsoToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>See Also</span></h1>
<div id="seeAlsoSection" class="section" name="collapseableSection" style="display: none;">
<!-- VFPX FPW2.6 Footer begin -->
<h4 class="subHeading">Other Resources</h4>
<span class="linkTerms"><a href="/html/672125e7-29a8-4d49-b89d-de87f4db5f79.htm">Backward-Compatible Language Elements</a><img class="vfpxmark" src="../local/vfpXmark.gif"/></span><br />
<span class="linkTerms"><a href="/html/6dcddc3f-9944-4ad8-be2f-003610af616a.htm">Language Reference (Visual FoxPro)</a></span><br />
<br />
<!-- VFPX FPW2.6 Footer end -->
</div>
</div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="@ ... GET - Option Buttons Command">
<param name="ALink Name" value="@ ... GET - Option Buttons">
</OBJECT>
