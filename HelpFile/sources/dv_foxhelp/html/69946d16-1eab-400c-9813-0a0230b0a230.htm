<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>PROCEDURE Command</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="collapseImage" style="display:none; height:0; width:0;" alt="Collapse image" src="../local/collapse_all.gif">
      
      
    </img>
    <img id="expandImage" style="display:none; height:0; width:0;" alt="Expand image" src="../local/expand_all.gif">
      
      
    </img>
    <img id="collapseAllImage" style="display:none; height:0; width:0;" alt="CollapseAll image" src="../local/collall.gif">
      
      
    </img>
    <img id="expandAllImage" style="display:none; height:0; width:0;" alt="ExpandAll image" src="../local/expall.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">PROCEDURE Command</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> 
									<a href="#codeExampleToggle" onclick="OpenSection(codeExampleToggle)">Example</a></td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" alt="CollapseAll image" src="../local/collall.gif">
                
                
              </img>
              <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">
                Collapse All
              </label>
              <label id="expandAllLabel" for="toggleAllImage" style="display: none;">
                Expand All
              </label> </span>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p>Creates a user-defined procedure in a program file. There are two versions of the syntax.</p>
  <div id="syntaxSection" class="section"><div id="syntaxCodeBlocks" class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"></th></tr><tr><td><pre>
PROCEDURE <span class="parameter">ProcedureName</span> 
   [ LPARAMETERS <span class="parameter">parameter1 </span>[ ,<span class="parameter">parameter2 </span>] ,... ]
      <span class="parameter">Commands</span> 
   [ RETURN [ <span class="parameter">eExpression </span>] ]
[ENDPROC]</pre></td></tr></table></span><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"></th></tr><tr><td><pre>
PROCEDURE <span class="parameter">ProcedureName</span>( [ <span class="parameter">parameter1 </span>[ AS <span class="parameter">para1type </span>][ ,<span class="parameter">parameter2</span> 
[AS <span class="parameter">para2type </span>] ] ,...] ) [ AS <span class="parameter">returntype </span>]
      <span class="parameter">Commands</span> 
   [ RETURN [ <span class="parameter">eExpression </span>] ]
[ENDPROC]</pre></td></tr></table></span></div></div><p /><h4 class="subHeading">Parameters</h4>
    
      <dl><dt><span class="nonLinkTerms">PROCEDURE <span class="parameter">ProcedureName</span></span></dt><dd>
          <p>Designates the beginning of a user-defined procedure and specifies the name of the procedure. <span class="parameter">ProcedureName</span> must begin with a letter or underscore and can contain up to 254 characters with any combination of letters, numbers, and underscores. </p>
        </dd></dl><dl><dt><span class="nonLinkTerms">[ LPARAMETERS <span class="parameter">parameter1 </span>[ , <span class="parameter">parameter2</span>] ,... ] ] </span></dt><dd>
          <p>Assigns data from the calling program to local variables or arrays. You can also use the PARAMETERS keyword instead of LPARAMETERS to accept privately scoped parameters. You can pass a maximum of 26 parameters to a procedure. </p>
          <p>For more information, see <span class="linkTerms"><a href="/html/d5706737-02da-40c2-8758-394927d980f0.htm">LPARAMETERS Command</a></span> and <span class="linkTerms"><a href="/html/1318a43b-98c9-4dea-95ee-e7a8d958f7ba.htm">PARAMETERS Command</a></span>. </p>
        </dd></dl><dl><dt><span class="nonLinkTerms">( [ <span class="parameter">parameter1</span>[ AS <span class="parameter">para1type</span>][ , <span class="parameter">parameter2</span>[ AS <span class="parameter">para2type</span>] ],...] ) </span></dt><dd>
          <p>Assigns data from the calling program to local variables or arrays. You can use the AS <span class="parameter">para1type</span> clause to specify the data type of the variable.</p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>Including the parameters inside parentheses (()) immediately following the procedure name indicates that the parameters are locally scoped to the procedure. </p>
          </td></tr></table></div>
        </dd></dl><dl><dt><span class="nonLinkTerms">[ AS <span class="parameter">returntype</span>] </span></dt><dd>
          <p>Specifies the data type of the return value. </p>
          <p>You can use the AS clause to implement strong typing. For more information, see <span class="linkTerms"><a href="/html/21d951a7-46de-46cc-a5f1-32421bcef366.htm">How to: Implement Strong Typing for Class, Object, and Variable Code</a></span>. </p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <span class="parameter">Commands</span>
        </span></dt><dd>
          <p>Specifies the Visual FoxPro commands to execute when executing the function.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">[ RETURN [ <span class="parameter">eExpression</span>] ] </span></dt><dd>
          <p>Returns control to the calling program or to another program. <span class="parameter">eExpression</span> can specify a return value.</p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>You can include the RETURN command anywhere in the procedure to return control to the calling program or to another program and to define a value returned by the procedure. If you do not include the RETURN command, Visual FoxPro executes an implicit RETURN automatically when the procedure quits. If the RETURN command does not include a return value or if an implicit RETURN is executed, Visual FoxPro assigns True (.T.) as the return value. For more information, see <span class="linkTerms"><a href="/html/be8039a8-8ffb-4f89-823d-e8c6a14f7dbd.htm">RETURN Command</a></span>.</p>
          </td></tr></table></div>
        </dd></dl><dl><dt><span class="nonLinkTerms">[ ENDPROC ] </span></dt><dd>
          <p>Indicates the end of the PROCEDURE structure. </p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>The ENDPROC keyword is optional because the function quits when it encounters another PROCEDURE command, a FUNCTION command, or the end of the program file.You cannot include normal executable program code following user-defined procedures in a program file. Only other user-defined procedures, functions, and class definitions can follow the first PROCEDURE or FUNCTION command in the file.</p>
          </td></tr></table></div>
        </dd></dl>
    
  <h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle)" tabindex="0"><img id="remarksToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="display: none;">
    
      <p>By default, parameters are passed to procedures by value. For information about passing parameters to procedures by reference, see <span class="linkTerms"><a href="/html/c930ca8b-fefa-4393-8a10-27b0a002c19f.htm">SET UDFPARMS Command</a></span>.</p>
      <p>When you issue the DO command with a procedure name, Visual FoxPro searches for the procedure in the following order:  </p>
      <ol><li>
          <p>The file containing the DO command.</p>
        </li><li>
          <p>The current database.</p>
        </li><li>
          <p>Procedure files opened with SET PROCEDURE.  </p>
          <p>For more information, see <span class="linkTerms"><a href="/html/93f1eabe-abc5-4906-8894-75233b64c806.htm">SET PROCEDURE Command</a></span>. </p>
        </li><li>
          <p>Program files in the execution chain.  </p>
          <p>Visual FoxPro searches program files in order from the most recently executed program to the first program executed. </p>
        </li><li>
          <p>A standalone program file. </p>
        </li></ol>
      <p>If a matching program file is found, Visual FoxPro executes the program. Otherwise, Visual FoxPro generates an error message.</p>
      <p>To execute a procedure in a specific file, include the IN clause in the DO command.</p>
      <p>For information about use of the PROCEDURE command when creating classes, see <span class="linkTerms"><a href="/html/42b84eb0-a6fc-4ccd-abc2-1f9ffc853471.htm">DEFINE CLASS Command</a></span>.</p>
    
  </div><h1 class="heading"><span onclick="ExpandCollapse(codeExampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(codeExampleToggle)" tabindex="0"><img id="codeExampleToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Example</span></h1><div id="codeExampleSection" class="section" name="collapseableSection" style="display: none;">
    
      
        <p>The following example illustrates how a procedure can be called to accomplish a discrete task such as making an entry in a log file. The procedure opens the log file (which is assumed to exist in the example), constructs an entry based in information passed in parameters, writes the entry out, and closes the file. The procedure is called with a DO command similar to the one at the top of the program.</p>
        <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>DO MakeLogEntry WITH "Logged in", "jsmith"
PROCEDURE MakeLogEntry
 PARAMETERS message, username
 pnHandle = FOPEN("LOG2.TXT",2)     &amp;&amp; Assume the file exists
 pnSize = FSEEK(pnHandle,0,2)           &amp;&amp; Move to end of file
 logEntry = dtoc(date())+","+time()+","+username+","+message
 =FPUTS(pnHandle, logEntry)
 =FCLOSE(pnHandle)  &amp;&amp; Close file
ENDPROC</pre></td></tr></table></span></div>
        <p>The following example shows how a procedure can be called to return a value.</p>
        <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>SET CENTURY ON
? longdate(({^1998-02-16}))  &amp;&amp; Displays Monday, February 16, 1998
PROCEDURE longdate
 PARAMETER mdate
 RETURN CDOW(mdate) + ", " + MDY(mdate)
ENDPROC</pre></td></tr></table></span></div>
      
    
  </div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle)" tabindex="0"><img id="seeAlsoToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style="display: none;"><h4 class="subHeading">Reference</h4><span class="linkTerms"><a href="/html/40babd3f-2eee-4faa-a6c9-44d9f9cba8e2.htm">FUNCTION Command</a></span><br /><span class="linkTerms"><a href="/html/8eff764b-a635-4129-8481-cb12433582ad.htm">PARAMETERS( ) Function</a></span><br /><span class="linkTerms"><a href="/html/fbd341cc-ba0b-4850-a727-e4bcef931fdd.htm">SYS(16) - Executing Program File Name</a></span><br /><h4 class="subHeading">Other Resources</h4><span class="linkTerms"><a href="/html/1b0b5237-6e5d-43cd-b3a6-6ebe7a470a0e.htm">Commands (Visual FoxPro)</a></span><br /><br /></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="PROCEDURE Command">
<param name="ALink Name" value="PROCEDURE">
</OBJECT>
