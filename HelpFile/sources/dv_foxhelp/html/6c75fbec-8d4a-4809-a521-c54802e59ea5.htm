<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>SQL Language Improvements</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="collapseImage" style="display:none; height:0; width:0;" alt="Collapse image" src="../local/collapse_all.gif">
      
      
    </img>
    <img id="expandImage" style="display:none; height:0; width:0;" alt="Expand image" src="../local/expand_all.gif">
      
      
    </img>
    <img id="collapseAllImage" style="display:none; height:0; width:0;" alt="CollapseAll image" src="../local/collall.gif">
      
      
    </img>
    <img id="expandAllImage" style="display:none; height:0; width:0;" alt="ExpandAll image" src="../local/expall.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">SQL Language Improvements</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> 
									</td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" alt="CollapseAll image" src="../local/collall.gif">
                
                
              </img>
              <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">
                Collapse All
              </label>
              <label id="expandAllLabel" for="toggleAllImage" style="display: none;">
                Expand All
              </label> </span>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p>The <span class="linkTerms"><a href="/html/815f7265-4dfd-40b9-8f19-0673b5a48847.htm">SELECT - SQL Command</a></span> and other SQL commands have been substantially enhanced in Visual FoxPro 9.0. This topic describes the enhancements made to these commands, and new commands that affect SQL performance.</p>
  <h1 class="heading"><span onclick="ExpandCollapse(sectionToggle0)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle0)" tabindex="0"><img id="sectionToggle0" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Expanded Capacities</span></h1><div id="sectionSection0" class="section" name="collapseableSection" style="display: none;">
      <p>Several SELECT - SQL command limitations have been removed or increased in Visual FoxPro 9.0. The following table lists the areas where limitations have been removed or increased. </p>
      <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
            <th>
              
                <b>Capacity</b>
              
            </th>
            <th>
              
                <b>Description</b>
              
            </th>
          </tr><tr>
          <td>
            <p>Number of Joins and Subqueries in a SELECT - SQL command</p>
          </td>
          <td>
            <p>Visual FoxPro 9.0 removes the limit on the total number of join clauses and subqueries in a SELECT - SQL command. The previous limit was nine.</p>
          </td>
        </tr><tr>
          <td>
            <p>Number of UNION clauses in a SELECT - SQL command</p>
          </td>
          <td>
            <p>Visual FoxPro 9.0 removes the limit on number of UNION clauses in a SQL SELECT statement. The previous limit was nine.</p>
          </td>
        </tr><tr>
          <td>
            <p>Number of tables referenced a SELECT - SQL command</p>
          </td>
          <td>
            <p>Visual FoxPro 9.0 removes the limit on the number of tables and aliases referenced in a SQL SELECT statement. The previous limit was 30.</p>
          </td>
        </tr><tr>
          <td>
            <p>Number of arguments in an IN( ) clause</p>
          </td>
          <td>
            <p>Visual FoxPro 9.0 removes the limit of 24 values in the IN (Value_Set) clause for the WHERE clause. However, the number of values remains subject to the setting of <span class="linkTerms"><b>SYS(3055) - FOR and WHERE Clause Complexity</b></span>. For functionality changes concerning the IN clause, see <span class="linkTerms"><a href="/html/1845aee0-11f6-4d09-bfbd-b1847476a3d1.htm">Changes in Functionality for the Current Release</a></span>.</p>
          </td>
        </tr></table></div>
    </div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle1)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle1)" tabindex="0"><img id="sectionToggle1" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Subquery Enhancements</span></h1><div id="sectionSection1" class="section" name="collapseableSection" style="display: none;">
      <p>Visual FoxPro 9.0 provides more flexibility in subqueries. For example, multiple subqueries are now supported. The following describes the enhancements to subqueries in Visual FoxPro 9.0.</p>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Multiple Subqueries</h3><div class="subSection" xmlns="">
          <p>Visual FoxPro 9.0 supports multiple subquery nesting, with correlation allowed to the immediate parent. There is no limit to the nesting depth. In Visual FoxPro 8.0, error 1842 (SQL: Subquery nesting is too deep) was generated when more than one level of subquery nesting occurred.</p>
          <p>The following is the general syntax for multiple subqueries.</p>
          <p>SELECT … WHERE … (SELECT … WHERE … (SELECT …) …) …</p>
        <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <h4 class="subHeading" xmlns="">Examples</h4><div class="subSection" xmlns="">
              <p>The following example queries, which will generate an error in Visual FoxPro 8.0, are now supported in Visual FoxPro 9.0.</p>
              <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>CREATE CURSOR MyCursor (field1 I)
INSERT INTO MyCursor VALUES (0)
CREATE CURSOR MyCursor1 (field1 I)
INSERT INTO MyCursor1 VALUES (1)
CREATE CURSOR MyCursor2 (field1 I)
INSERT INTO MyCursor2 VALUES (2)
SELECT * FROM MyCursor T1 WHERE EXISTS ;
   (SELECT * from MyCursor1 T2 WHERE NOT EXISTS ;
   (SELECT * FROM MyCursor2 T3))
*** Another multiple subquery nesting example ***
SELECT * FROM table1 WHERE table1.iid IN ;
   (SELECT table2.itable1id FROM table2 WHERE table2.iID IN ;
   (SELECT table3.itable2id FROM table3 WHERE table3.cValue = "value"))</pre></td></tr></table></span></div>
            </div>
        </sections></div>
      <h3 class="subHeading" xmlns="">GROUP BY in a Correlated Subquery</h3><div class="subSection" xmlns="">
          <p>Many queries can be evaluated by executing a subquery once and substituting the resulting value or values into the WHERE clause of the outer query. In queries that include a correlated subquery (also known as a repeating subquery), the subquery depends on the outer query for its values. This means that the subquery is executed repeatedly, once for each row that might be selected by the outer query.</p>
          <p>Visual FoxPro 8.0 does not allow using GROUP BY in correlated subquery, and generates error 1828 (SQL: Illegal GROUP BY in subquery). Visual FoxPro 9.0 removes this limitation and supports GROUP BY for correlated subqueries allowed to return more than one record.</p>
          <p>The following is the general syntax for the GROUP BY clause in a correlated subquery.</p>
          <p>SELECT … WHERE … (SELECT … WHERE … GROUP BY …) …</p>
        <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <h4 class="subHeading" xmlns="">Examples</h4><div class="subSection" xmlns="">
              <p>The following example, which will generate an error in Visual FoxPro 8.0, is now supported in Visual FoxPro 9.0.</p>
              <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>CLOSE DATABASES ALL
CREATE CURSOR MyCursor1 (field1 I, field2 I, field3 I)
INSERT INTO MyCursor1 VALUES(1,2,3)
CREATE CURSOR MyCursor2 (field1 I, field2 I, field3 I)
INSERT INTO MyCursor2 VALUES(1,2,3)
SELECT * from MyCursor1 T1 WHERE field1;
   IN (SELECT MAX(field1) FROM MyCursor2 T2 ;
   WHERE T2.field2=T1.FIELD2 GROUP BY field3)</pre></td></tr></table></span></div>
            </div>
        </sections></div>
      <h3 class="subHeading" xmlns="">TOP N in a Non-Correlated Subquery</h3><div class="subSection" xmlns="">
          <p>Visual FoxPro 9.0 supports the TOP N clause in a non-correlated subquery. The ORDER BY clause should be present if the TOP N clause is used, and this is the only case where it is allowed in subquery. </p>
          <p>The following is the general syntax for the TOP N clause in a non-correlated subquery.</p>
          <p>SELECT … WHERE … (SELECT TOP <span class="parameter">nExpr</span> [PERCENT] … FROM … ORDER BY …) …</p>
        <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <h4 class="subHeading" xmlns="">Examples</h4><div class="subSection" xmlns="">
              <p>The following example, which will generate an error in Visual FoxPro 8.0, is now supported in Visual FoxPro 9.0.</p>
              <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>CLOSE DATABASES ALL
CREATE CURSOR MyCursor1 (field1 I, field2 I, field3 I)
INSERT INTO MyCursor1 VALUES(1,2,3)
CREATE CURSOR MyCursor2 (field1 I, field2 I, field3 I)
INSERT INTO MyCursor2 VALUES(1,2,3)
SELECT * FROM MyCursor1 WHERE field1 ;
   IN (SELECT TOP 5 field2 FROM MyCursor2 order by field2)</pre></td></tr></table></span></div>
            </div>
        </sections></div>
      <h3 class="subHeading" xmlns="">Subqueries in a SELECT List</h3><div class="subSection" xmlns="">
          <p>Visual FoxPro 9.0 allows a subquery as a column or a part of expression in a projection. A subquery in a projection has exactly the same requirements as a subquery used in a comparison operation. If a subquery does not return any records, NULL value is returned.</p>
          <p>In Visual FoxPro 8.0, an attempt to use a subquery as a column or a part of expression in a projection would generate error 1810 (SQL: Invalid use of subquery).</p>
          <p>The following is the general syntax for a subquery in a SELECT list.</p>
          <p>SELECT … (SELECT …) … FROM …</p>
        <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <h4 class="subHeading" xmlns="">Example</h4><div class="subSection" xmlns="">
              <p>The following example, which will generate an error in Visual FoxPro 8.0, is now supported in Visual FoxPro 9.0.</p>
              <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>SELECT T1.field1, (SELECT field2 FROM MyCursor2 T2;
   WHERE T2.field1=T1.field1) FROM MyCursor1 T1</pre></td></tr></table></span></div>
            </div>
        </sections></div>
      <h3 class="subHeading" xmlns="">Aggregate functions in a SELECT List of a Subquery</h3><div class="subSection" xmlns="">
          <p>In Visual FoxPro 9.0, aggregate functions are now supported in a SELECT list of a subquery compared using the comparison operators &lt;, &lt;=, &gt;, &gt;= followed by ALL, ANY, or SOME. See <span class="linkTerms"><a href="/html/822ef7c0-0c8e-43b8-ba98-5a4246a94c59.htm">Considerations for SQL SELECT Statements</a></span> for more information about aggregate functions.</p>
        <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <h4 class="subHeading" xmlns="">Example</h4><div class="subSection" xmlns="">
              <p>The following example demonstrates the use of an aggregate function (the COUNT( ) function) in a SELECT list of a subquery.</p>
              <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>CLOSE DATABASES ALL 
CREATE CURSOR MyCursor (FIELD1 i)
INSERT INTO MyCursor VALUES (6)
INSERT INTO MyCursor VALUES (0)
INSERT INTO MyCursor VALUES (1)
INSERT INTO MyCursor VALUES (2)
INSERT INTO MyCursor VALUES (3)
INSERT INTO MyCursor VALUES (4)
INSERT INTO MyCursor VALUES (5)
INSERT INTO MyCursor VALUES (-1)
CREATE CURSOR MyCursor2 (FIELD2 i)
INSERT INTO MyCursor2  VALUES (1)
INSERT INTO MyCursor2  VALUES (2)
INSERT INTO MyCursor2  VALUES (2)
INSERT INTO MyCursor2  VALUES (3)
INSERT INTO MyCursor2  VALUES (3)
INSERT INTO MyCursor2  VALUES (3)
INSERT INTO MyCursor2  VALUES (4)
INSERT INTO MyCursor2  VALUES (4)
INSERT INTO MyCursor2  VALUES (4)
INSERT INTO MyCursor2  VALUES (4)
SELECT * FROM MYCURSOR WHERE field1;
   &lt; ALL (SELECT count(*) FROM MyCursor2 GROUP BY field2) ;
   INTO CURSOR MyCursor3
BROWSE</pre></td></tr></table></span></div>
            </div>
        </sections></div>
      <h3 class="subHeading" xmlns="">Correlated Subqueries Allow Complex Expressions to be Compared with Correlated Field</h3><div class="subSection" xmlns="">
          <p>In Visual FoxPro 8.0, correlated fields can only be referenced in the following forms:</p>
          <p>correlated field &lt;comparison&gt; local field</p>
          <p>-or-</p>
          <p>local field &lt;comparison&gt; correlated field</p>
          <p>In Visual FoxPro 9.0. correlated fields support comparison to local expressions, as shown in the following forms:</p>
          <p>correlated field &lt;comparison&gt; local expression</p>
          <p>-or-</p>
          <p>local expression &lt;comparison&gt; correlated field</p>
          <p>A local expression must use at least one local field and cannot reference any outer (correlated) field. </p>
        <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <h4 class="subHeading" xmlns="">Example</h4><div class="subSection" xmlns="">
              <p>In the following example, a local expression (MyCursor2.field2 / 2) is compared to a correlated field (MyCursor.field1).</p>
              <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>SELECT * FROM MyCursor ;
   WHERE EXISTS(SELECT * FROM MyCursor2  ;
   WHERE MyCursor2.field2 / 2 &gt; MyCursor.field1)</pre></td></tr></table></span></div>
            </div>
        </sections></div>
      <h3 class="subHeading" xmlns="">Changes for Expressions Compared with Subqueries.</h3><div class="subSection" xmlns="">
          <p>In Visual FoxPro 8.0, the left part of a comparison using the comparison operators [NOT] IN, &lt;, &lt;=, =, ==, &lt;&gt;, !=, &gt;=, &gt;, ALL, ANY, or SOME with a subquery must reference <b>one and only one table</b> from the FROM clause. In case of a comparison with correlated subquery, the table must also be the correlated table.</p>
          <p>In Visual FoxPro 9.0, comparisons work in the following ways:</p>
          <ul><li>
              <p>The expression on the left side of an IN comparison must reference <b>at least one table</b> from the FROM clause.</p>
            </li><li>
              <p>The left part for the conditions =, ==, &lt;&gt;, != followed by ALL, SOME, or ANY must reference <b>at least one table</b> from the FROM clause.</p>
            </li><li>
              <p>The left part for the condition &gt;, &gt;=, &lt;, &lt;= followed by ALL, SOME, or ANY (SELECT TOP…) must reference <b>at least one table</b> from the FROM clause.</p>
            </li><li>
              <p>The left part for the condition &gt;, &gt;=, &lt;, &lt;= followed by ALL, SOME, or ANY (SELECT &lt;aggregate function&gt;…) must reference <b>at least one table</b> from the FROM clause.</p>
            </li><li>
              <p>The left part for the condition &gt;, &gt;=, &lt;, &lt;= followed by ALL, SOME, or ANY (subquery with GROUP BY and/or HAVING) must reference <b>at least one table</b> from the FROM clause.</p>
            </li></ul>
          <p>In Visual FoxPro 9.0, the left part of a comparison that does not come from the list (for example, ALL, SOME, or ANY are not included) doesn't have to reference any table from the FROM clause. </p>
          <p>In all cases, the left part of the comparison is allowed to reference more than one table from the FROM clause. For a correlated subquery, the left part of the comparison does not have to reference the correlated table.</p>
        </div>
      <h3 class="subHeading" xmlns="">Subquery in an UPDATE - SQL Command SET List</h3><div class="subSection" xmlns="">
          <p>In Visual FoxPro 9.0, the <span class="linkTerms"><a href="/html/56137e46-cad2-4473-8e8e-367d2ca63334.htm">UPDATE - SQL Command</a></span> now supports a subquery in the SET clause.</p>
          <p>A subquery in a SET clause has exactly the same requirements as a subquery used in a comparison operation. If the subquery does not return any records, the NULL value is returned.</p>
          <p>Only one subquery is allowed in a SET clause. If there is a subquery in the SET clause, subqueries in the WHERE clause are not allowed.</p>
          <p>The following is the general syntax for a subquery in the SET clause.</p>
          <p>UPDATE … SET … (SELECT …) …</p>
        <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <h4 class="subHeading" xmlns="">Example</h4><div class="subSection" xmlns="">
              <p>The following example demonstrates the use of a subquery in the SET clause.</p>
              <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>CLOSE DATA
CREATE CURSOR MyCursor1 (field1 I , field2 I NULL)
INSERT INTO MyCursor1 VALUES (1,1)
INSERT INTO MyCursor1 VALUES (2,2)
INSERT INTO MyCursor1 VALUES (5,5)
INSERT INTO MyCursor1 VALUES (6,6)
INSERT INTO MyCursor1 VALUES (7,7)
INSERT INTO MyCursor1 VALUES (8,8)
INSERT INTO MyCursor1 VALUES (9,9)
CREATE CURSOR MyCursor2 (field1 I , field2 I)
INSERT INTO MyCursor2 VALUES (1,10)
INSERT INTO MyCursor2 VALUES (2,20)
INSERT INTO MyCursor2 VALUES (3,30)
INSERT INTO MyCursor2 VALUES (4,40)
INSERT INTO MyCursor2 VALUES (5,50)
INSERT INTO MyCursor2 VALUES (6,60)
INSERT INTO MyCursor2 VALUES (7,70)
INSERT INTO MyCursor2 VALUES (8,80)
UPDATE MyCursor1 SET field2=100+(SELECT field2 FROM MyCursor2 ;
  WHERE MyCursor2.field1=MyCursor1.field1) WHERE field1&gt;5
SELECT MyCursor1
LIST</pre></td></tr></table></span></div>
            </div>
        </sections></div>
    </sections></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle2)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle2)" tabindex="0"><img id="sectionToggle2" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Sub-SELECT in the FROM Clause</span></h1><div id="sectionSection2" class="section" name="collapseableSection" style="display: none;">
      <p>A sub-SELECT is often referred to as a derived table. Derived tables are SELECT statements in the FROM clause referred to by an alias or a user-specified name. The result set of the SELECT in the FROM clause creates a table used by the outer SELECT statement. Visual FoxPro 9.0 permits the use of a subquery in the FROM clause.</p>
      <p>A sub-SELECT should be enclosed in parentheses and an alias is required. Correlation is not supported. A sub-SELECT has the same syntax limitations as the SELECT command, but not the subquery syntax limitations. All sub-SELECTs are executed before the top most SELECT is evaluated.</p>
      <p>The following is the general syntax for a subquery in the FROM clause.</p>
      <p>SELECT … FROM (SELECT …) [AS] Alias…</p>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <div class="subSection" xmlns="">
        <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <h4 class="subHeading" xmlns="">Example</h4><div class="subSection" xmlns="">
              <p>The following example demonstrates the use of a subquery in the FROM clause.</p>
              <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>SELECT * FROM (SELECT * FROM MyCursor T1;
   WHERE field1 = (SELECT T2.field2 FROM MyCursor1 T2;
   WHERE T2.field1=T1.field2);
   UNION SELECT * FROM MyCursor2;
   ORDER BY 2 desc) AS subquery
*** Note that the following code will generate an error ***
SELECT * FROM (SELECT TOP 5 field1 FROM MyCursor) ORDER BY field1</pre></td></tr></table></span></div>
            </div>
        </sections></div>
    </sections></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle3)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle3)" tabindex="0"><img id="sectionToggle3" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>ORDER BY with Field Names in the UNION clause</span></h1><div id="sectionSection3" class="section" name="collapseableSection" style="display: none;">
      <p>When using a UNION clause in Visual FoxPro 8.0, you are forced to use numeric references in the ORDER BY clause. In Visual FoxPro 9.0, this restriction has been removed and you can use field names.</p>
      <p>The referenced fields must be present in the SELECT list (projection) for the last SELECT in the UNION; that projection is used for ORDER BY operation.</p>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <div class="subSection" xmlns="">
        <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <h4 class="subHeading" xmlns="">Example</h4><div class="subSection" xmlns="">
              <p>The following example demonstrates the use of a field names in the ORDER BY clause.</p>
              <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>CLOSE DATABASES all
CREATE CURSOR MyCursor(field1 I,field2 I)
INSERT INTO MyCursor values(1,6)
INSERT INTO MyCursor values(2,5)
INSERT INTO MyCursor values(3,4)
SELECT field1, field2, .T. AS FLAG,1 FROM MyCursor;
   WHERE field1=1;
   UNION ;
   SELECT field1, field2, .T. AS FLAG,1 FROM MyCursor;
   WHERE field1=3;
   ORDER BY field2 ;
   INTO CURSOR TEMP READWRITE
BROWSE NOWAIT</pre></td></tr></table></span></div>
            </div>
        </sections></div>
    </sections></div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle4)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle4)" tabindex="0"><img id="sectionToggle4" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Optimized TOP N Performance</span></h1><div id="sectionSection4" class="section" name="collapseableSection" style="display: none;">
      <p>In Visual FoxPro 8.0 and earlier versions, when using the TOP N [PERCENT] clause all records are sorted and then the TOP N are extracted. In Visual FoxPro 9.0, performance has been improved by eliminating records that do not qualify for the TOP N from the sort process as early as possible.</p>
      <p>The TOP N optimization is done only if the <span class="linkTerms"><a href="/html/23b309b9-92ce-410c-9dd1-227c7f59c047.htm">SET ENGINEBEHAVIOR Command</a></span> is set to 90.</p>
      <p>Optimization requires that TOP N return no more than N records (this is not the case for Visual FoxPro 8.0 and earlier versions) which is enforced if SET ENGINEBEHAVIOR is set to 90.</p>
      <p>TOP N PERCENT cannot be optimized unless the whole result set can be read into memory at once.</p>
    </div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle5)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle5)" tabindex="0"><img id="sectionToggle5" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Improved Optimization for Multiple Table OR Conditions</span></h1><div id="sectionSection5" class="section" name="collapseableSection" style="display: none;">
      <p>Visual FoxPro 9.0 provides for improved Rushmore optimization involving multi-table OR conditions. Visual FoxPro uses multi-table OR conditions to Rushmore optimize filter conditions for a table as long as both sides of the condition can be optimized. The following example shows this:</p>
      <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>CLEAR
CREATE CURSOR Test1 (f1 I)
FOR i=1 TO 20
  INSERT INTO Test1 VALUES (I)
NEXT 
INDEX ON f1 TAG f1
CREATE CURSOR Test2 (f2 I)
FOR i=1 TO 20
  INSERT INTO Test2 VALUES (I)
NEXT
INDEX ON f2 TAG f2
SYS(3054,12)
SELECT * from Test1, Test2 WHERE (f1 IN (1,2,3) AND f2 IN (17,18,19)) OR ;
  (f2 IN (1,2,3) AND f1 IN (17,18,19)) INTO CURSOR Result
SYS(3054,0)</pre></td></tr></table></span></div>
      <p>In this scenario, table Test1 can be Rushmore optimized using the following condition:</p>
      <p>
        <code>(f1 IN (1,2,3)  OR f1 IN (17,18,19))</code>and table Test2 with the following:</p>
      <p>
        <code>(f2 IN (17,18,19) OR f2 IN (1,2,3))</code>
      </p>
    </div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle6)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle6)" tabindex="0"><img id="sectionToggle6" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Support for Local Buffered Data</span></h1><div id="sectionSection6" class="section" name="collapseableSection" style="display: none;">
      <p>At times it can be beneficial to use SELECT - SQL to select records from a local buffered cursor in which the table has not been updated. Many times when creating controls like grids, list boxes, and combo boxes it is necessary to consider newly added records which have not yet been committed to disk. Currently, SQL statements are based on content that is already committed to disk.</p>
      <p>Visual FoxPro 9.0 provides language enhancements that allow you to specify if the data returned by a SELECT - SQL command is based on buffered data or data written directly to disk.</p>
      <p>The SELECT - SQL command now supports a WITH … BUFFERING clause that lets you specify if retrieved data is based on buffered data or data written directly to disk. For more information, see <span class="linkTerms"><a href="/html/479afb59-2d67-41f6-8c6f-0d7f5f77cae5.htm">SELECT - SQL Command - WITH Clause</a></span>.</p>
      <p>If you do not include the BUFFERING clause, the retrieved data is then determined by the setting for SET SQLBUFFERING command. For more information, see the <span class="linkTerms"><a href="/html/bdecd636-5e6f-4ffa-b4b7-a2dd571e4c69.htm">SET SQLBUFFERING Command</a></span>.</p>
    </div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle7)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle7)" tabindex="0"><img id="sectionToggle7" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Enhancements to other SQL Commands</span></h1><div id="sectionSection7" class="section" name="collapseableSection" style="display: none;">
      <p>The following sections describe enhancements made to the <span class="linkTerms"><a href="/html/f9d15b20-eb9d-4c37-8d4a-d9d02c01eb56.htm">INSERT - SQL Command</a></span>, <span class="linkTerms"><a href="/html/56137e46-cad2-4473-8e8e-367d2ca63334.htm">UPDATE - SQL Command</a></span>, and <span class="linkTerms"><a href="/html/f31dbf64-3691-4ab0-a6b0-7ed1b3a42208.htm">DELETE - SQL Command</a></span> commands in Visual FoxPro 9.0.</p>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">UNION Clause in the INSERT - SQL Command</h3><div class="subSection" xmlns="">
          <p>In Visual FoxPro 9.0, a UNION clause is now supported in the <span class="linkTerms"><a href="/html/f9d15b20-eb9d-4c37-8d4a-d9d02c01eb56.htm">INSERT - SQL Command</a></span>. </p>
          <p>The following is the general syntax for the UNION clause.</p>
          <p>INSERT INTO … SELECT … FROM … [UNION SELECT … [UNION …]]</p>
        <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <h4 class="subHeading" xmlns="">Example</h4><div class="subSection" xmlns="">
              <p>The following example demonstrates the use of a UNION clause in INSERT-SQL.</p>
              <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>CLOSE DATABASES ALL
CREATE CURSOR MyCursor (field1 I,field2 I)
CREATE CURSOR MyCursor1 (field1 I,field2 I)
CREATE CURSOR MyCursor2 (field1 I,field2 I)
INSERT INTO MyCursor1 VALUES (1,1)
INSERT INTO MyCursor2 VALUES (2,2)
INSERT INTO MyCursor SELECT * FROM MyCursor1 UNION SELECT * FROM MyCursor2
SELECT MyCursor
LIST</pre></td></tr></table></span></div>
            </div>
        </sections></div>
      <h3 class="subHeading" xmlns="">Correlated UPDATE - SQL Commands</h3><div class="subSection" xmlns="">
          <p>Visual FoxPro 9.0 now supports correlated updates with the <span class="linkTerms"><a href="/html/56137e46-cad2-4473-8e8e-367d2ca63334.htm">UPDATE - SQL Command</a></span>.</p>
          <p>If a FROM clause is included in the UPDATE -SQL command, then the name after UPDATE keyword defines the target for the update operation. This name can be a table name, an alias, or a file name. The following logic is used to select the target table:</p>
          <ul><li>
              <p>If the name matches an implicit or explicit alias for a table in the FROM clause, then the table is used as a target for the update operation.</p>
            </li><li>
              <p>If the name matches the alias for the cursor in the current data session, then the cursor is used as a target.</p>
            </li><li>
              <p>A table or file with the same name is used as a target.</p>
            </li></ul>
          <p>The UPDATE -SQL command FROM clause has the same syntax as the FROM clause in the SELECT - SQL command with the following limitations:</p>
          <ul><li>
              <p>The target table or cursor cannot be involved in an OUTER JOIN as a secondary table.</p>
            </li><li>
              <p>The target cursor cannot be a subquery result.</p>
            </li><li>
              <p>All other JOINs can be evaluated before joining the target table.</p>
            </li></ul>
          <p>The following is the general syntax for a correlated UPDATE command.</p>
          <p>UPDATE … SET … FROM … WHERE …</p>
        <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <h4 class="subHeading" xmlns="">Example</h4><div class="subSection" xmlns="">
              <p>The following example demonstrates a correlated update using the UPDATE -SQL command.</p>
              <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>CLOSE DATABASES ALL
CREATE CURSOR MyCursor1 (field1 I , field2 I NULL,field3 I NULL)
INSERT INTO MyCursor1 VALUES (1,1,0)
INSERT INTO MyCursor1 VALUES (2,2,0)
INSERT INTO MyCursor1 VALUES (5,5,0)
INSERT INTO MyCursor1 VALUES (6,6,0)
INSERT INTO MyCursor1 VALUES (7,7,0)
INSERT INTO MyCursor1 VALUES (8,8,0)
INSERT INTO MyCursor1 VALUES (9,9,0)
CREATE CURSOR MyCursor2 (field1 I , field2 I)
INSERT INTO MyCursor2 VALUES (1,10)
INSERT INTO MyCursor2 VALUES (2,20)
INSERT INTO MyCursor2 VALUES (3,30)
INSERT INTO MyCursor2 VALUES (4,40)
INSERT INTO MyCursor2 VALUES (5,50)
INSERT INTO MyCursor2 VALUES (6,60)
INSERT INTO MyCursor2 VALUES (7,70)
INSERT INTO MyCursor2 VALUES (8,80)
CREATE CURSOR MyCursor3 (field1 I , field2 I)
INSERT INTO MyCursor3 VALUES (6,600)
INSERT INTO MyCursor3 VALUES (7,700)
UPDATE MyCursor1 SET MyCursor1.field2=MyCursor2.field2, field3=MyCursor2.field2*10 FROM MyCursor2 ;
  WHERE MyCursor1.field1&gt;5 AND MyCursor2.field1=MyCursor1.field1
SELECT MyCursor1
LIST
UPDATE MyCursor1 SET MyCursor1.field2=MyCursor3.field2 FROM MyCursor2, MyCursor3  ;
  WHERE MyCursor1.field1&gt;5 AND MyCursor2.field1=MyCursor1.field1 AND MyCursor2.field1=MyCursor3.field1
SELECT MyCursor1
LIST</pre></td></tr></table></span></div>
            </div>
        </sections></div>
      <h3 class="subHeading" xmlns="">Correlated DELETE - SQL Commands</h3><div class="subSection" xmlns="">
          <p>Visual FoxPro 9.0 now supports correlated deletions with the <span class="linkTerms"><a href="/html/f31dbf64-3691-4ab0-a6b0-7ed1b3a42208.htm">DELETE - SQL Command</a></span>.</p>
          <p>If a FROM clause has more than one table, the name after the DELETE keyword is required and it defines the target for the delete operation. This name can be a table name, an alias or a file name. The following logic is used to select the target table:</p>
          <ul><li>
              <p>If the name matches an implicit or explicit alias for a table in the FROM clause, then the table is used as a target for the update operation.</p>
            </li><li>
              <p>If the name matches the alias for the cursor in the current data session, then the cursor is used as a target.</p>
            </li><li>
              <p>A table or file with the same name is used as a target.</p>
            </li></ul>
          <p>The DELETE -SQL command FROM clause has the same syntax as the FROM clause in the SELECT - SQL command with the following limitations:</p>
          <ul><li>
              <p>The target table or cursor cannot be involved in an OUTER JOIN as a secondary table.</p>
            </li><li>
              <p>The target cursor cannot be a subquery result.</p>
            </li><li>
              <p>It should be possible to evaluate all other JOINs before joining the target table.</p>
            </li></ul>
          <p>The following is the general syntax for a correlated DELETE command.</p>
          <p>DELETE [<span class="parameter">alias</span>] FROM <span class="parameter">alias1</span> [, <span class="parameter">alias2</span> … ] … WHERE …</p>
        <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <h4 class="subHeading" xmlns="">Example</h4><div class="subSection" xmlns="">
              <p>The following example demonstrates a correlated deletion using the DELETE -SQL command.</p>
              <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>CLOSE DATABASES ALL 
CREATE CURSOR MyCursor1 (field1 I , field2 I NULL,field3 I NULL)
INSERT INTO MyCursor1 VALUES (1,1,0)
INSERT INTO MyCursor1 VALUES (2,2,0)
INSERT INTO MyCursor1 VALUES (5,5,0)
INSERT INTO MyCursor1 VALUES (6,6,0)
INSERT INTO MyCursor1 VALUES (7,7,0)
INSERT INTO MyCursor1 VALUES (8,8,0)
INSERT INTO MyCursor1 VALUES (9,9,0)
CREATE CURSOR MyCursor2 (field1 I , field2 I)
INSERT INTO MyCursor2 VALUES (1,10)
INSERT INTO MyCursor2 VALUES (2,20)
INSERT INTO MyCursor2 VALUES (3,30)
INSERT INTO MyCursor2 VALUES (4,40)
INSERT INTO MyCursor2 VALUES (5,50)
INSERT INTO MyCursor2 VALUES (6,60)
INSERT INTO MyCursor2 VALUES (7,70)
INSERT INTO MyCursor2 VALUES (8,80)
CREATE CURSOR MyCursor3 (field1 I , field2 I)
INSERT INTO MyCursor3 VALUES (6,600)
INSERT INTO MyCursor3 VALUES (7,700)
DELETE MyCursor1 FROM MyCursor2  ;
  WHERE MyCursor1.field1&gt;5 AND MyCursor2.field1=MyCursor1.field1
SELECT MyCursor1
LIST
RECALL ALL
DELETE MyCursor1 FROM MyCursor2, MyCursor3  ;
  WHERE MyCursor1.field1&gt;5 AND MyCursor2.field1=MyCursor1.field1 AND MyCursor2.field1=MyCursor3.field1
SELECT MyCursor1
LIST
RECALL ALL
DELETE FROM MyCursor1 WHERE MyCursor1.field1&gt;5
SELECT MyCursor1
list
RECALL ALL
DELETE MyCursor1 from MyCursor1 WHERE MyCursor1.field1&gt;5
RECALL ALL IN MyCursor1
DELETE T1 ;
  FROM MyCursor1 T1 JOIN MyCursor2 ON T1.field1&gt;5 AND MyCursor2.field1=T1.field1, MyCursor3  ;
  WHERE MyCursor2.field1=MyCursor3.field1
RECALL ALL IN MyCursor1</pre></td></tr></table></span></div>
            </div>
        </sections></div>
      <h3 class="subHeading" xmlns="">Updatable Fields in UPDATE - SQL Command</h3><div class="subSection" xmlns="">
          <p>The number of fields that can be updated with the <span class="linkTerms"><a href="/html/56137e46-cad2-4473-8e8e-367d2ca63334.htm">UPDATE - SQL Command</a></span> is no longer limited to 128 as in prior versions of Visual FoxPro. You are now limited to 255, which is the number of fields available in a table.</p>
        </div>
      <h3 class="subHeading" xmlns="">SET ENGINEBEHAVIOR</h3><div class="subSection" xmlns="">
          <p>The <span class="linkTerms"><a href="/html/23b309b9-92ce-410c-9dd1-227c7f59c047.htm">SET ENGINEBEHAVIOR Command</a></span> has a new Visual FoxPro 9.0 option, 90, that affects SELECT - SQL command behavior for the TOP N clause and aggregate functions. For additional information, see the <span class="linkTerms"><a href="/html/23b309b9-92ce-410c-9dd1-227c7f59c047.htm">SET ENGINEBEHAVIOR Command</a></span>.</p>
        </div>
      <h3 class="subHeading" xmlns="">Data Type Conversion</h3><div class="subSection" xmlns="">
          <p>Conversion between data types (for example, conversion between memo and character fields) has been improved in Visual FoxPro 9.0. This conversion improvement applies to the <span class="linkTerms"><a href="/html/3c5a454a-67ec-48a8-8290-18dd0e8a97ea.htm">ALTER TABLE - SQL Command</a></span> with the COLUMN option as well as structural changes made with the Table Designer.</p>
        </div>
    </sections></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle)" tabindex="0"><img id="seeAlsoToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style="display: none;"><h4 class="subHeading">Reference</h4><span class="linkTerms"><a href="/html/46e99caf-fe50-4d55-aa78-e37cffeca2d1.htm">Guide to Reporting Improvements</a></span><br /><span class="linkTerms"><a href="/html/f8ce8cf6-5def-40d0-9dcb-65570d47ce92.htm">Data and XML Feature Enhancements</a></span><br /><span class="linkTerms"><a href="/html/ec67c781-ea65-402c-9b5f-91697f2a0746.htm">Class Enhancements</a></span><br /><span class="linkTerms"><a href="/html/f988d7c6-f382-40dd-a51a-b5ab73eb08c7.htm">Language Enhancements</a></span><br /><span class="linkTerms"><a href="/html/eca7fa6d-ec9c-411a-b3ea-6f5d71991a70.htm">Interactive Development Environment (IDE) Enhancements</a></span><br /><span class="linkTerms"><a href="/html/3d8b88b7-28b8-4d71-a4a1-4da3f1a6dd70.htm">Enhancements to Visual FoxPro Designers</a></span><br /><span class="linkTerms"><a href="/html/ebf2f62e-2ae6-4e78-aeee-e4b322dfc9b9.htm">Miscellaneous Enhancements</a></span><br /><span class="linkTerms"><a href="/html/1845aee0-11f6-4d09-bfbd-b1847476a3d1.htm">Changes in Functionality for the Current Release</a></span><br /><span class="linkTerms"><a href="/html/3c5a454a-67ec-48a8-8290-18dd0e8a97ea.htm">ALTER TABLE - SQL Command</a></span><br /><span class="linkTerms"><a href="/html/bdecd636-5e6f-4ffa-b4b7-a2dd571e4c69.htm">SET SQLBUFFERING Command</a></span><br /><span class="linkTerms"><a href="/html/23b309b9-92ce-410c-9dd1-227c7f59c047.htm">SET ENGINEBEHAVIOR Command</a></span><br /><h4 class="subHeading">Other Resources</h4><span class="linkTerms"><a href="/html/d18b257b-4e8c-4bd7-bc46-682526474e68.htm">What's New in Visual FoxPro</a></span><br /><br /></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="SQL Language Improvements">
</OBJECT>
