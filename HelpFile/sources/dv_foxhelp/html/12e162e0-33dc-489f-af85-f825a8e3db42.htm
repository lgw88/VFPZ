<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>DEFINE CLASS Command - Function or Procedure Definition Clause</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="collapseImage" style="display:none; height:0; width:0;" alt="Collapse image" src="../local/collapse_all.gif">
      
      
    </img>
    <img id="expandImage" style="display:none; height:0; width:0;" alt="Expand image" src="../local/expand_all.gif">
      
      
    </img>
    <img id="collapseAllImage" style="display:none; height:0; width:0;" alt="CollapseAll image" src="../local/collall.gif">
      
      
    </img>
    <img id="expandAllImage" style="display:none; height:0; width:0;" alt="ExpandAll image" src="../local/expall.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">DEFINE CLASS Command - Function or Procedure Definition Clause</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> 
									</td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" alt="CollapseAll image" src="../local/collall.gif">
                
                
              </img>
              <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">
                Collapse All
              </label>
              <label id="expandAllLabel" for="toggleAllImage" style="display: none;">
                Expand All
              </label> </span>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p>Defines method and event functions and procedures for the class definition. </p>
  <div id="syntaxSection" class="section"><div id="syntaxCodeBlocks" class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"></th></tr><tr><td><pre>
[[PROTECTED | HIDDEN] FUNCTION | PROCEDURE <span class="parameter">Name</span>[_ACCESS |_ASSIGN]
   ([<span class="parameter">cParamName</span> | <span class="parameter">cArrayName</span>[] [AS <span class="parameter">Type</span>][@]]) [AS <span class="parameter">Type</span>]
   [HELPSTRING <span class="parameter">cHelpString</span>] | THIS_ACCESS(<span class="parameter">cMemberName</span>) [NODEFAULT]
      <span class="parameter">cStatements</span>
[ENDFUNC | ENDPROC]]</pre></td></tr></table></span></div></div><p /><h4 class="subHeading">Parameters</h4>
    
      <dl><dt><span class="nonLinkTerms">[[PROTECTED | HIDDEN] FUNCTION | PROCEDURE <span class="parameter">Name</span>[_ACCESS | _ASSIGN] </span></dt><dd>
          <p>Specifies events and methods to create for the class definition. Events and methods are created as functions or procedures. You can create an event function or procedure to respond to an event. For more information, see <span class="linkTerms"><a href="/html/f8dde7e9-6ba8-4f65-a797-8cbbcde1f89d.htm">User-Defined Procedures and Functions</a></span>, <span class="linkTerms"><a href="/html/40babd3f-2eee-4faa-a6c9-44d9f9cba8e2.htm">FUNCTION Command</a></span>, and <span class="linkTerms"><a href="/html/69946d16-1eab-400c-9813-0a0230b0a230.htm">PROCEDURE Command</a></span>.</p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>Calling event functions and procedures execute the code defined for those functions and procedures and does not call the event itself.</p>
          </td></tr></table></div>
          <p>For more information about events in Visual FoxPro, see <span class="linkTerms"><a href="/html/d3087fe2-ae39-42b0-95a1-62618480a63b.htm">Understanding the Event Model</a></span>.   </p>
          <p>You can create a method function or procedure, which acts on the object created with the class definition.    </p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>You must declare each protected method on a separate line.</p>
          </td></tr></table></div>
          <p>The <b>_ACCESS</b> or <b>_ASSIGN</b> suffixes specify to create an Access or Assign method for a property with the same name. By default, Access and Assign methods are protected, so you cannot access or make changes to an Access or Assign method from outside of the class. For more information, see <span class="linkTerms"><a href="/html/0f0717bb-ec5c-4d09-a80d-0afb19466c4b.htm">Access and Assign Methods</a></span> and <span class="linkTerms"><a href="/html/9c764956-8eec-4728-aee5-a2e12126921e.htm">How to: Create Access and Assign Methods</a></span>.    </p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>Arrays are passed to Access and Assign methods in the same manner as standard Visual FoxPro procedures. For more information, see <span class="linkTerms"><a href="/html/9937ae10-df44-461f-a7db-64ba43000ca6.htm">Passing Data to Parameters</a></span>. </p>
          </td></tr></table></div>
        </dd></dl><dl><dt><span class="nonLinkTerms">([ <span class="parameter">cParamName</span>| <span class="parameter">cArrayName</span>[] [AS <span class="parameter">Type</span>][@]]) [AS <span class="parameter">Type</span>] </span></dt><dd>
          <p>Specifies one or more parameters to use for passing arguments to the class method or event or specifies the name of an array used to create a type library. </p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>When specifying an array, you must use brackets ([]) notation. <b>DEFINE CLASS</b> does not recognize parentheses (()) notation.</p>
          </td></tr></table></div>
          <p>For parameters, the first <b>AS</b> <span class="parameter">Type</span> clause specifies the data type of the parameter.    </p>
          <p>For arrays, the first <b>AS</b> <span class="parameter">Type</span> clause specifies a type that must be a valid COM data type. For more information, see the table in the Remarks section. The type can also be a reference to a COM CoClass ProgID such as ADODB.RecordSet. You can specify ProgIDs with or without quotation marks (""). If you use a valid COM CoClass ProgID for an <b>AS</b> <span class="parameter">Type</span> clause, Visual FoxPro includes it in the type library. For example, the following method defintion:   </p>
          <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>PROCEDURE Test(oRS AS ADODB.Recordset @) AS ADODB.Recordset</pre></td></tr></table></span></div>
          <p>Creates an entry in the type library:   </p>
          <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>Recordset Test([in, out] Recordset** oRS);</pre></td></tr></table></span></div>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>For arrays, you cannot specify a reference to a ProgID that is generated from the type library. For example, you cannot reference a class that is contained in the same COM server. </p>
          </td></tr></table></div>
          <p>If you specify an array with a type for the first <b>AS</b> <span class="parameter">Type</span> clause, Visual FoxPro creates a SAFEARRAY with the specified type. If you specify an array without a type for the first <b>AS</b> <span class="parameter">Type</span> clause, Visual FoxPro creates a SAFEARRAY of <b>Variant</b> data types. If you specify an invalid type, Visual FoxPro defaults to using <b>Variant</b> type. For more information about safe arrays, see the Remarks section.   </p>
          <p>The at sign (<b>@</b>) specifies that arguments or arrays are passed to the function or procedure by reference.    </p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>By default, data pass to parameters in user-defined procedures by reference and to user-defined functions by value. To pass an entire array, you must pass it by reference. For more information, see <span class="linkTerms"><a href="/html/9937ae10-df44-461f-a7db-64ba43000ca6.htm">Passing Data to Parameters</a></span>.</p>
          </td></tr></table></div>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>You can use the first <b>AS</b> clause to implement strong typing, make IntelliSense functionality available, and for class definition information stored in a type library (OLEPUBLIC). However, Visual FoxPro does not enforce type checking during compilation or code execution so you must make sure to use valid data types. For arrays, strong typing is used primarily for type library creation and is not enforced at run time. By using the <span class="parameter">cArrayName</span>[] [AS <span class="parameter">Type</span>][@] clause, you can specify strong typing for arrays so they can be correctly written as safe arrays to a type library. Strict typing is also recommended for use with the interface methods specified by the <b>IMPLEMENTS</b> clause. For more information, see <span class="linkTerms"><a href="/html/21d951a7-46de-46cc-a5f1-32421bcef366.htm">How to: Implement Strong Typing for Class, Object, and Variable Code</a></span>.</p>
          </td></tr></table></div>
          <p>The second <b>AS</b> <span class="parameter">Type</span> clause indicates the type of the function's return value.    </p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>You cannot specify arrays as return types. For example, while the following code is valid, it writes out the return type of the type library as VARIANT and not a SAFEARRAY:</p>
          </td></tr></table></div>
          <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>PROCEDURE GetWidgets() AS aWidgets[]
ENDPROC</pre></td></tr></table></span></div>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Tip </th></tr><tr><td>
            <p>If the method does not return a value, use <b>AS VOID</b> as the return value. This is required for certain technologies such as Microsoft COM+ Services Queued Components.</p>
          </td></tr></table></div>
          <p>If you want parameters and their types to appear in the type library, you must use inline parameter syntax instead of the <b>LPARAMETERS</b> command to declare the parameters, for example:   </p>
          <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>FUNCTION myMeth(parm1 AS Integer @, parm2 AS String) AS Integer
ENDFUNC</pre></td></tr></table></span></div>
        </dd></dl><dl><dt><span class="nonLinkTerms">[HELPSTRING <span class="parameter">cHelpString</span>] </span></dt><dd>
          <p>Specifies a string to add to the type library as a description of the method's functionality to display in an object browser or IntelliSense.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">THIS_ACCESS( <span class="parameter">cMemberName</span>) </span></dt><dd>
          <p>Specifies to create a <b>THIS_ACCESS</b> procedure or function to execute when the value of an object member changes or is queried. For more information, see <span class="linkTerms"><a href="/html/0f0717bb-ec5c-4d09-a80d-0afb19466c4b.htm">Access and Assign Methods</a></span> and <span class="linkTerms"><a href="/html/9c764956-8eec-4728-aee5-a2e12126921e.htm">How to: Create Access and Assign Methods</a></span>.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">[NODEFAULT] </span></dt><dd>
          <p>Prevents Visual FoxPro from performing default event or method processing for Visual FoxPro events and methods. For more information, see <span class="linkTerms"><a href="/html/906d0b2c-3c60-4c70-87b2-9e2cfc28d322.htm">NODEFAULT Command</a></span>.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <span class="parameter">cStatements</span>
        </span></dt><dd>
          <p>Specifies the code to execute when calling the function or procedure for the class event or method. </p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Tip </th></tr><tr><td>
            <p>You can specify that event and method functions and procedures can accept values by including a <b>PARAMETERS</b> or <b>LPARAMETERS</b> statement as the first executable line of the function or procedure. For more information, see <span class="linkTerms"><a href="/html/1318a43b-98c9-4dea-95ee-e7a8d958f7ba.htm">PARAMETERS Command</a></span> and <span class="linkTerms"><a href="/html/d5706737-02da-40c2-8758-394927d980f0.htm">LPARAMETERS Command</a></span>.</p>
          </td></tr></table></div>
        </dd></dl><dl><dt><span class="nonLinkTerms">[ENDFUNC | ENDPROC]] </span></dt><dd>
          <p>Indicates the end of the function or procedure. Unlike most Visual FoxPro keywords, you cannot abbreviate <b>ENDFUNC</b> and <b>ENDPROC</b> because they can conflict with the with the <b>ENDFOR</b> and <b>ENDPRINTJOB</b> keywords.</p>
        </dd></dl>
    
  <h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle)" tabindex="0"><img id="remarksToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="display: none;">
    
      <p>The following code shows a summary of the main clauses of the <b>DEFINE CLASS</b> command: </p>
      <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>DEFINE CLASS Clause
   [Property_Definition_Clause]
   [PEMName_COMATTRIB Clause]
   [ADD OBJECT Clause]
   [IMPLEMENTS Clause]
   [Function_Procedure_Definition_Clause]
ENDDEFINE</pre></td></tr></table></span></div>
      <p>For more information and full syntax, see <span class="linkTerms"><a href="/html/42b84eb0-a6fc-4ccd-abc2-1f9ffc853471.htm">DEFINE CLASS Command</a></span>. For more information about a particular clause of the <b>DEFINE CLASS</b> command, see the following topics:  </p>
      <ul><li>
          <p>
            <a href="/html/df8b5e2c-f279-40f5-a727-56261debf919.htm">DEFINE CLASS Clause</a>
          </p>
        </li><li>
          <p>
            <a href="/html/2d203429-d816-4928-a4e8-dfa9a040fcbc.htm">Property Definition Clause</a>
          </p>
        </li><li>
          <p>
            <a href="/html/a562a92e-aeaa-418d-af39-e6808e64c668.htm">PEMName_COMATTRIB Clause</a>
          </p>
        </li><li>
          <p>
            <a href="/html/d2417970-2d60-4a28-8dd2-b07930d802bb.htm">ADD OBJECT Clause</a>
          </p>
        </li><li>
          <p>
            <a href="/html/4b1c35cb-251e-4d16-a785-521e0e631749.htm">IMPLEMENTS Clause</a>
          </p>
        </li></ul>
    
  </div><h1 class="heading"><span onclick="ExpandCollapse(sectionToggle0)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggle0)" tabindex="0"><img id="sectionToggle0" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Examples</span></h1><div id="sectionSection0" class="section" name="collapseableSection" style="display: none;">
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Example 1</h3><div class="subSection" xmlns="">
          <p>The following example creates a class named MyForm from the <b>Form</b> base class and contains a procedure for a <b>Click</b> event definition. The form created from the class contains a <b>Click</b> method that displays a dialog box when you click the form.</p>
          <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>DEFINE CLASS MyForm AS Form
   PROCEDURE Click
      = MESSAGEBOX('MyForm has been clicked!')
   ENDPROC
ENDDEFINE</pre></td></tr></table></span></div>
        </div>
      <h3 class="subHeading" xmlns="">Example 2</h3><div class="subSection" xmlns="">
          <p>The following example shows how you can specify strong typing using <b>PROCEDURE</b> <span class="parameter">cArrayName</span>[] [AS <span class="parameter">Type</span> ][@][AS <span class="parameter">Type</span>] clause so that arrays can be correctly written as safe arrays to a type library:</p>
          <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>DEFINE CLASS mySession AS Session OLEPUBLIC
    PROCEDURE GetWidgets1(aWidgets[])
    ENDPROC
    PROCEDURE GetWidgets2(aWidgets[] AS Integer)
    ENDPROC
    PROCEDURE GetWidgets3(aWidgets[] AS Integer @)
    ENDPROC
    PROCEDURE GetRS(oRS[] AS ADODB.Recordset @)
    ENDPROC
ENDDEFINE</pre></td></tr></table></span></div>
          <p>As another example, the following code demonstrates how you can specify strong complex typing by defining a type based on a COM class:</p>
          <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>DEFINE CLASS mySession AS Session OLEPUBLIC
   REFERENCE "ADODB.Recordset"
   PROCEDURE GetRS() AS ADODB.Recordset
      x=CREATEOBJECT("ADODB.Recordset")
      RETURN X
   ENDPROC
   PROCEDURE SetRS(oRS AS ADODB.Recordset @)
      oRS=CREATEOBJECT("ADODB.Recordset")
   ENDPROC
ENDDEFINE</pre></td></tr></table></span></div>
        </div>
    </sections></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle)" tabindex="0"><img id="seeAlsoToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style="display: none;"><h4 class="subHeading">Reference</h4><span class="linkTerms"><a href="/html/060ee886-18bc-41dd-b12d-27fc7669b9b8.htm">:: Scope Resolution Operator</a></span><br /><span class="linkTerms"><a href="/html/d0417150-09bb-4617-a02c-e6e4e1e39393.htm">ADD CLASS Command</a></span><br /><span class="linkTerms"><a href="/html/bf40024f-fb8b-4ded-b0a2-8298e5d8a223.htm">CREATE CLASS Command</a></span><br /><span class="linkTerms"><a href="/html/0b563d46-15c2-4a3b-8a64-af2103cea7cf.htm">CREATE CLASSLIB Command</a></span><br /><span class="linkTerms"><a href="/html/a587b685-14d8-44c2-86d7-da3b81391df0.htm">DODEFAULT( ) Function</a></span><br /><span class="linkTerms"><a href="/html/81422070-37ef-492f-b813-9b40bcaed762.htm">EVENTHANDLER( ) Function</a></span><br /><span class="linkTerms"><a href="/html/f046afe9-7279-4409-a2b9-aca70936a273.htm">GETOBJECT( ) Function</a></span><br /><span class="linkTerms"><a href="/html/78dc6e67-6ffc-484d-8370-38e3371964ec.htm">MODIFY CLASS Command</a></span><br /><span class="linkTerms"><a href="/html/6b7e3a6c-bf81-4c0b-be00-6eaada91e845.htm">RELEASE CLASSLIB Command</a></span><br /><h4 class="subHeading">Other Resources</h4><span class="linkTerms"><a href="/html/1b0b5237-6e5d-43cd-b3a6-6ebe7a470a0e.htm">Commands (Visual FoxPro)</a></span><br /><br /></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="DEFINE CLASS Command - Function or Procedure Definition Clause">
</OBJECT>
