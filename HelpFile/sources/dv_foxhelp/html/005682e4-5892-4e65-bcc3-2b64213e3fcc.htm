<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>Guidelines for Using Visual FoxPro Foundation Classes</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">Guidelines for Using Visual FoxPro Foundation Classes</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoNoToggle" onclick="OpenSection(seeAlsoNoToggle)">
              See Also
            </a>
          </td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p>The Visual FoxPro visual class (.vcx) libraries located in the Visual FoxPro ...\FFC directory contain a variety of foundation classes for enhancing your Visual FoxPro applications with little or no programming. You can freely distribute the foundation classes with your applications. </p>
    <p>You can browse these foundation classes in the Component Gallery. The Component Gallery provides a quick and easy way to learn more about the properties, events, and methods of each of the foundation classes. For more information about the Component Gallery, see <span class="linkTerms"><a href="/html/11b7b53b-d188-4c4f-b023-611c35ac17ab.htm">Using the Component Gallery</a></span>.</p>
    <p>You can also open a foundation class in the Class Designer or Class Browser to see its structure and code. This is a great way to learn how the foundation class works as well as offering excellent insights into programming with Visual FoxPro.</p>
    <p>The following guidelines provide information about how you can add the Visual FoxPro foundation classes to your applications.</p>
  <h1 class="heading">Class Types</h1><div id="sectionSection0" class="seeAlsoNoToggleSection">
      <p>Before you can add a foundation class to your application, you need to know the Visual FoxPro base class of the foundation class. </p>
      <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Tip </th></tr><tr><td>
        <p>To see the base class from the Component Gallery, right-click the foundation class in the Component Gallery, click Properties on the shortcut menu, then the Class Item tab. The base class name appears in the Class name box.</p>
      </td></tr></table></div>
      <p>Certain foundation classes can be used only as visual objects on forms, while others are non-visual and can be run programmatically without being placed on a form. To determine if the foundation class can be added to a form or run programmatically in your application, see <span class="linkTerms"><a href="/html/bc9c384e-280d-4c04-abe0-7f7c7c5fea4f.htm">Visual FoxPro Foundation Classes A-Z</a></span>, which contains Help topics for each foundation class that indicate the base class for each foundation class.</p>
      <p>The following table lists Visual FoxPro base classes and how they can be added to your applications.</p>
      <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
            <th>
              Category A – base classes that can be dropped onto a form
            </th>
            <th>
              Category B – base classes that can be dropped onto a form or run programmatically in your application
            </th>
            <th>
              Category C – base classes that can only be run programmatically in your application
            </th>
          </tr><tr>
          <td>
            <p>Checkbox</p>
          </td>
          <td>
            <p>Custom</p>
          </td>
          <td>
            <p>Form</p>
          </td>
        </tr><tr>
          <td>
            <p>Combobox</p>
          </td>
          <td>
            <p>Container</p>
          </td>
          <td>
            <p>Formset</p>
          </td>
        </tr><tr>
          <td>
            <p>Commandbutton</p>
          </td>
          <td>
            <p>Timer</p>
          </td>
          <td>
            <p>Toolbar</p>
          </td>
        </tr><tr>
          <td>
            <p>Commandgroup</p>
          </td>
          <td>
            <p>ProjectHook</p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Editbox</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Grid</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Hyperlink</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Image</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Label</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Line</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Listbox</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>OLE Control</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Optionbutton</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Optiongroup</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Shape</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Spinner</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr><tr>
          <td>
            <p>Textbox</p>
          </td>
          <td>
            <p> </p>
          </td>
          <td>
            <p> </p>
          </td>
        </tr></table></div>
    </div><h1 class="heading">Adding Foundation Classes to Forms</h1><div id="sectionSection1" class="seeAlsoNoToggleSection">
      <p>You will most often add foundation classes to forms. You can drag and drop foundation classes from the Component Gallery, Class Browser, Project Manager, and the Forms Control toolbar onto forms. </p>
      <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
        <p>You can select a foundation class that you have added to a form and then choose Class Browser from the Tools menu to display more information about the foundation class.</p>
      </td></tr></table></div>
      <p>
        <b>Component Gallery</b>   The Component Gallery provides the easiest way to add foundation classes to a form. For foundation classes with Category A and B base classes, you can drag the foundation class from the Component Gallery and then drop it on a form. You can also right-click a foundation class in the Component Gallery to display a shortcut menu, and then choose Add to Form to add the foundation class to the form. </p>
      <p>Some of the foundation classes have associated builders that are automatically launched to prompt you for more information needed by the foundation class. </p>
      <p>
        <b>Class Browser</b>   You can drag foundation classes with Category A and B base classes directly from the Class Browser to a form by using the drag icon in the upper left corner of the Class Browser. Select the foundation class in the Class Browser, click the icon for the foundation class in the upper left corner of the Class Browser, and then drag the icon over the form. Release the mouse button over the form where you would like the foundation class to appear on the form.</p>
      <p>Foundation classes dragged from the Class Browser to a form do not launch the associated builder. However, you can launch the builder by after the foundation class has been dropped on the form. Select the foundation class on the form, and then right-click to display the shortcut menu. Choose Builder from the shortcut menu to launch the builder.</p>
      <p>
        <b>Project Manager</b>   Foundation classes with Category A and B base classes can be dragged from the Project Manager and dropped on a form.</p>
      <p>Foundation classes dragged from the Project Manager to a form do not launch the associated builder. However, you can launch the builder by after the foundation class has been dropped on the form. Select the foundation class, and then right-click to display the shortcut menu. Choose Builder from the shortcut menu to launch the builder.</p>
      <p>
        <b>Form Controls toolbar</b>   Foundation classes with Category A and B base classes added to the Form Controls toolbar can be added to a form. </p>
      <p>If the Builder Lock is not on, foundation classes dropped from the Form Controls toolbar may launch an associated builder. If the Build Lock is on, you can launch the builder by after the foundation class has been added to the form. Select the foundation class on the form, and then right-click to display the shortcut menu. Choose Builder from the shortcut menu to launch the builder.</p>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Adding Foundation Classes to Projects</h3><div class="subSection" xmlns="">
          <p>When a form containing foundation classes is added to a Visual FoxPro project, the Project Manager automatically adds the visual class libraries containing the foundation classes to the project. However, there are other cases where you may need to add foundation classes to a project. For example, your application may run a Category C foundation class, so the foundation class must be added to the application's project.</p>
          <p>Foundation classes can be added to a project from the Component Gallery, by dragging the .vcx visual class library containing the foundation classes from the Windows Explorer, or by choosing the Add button in the Project Manager.</p>
        </div>
    </sections></div><h1 class="heading">Adding Foundation Classes from the Component Gallery</h1><div id="sectionSection2" class="seeAlsoNoToggleSection">
      <p>You can drag a foundation class from the Component Gallery to a project, or you can right-click the foundation class in the Component Gallery to display a shortcut menu, and then choose Add to Project to add the foundation class to the project. When you add a foundation class to a project, the Add Class to Project dialog box is displayed, prompting you with the following options:  </p>
      <dl><dt><span class="nonLinkTerms">
          <b>Add class to project</b>
        </span></dt><dd>
          <p>Choose this option to add the foundation class and its .vcx class library to the project. Again, this is done automatically for classes dropped onto a form (Categories A and B). For certain Category B and C classes where you plan to call them programmatically from within your application, you will want to choose this option.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Create a new class from selected class</b>
        </span></dt><dd>
          <p>Choose this option to create a new subclass from the foundation class you want to add to the project. This option makes it possible for you to enhance the functionality of the original foundation class, usually by adding additional program code.</p>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <b>Create a new form from selected class</b>
        </span></dt><dd>
          <p>Choose this option for foundation classes with a Form base class (for example, the foundation classes in _dialogs.vcx). This option makes it possible for you to create a new form from the foundation class and enhance the functionality of the original foundation class.</p>
        </dd></dl>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Adding Foundation Classes from the Windows Explorer</h3><div class="subSection" xmlns="">
          <p>A foundation class can be added to a project by dragging the .vcx visual class library containing the foundation class from the Window Explorer to the Project Manager. The visual class library is added to the Class Libraries item in the Project Manager.</p>
        </div>
      <h3 class="subHeading" xmlns="">Adding Foundation Classes from within the Project Manager</h3><div class="subSection" xmlns="">
          <p>A foundation class can be added to a project by selecting the Classes tab and then choosing the Add button. Select the class library from the \Ffc\ folder that contains the foundation class to add to the project.</p>
        </div>
    </sections></div><h1 class="heading">Incorporating Classes into your Application</h1><div id="sectionSection3" class="seeAlsoNoToggleSection">
      <p>In many situations, most foundation classes do not require additional programming to work with your application. However, you may need to provide additional program code for certain foundation classes (those of Category B and Category C non-visual base classes).</p>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Non-Visual Foundation Classes</h3><div class="subSection" xmlns="">
          <p>For example, foundation classes are often based on the Category B Custom class, and these require additional programming. These non-visual classes often perform common tasks such as checking information in the Windows registry, handling environment settings, managing application errors, and utilizing Automation with other applications, such as performing mail merge with Microsoft Word.</p>
          <p>You can drop these non-visual classes onto a form, but you will need to do some additional work in order for them to work with your application. In some cases, a builder is launched when you drag a foundation class onto a form.</p>
          <p>The following example demonstrates some of the program code typically necessary to use a non-visual foundation class in your application:  </p>
          <ol><li>
              <p>Drag the File Version foundation class from the Component Gallery (Foundation Classes\Utilities folder) onto a form.</p>
            </li><li>
              <p>Add a command button to the form and add the following code to its Click event: </p>
              <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>WITH THISFORM._FILEVERSION1
   .cFileName = HOME( )+ 'VFP8.EXE'
   .GetVersion( )
   .DisplayVersion( )
ENDWITH</pre></td></tr></table></span></div>
            </li><li>
              <p>Run the form and click the command button.</p>
            </li></ol>
          <p>You can incorporate a non-visual class in your application without dropping it on a form, as long as you include it in the project used to create the application. The following code illustrates how to executed this same File Version foundation class if the class is not dropped onto a form.</p>
          <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>LOCAL oFileVersion
oFileVersion = NewObject('_fileversion', '_utilities.vcx')
WITH oFileVersion
   .cFileName = HOME( )+ 'VFP8.EXE'
   .GetVersion( )
   .DisplayVersion( )
ENDWITH</pre></td></tr></table></span></div>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>This example assumes that the code can locate the _utilities.vcx class library or from an .app file that is built containing _utilities.vcx.</p>
          </td></tr></table></div>
          <p>When you use a non-visual foundation class, you need to know how and when the class is used within your application so it can be scoped correctly. If only a single form uses the class, you can just drag the class onto the form. However, if the class is used by many forms or is used globally by the application, the foundation class should have a global scope in the application so it remains accessible throughout the application. A global scope may also improve performance.</p>
        </div>
    </sections></div><h1 class="heading">Adding Visual Foundation Classes to Applications</h1><div id="sectionSection4" class="seeAlsoNoToggleSection">
      <p>You can programmatically add visual foundation classes, such as those containing form base classes, to your application. For example, you can use the following code to display an About dialog box:</p>
      <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>LOCAL oAbout
oAbout = NewObject('_aboutbox','_dialogs.vcx')
oAbout.Show( )</pre></td></tr></table></span></div>
      <p>To customize the contents of the About dialog box for each application, create a subclass of the About Dialog Box foundation class for each of your applications:  </p>
      <ol><li>
          <p>Open the project for your application.</p>
        </li><li>
          <p>On the <b>Tools</b> menu, click <b>Component Gallery</b>.</p>
        </li><li>
          <p>In the <b>Component Gallery</b>, expand the <b>Visual FoxPro Catalog</b> node, then the <b>Foundation Classes</b> node, and click <b>Dialogs</b>.</p>
        </li><li>
          <p>Drag the Aboutbox class to the <b>Project Manager</b> for your application.</p>
        </li><li>
          <p>In the <b>Add Class to Project</b> dialog box, click <b>Create new form from selected class</b>. </p>
        </li><li>
          <p>In the <b>Save As</b> dialog box, enter a name for the new form. </p>
          <p>After saving the form, the Form Designer opens and displays the newly created form. </p>
        </li><li>
          <p>In the Properties window, change the Caption property for the title of the new form for your application. Save and close the form.</p>
        </li><li>
          <p>Add program code, such as <code>DO FORM FormName</code>, to the procedure that runs the form, such as an About menu item procedure. </p>
          <p>-or-  </p>
          <p>From the Foundation Classes\Buttons folder in the Component Gallery, drag the Run Form button class onto the form. A builder launches so you can specify the name of the form to execute. </p>
        </li></ol>
      <p>If you use the Visual FoxPro Application Framework, the Application Builder automatically handles adding forms (both .scx and .vcx form classes). The new Application Wizard or the Component Gallery New Application item installs this framework in the projects they create. The Application Builder interacts directly with the framework and enables you to specify how and where the form is launched.</p>
      <p>By using a framework built with the Application Wizard, the Application Builder, and Component Gallery, you have a rich set of tools for creating entire applications with minimal manual coding.</p>
    </div><h1 class="heading">Class Naming Conventions</h1><div id="sectionSection5" class="seeAlsoNoToggleSection">
      <p>The Visual FoxPro Foundation classes and their properties and methods use the following naming conventions.</p>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Classes and Class Libraries</h3><div class="subSection" xmlns="">
          <p>Most foundation classes are subclassed from classes in the _base.vcx visual class library, which you can also find in the \Ffc\ folder. The naming conventions for these classes reflect the base class used. For example, a subclass of the Custom class is called <i>_</i>Custom in _base.vcx. All classes use an underscore ( _ ) to preface the name of a class in _base.vcx.</p>
          <p>A few class libraries do not contain classes that are subclassed from _base.vcx because these classes are shared with other Visual FoxPro components such as wizards and builders. These classes are contained in class libraries without a preceding underscore, such as Registry.vcx.</p>
        </div>
      <h3 class="subHeading" xmlns="">Methods and Properties</h3><div class="subSection" xmlns="">
          <p>Methods are often based on an action name such as <i>RunForm</i>. If the name contains several words, for example, RunForm, then capitalization reflects this. Properties are usually prefaced with a single letter characterizing the data type of that particular property. For example, <i>cFileName</i> indicates that the property is of character type. In addition, default values for properties are also set to the appropriate data type. For example, a logical property can be initialized to false (.F.), while a numeric property can be initialized to 0.</p>
          <p>Properties of classes that shipped in earlier versions of Visual FoxPro do not strictly adhere to these property-naming conventions, and retain their earlier names to avoid compatibility conflicts with user code referencing these properties.</p>
        </div>
    </sections></div><h1 class="heading">Enhancing or Modifying FoxPro Foundation Classes</h1><div id="sectionSection6" class="seeAlsoNoToggleSection">
      <p>You can enhance or modify the Visual FoxPro foundation classes to meet the needs of your application. However, we recommend that you do not modify the foundation classes themselves. The foundation classes may be periodically updated with new functionality.</p>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Subclassing the Foundation Class</h3><div class="subSection" xmlns="">
          <p>The source code is provided for the foundation classes, so you can subclass any foundation class to override or enhance properties and methods. This choice is common when the behavior of a particular foundation class varies between different applications. One application might use a foundation class directly, while another application uses a subclass of the foundation class.</p>
        </div>
      <h3 class="subHeading" xmlns="">Updating _base.vcx</h3><div class="subSection" xmlns="">
          <p>If you want to add global changes to the Visual FoxPro foundation classes, you can modify _base.vcx. Since foundation classes are subclassed from _base.vcx, changes to this class library are automatically propagated to the foundation classes. A common set of methods and properties are provided for all the classes in _base.vcx. However, you can alter the classes in _base.vcx if they add desired behavior to your applications (unlike the foundation classes that we recommend that you do not change). </p>
          <p>Instead of changing _base.vcx, however, you should redefine the classes in _base.vcx to inherit their behavior from your own custom base classes (rather than from the Visual FoxPro base classes currently used). If you already have a custom class library which subclasses the Visual FoxPro base classes, you can redefine the classes in _base.vcx to inherit from your custom classes so that when components use the _base classes they will inherit from your custom classes too. You can use the Class Browser to redefine the parent class for a particular class. </p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>If you redefine the classes to inherit from your own custom base classes, you should add DODEFAULT() calls at appropriate locations if you desire that parent class method code be executed. </p>
          </td></tr></table></div>
          <p>If you replace the entire _base.vcx class with your own, make sure that you have the same set of named classes; otherwise the foundation classes will have missing links.</p>
        </div>
    </sections></div><h1 class="heading"><span id="seeAlsoNoToggle">See Also</span></h1><div id="seeAlsoSection" class="seeAlsoNoToggleSection"><h4 class="subHeading">Reference</h4><span class="linkTerms"><a href="/html/bc9c384e-280d-4c04-abe0-7f7c7c5fea4f.htm">Visual FoxPro Foundation Classes A-Z</a></span><br /><span class="linkTerms"><a href="/html/a6cc61f9-ac6b-4289-8a32-03b674155f60.htm">File Version Foundation Class</a></span><br /><span class="linkTerms"><a href="/html/75c85add-1f57-49f5-9283-12aa3618ea50.htm">About Dialog Box Foundation Class</a></span><br /><span class="linkTerms"><a href="/html/6b36ab7b-f171-427b-81ef-af75341d09f8.htm">Run Form Button Foundation Class</a></span><br /><h4 class="subHeading">Other Resources</h4><span class="linkTerms"><a href="/html/3abe5487-930b-4981-a8e8-1c09f9d7ec32.htm">Foundation Class Samples</a></span><br /><br /></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="Guidelines for Using Visual FoxPro Foundation Classes">
</OBJECT>
