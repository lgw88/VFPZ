<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>Parameters in External Libraries</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">Parameters in External Libraries</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoNoToggle" onclick="OpenSection(seeAlsoNoToggle)">
              See Also
            </a>
          </td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p>You can pass arguments to parameters when Visual FoxPro calls an ActiveX control, COM object, or Visual FoxPro dynamic-link library (FLL). For example, an ActiveX control might accept arguments when calling one of its methods. Similarly, a Visual FoxPro program might call a function in your FLL library and pass arguments to it.</p>
  <div id="sectionSection0" class="seeAlsoNoToggleSection">
      <p>Visual FoxPro can pass arguments to parameters in an external library by value or by reference. By default, the setting of the <b>SET UDFPARMS</b> command is respected. However, other variables, such as arrays or fields, and expressions are passed by value. For information about how to change the default way of passing arguments, see <a href="/html/9937ae10-df44-461f-a7db-64ba43000ca6.htm">Passing Data to Parameters</a>.</p>
      <p>Because ActiveX controls and COM objects are Windows-standard programs, no special mechanism is required to pass arguments from Visual FoxPro to parameters in an ActiveX control or COM object. You can write library code as if it were receiving arguments from any C or C++ program. </p>
      <p>However, functions in an FLL library use the FoxInfo structure to receive data from Visual FoxPro. The FoxInfo structure lists library functions and the number and type of parameters they expect. For example, the following FoxInfo structure belongs to a library with one function, internally called <code>dates</code>, that accepts one Character parameter:</p>
      <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>FoxInfo myFoxInfo[] = {
   { "DATES", (FPFI) dates, 1, "C" }
};</pre></td></tr></table></span></div>
      <p>Functions you define in external libraries actually receive only one parameter, a pointer to the parameter block. This parameter block, defined in the <code>ParamBlk</code> structure, stores all the information about the parameters that were passed from the Visual FoxPro function call. The following code illustrates the format that your function declaration should follow:</p>
      <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>void function_name(ParamBlk *parm)</pre></td></tr></table></span></div>
      <p>For example, the function definition for <code>dates</code> is:</p>
      <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>void dates(ParamBlk *parm)</pre></td></tr></table></span></div>
      <p>The <code>ParamBlk</code> structure consists of an integer that represents the number of parameters, immediately followed by an array of parameter unions. The structure definition is included in Pro_ext.h:</p>
      <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>/* A parameter list to a library function.      */
typedef struct {
   short int pCount;      /* number of parameters passed */
   Parameter p[1];         /* pCount parameters */
} ParamBlk;</pre></td></tr></table></span></div>
      <p>The <code>Parameter</code> typedef included in the <code>ParamBlk</code> structure is a union of a Value structure and a Locator structure. Call by value is handled by a Value structure; call by reference is handled by a Locator structure. You use these structures to access the parameters passed to your function when the function is called in Visual FoxPro.</p>
      <p>The following information is extracted from the file Pro_ext.h and shows the definition of the <code>Parameter</code> type:</p>
      <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>/* A parameter to a library function.         */
typedef union {
   Value val;
   Locator loc;
} Parameter;</pre></td></tr></table></span></div>
    </div><h1 class="heading">Value Structure Definition</h1><div id="sectionSection1" class="seeAlsoNoToggleSection">
      <p>If a parameter is passed to your function by value, use the Value structure to access it. The following <code>Value</code> structure definition is extracted from the Pro_ext.h file:</p>
      <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>// An expression's value.
Typedef struct {
   char         ev_type;
   char         ev_padding;
   short         ev_width;
   unsigned      ev_length;
   long         ev_long;
   double         ev_real;
   CCY         ev_currency;
   MHANDLE      ev_handle;
   ULONG         ev_object;
} Value;</pre></td></tr></table></span></div>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Value Structure Fields</h3><div class="subSection" xmlns="">
          <p>The following table is a guide to the values you can pass and receive in the Value structure for different types of data. Only the structure fields listed for a data type are used for that data type.</p>
          <div class="labelheading"><b>Contents of Value structure for different data types</b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
                <th>
                  Data type
                </th>
                <th>
                  Structure field
                </th>
                <th>
                  Value
                </th>
              </tr><tr>
              <td>
                <p>Character</p>
              </td>
              <td>
                <p>
                  <code>ev_type</code>
                </p>
              </td>
              <td>
                <p>'C'</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_length</code>
                </p>
              </td>
              <td>
                <p>string length</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_handle</code>
                </p>
              </td>
              <td>
                <p>MHANDLE to string</p>
              </td>
            </tr><tr>
              <td>
                <p>Numeric</p>
              </td>
              <td>
                <p>
                  <code>ev_type</code>
                </p>
              </td>
              <td>
                <p>'N'</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_width</code>
                </p>
              </td>
              <td>
                <p>Display width</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_length</code>
                </p>
              </td>
              <td>
                <p>Decimal places</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_real</code>
                </p>
              </td>
              <td>
                <p>Double precision</p>
              </td>
            </tr><tr>
              <td>
                <p>Integer</p>
              </td>
              <td>
                <p>
                  <code>ev_type</code>
                </p>
              </td>
              <td>
                <p>'I'</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_width</code>
                </p>
              </td>
              <td>
                <p>Display width</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_long</code>
                </p>
              </td>
              <td>
                <p>Long integer</p>
              </td>
            </tr><tr>
              <td>
                <p>Date</p>
              </td>
              <td>
                <p>
                  <code>ev_type</code>
                </p>
              </td>
              <td>
                <p>'D'</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_real</code>
                </p>
              </td>
              <td>
                <p>Date<sup>1</sup></p>
              </td>
            </tr><tr>
              <td>
                <p>Date Time</p>
              </td>
              <td>
                <p>
                  <code>ev_type</code>
                </p>
              </td>
              <td>
                <p>'T'</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_real</code>
                </p>
              </td>
              <td>
                <p>Date + (seconds/86400.0)</p>
              </td>
            </tr><tr>
              <td>
                <p>Currency</p>
              </td>
              <td>
                <p>
                  <code>ev_type</code>
                </p>
              </td>
              <td>
                <p>'Y'</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_width</code>
                </p>
              </td>
              <td>
                <p>Display width</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_currency</code>
                </p>
              </td>
              <td>
                <p>Currency value<sup>2</sup></p>
              </td>
            </tr><tr>
              <td>
                <p>Logical</p>
              </td>
              <td>
                <p>
                  <code>ev_type</code>
                </p>
              </td>
              <td>
                <p>'L'</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_length</code>
                </p>
              </td>
              <td>
                <p>0 or 1</p>
              </td>
            </tr><tr>
              <td>
                <p>Memo</p>
              </td>
              <td>
                <p>
                  <code>ev_type</code>
                </p>
              </td>
              <td>
                <p>'M'</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_wdith</code>
                </p>
              </td>
              <td>
                <p>FCHAN</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_long</code>
                </p>
              </td>
              <td>
                <p>Length of memo field</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_real</code>
                </p>
              </td>
              <td>
                <p>Offset of memo field</p>
              </td>
            </tr><tr>
              <td>
                <p>General</p>
              </td>
              <td>
                <p>
                  <code>ev_type</code>
                </p>
              </td>
              <td>
                <p>'G'</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_wdith</code>
                </p>
              </td>
              <td>
                <p>FCHAN</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_long</code>
                </p>
              </td>
              <td>
                <p>Length of general field</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_real</code>
                </p>
              </td>
              <td>
                <p>Offset of general field</p>
              </td>
            </tr><tr>
              <td>
                <p>Object</p>
              </td>
              <td>
                <p>
                  <code>ev_type</code>
                </p>
              </td>
              <td>
                <p>'O'</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_object</code>
                </p>
              </td>
              <td>
                <p>Object identifier</p>
              </td>
            </tr><tr>
              <td>
                <p>Null</p>
              </td>
              <td>
                <p>
                  <code>ev_type</code>
                </p>
              </td>
              <td>
                <p>'0' (zero)</p>
              </td>
            </tr><tr>
              <td>
                <p> </p>
              </td>
              <td>
                <p>
                  <code>ev_long</code>
                </p>
              </td>
              <td>
                <p>Data type</p>
              </td>
            </tr></table></div>
          <p>1. The date is represented as a double-precision floating-point Julian day number calculated using Algorithm 199 from Collected Algorithms of the ACM. 2. The currency value is a long integer, with an implied decimal point in front of the last four digits.</p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p><code>ev_length</code> is the only true indicator of a string's length. The string can't have a null terminator because the string can contain embedded null characters.</p>
          </td></tr></table></div>
        </div>
    </sections></div><h1 class="heading">Locator Structure Definition</h1><div id="sectionSection2" class="seeAlsoNoToggleSection">
      <p>Use the Locator structure to manipulate parameters passed by reference. The following <code>Locator</code> structure definition is extracted from the Pro_ext.h file: </p>
      <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>typedef struct {
  char  l_type;
  short l_where, /* Database number or -1 for memory */
  l_NTI,      /* Variable name table offset*/
  l_offset,  /* Index into database*/
  l_subs,  /* # subscripts specified 0 &lt;= x &lt;= 2 */
  l_sub1, l_sub2; /* subscript integral values */
} Locator;</pre></td></tr></table></span></div>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Locator Structure Fields</h3><div class="subSection" xmlns="">
          <p>The following table is a guide to the fields in the Locator structure.</p>
          <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
                <th>
                  Locator field
                </th>
                <th>
                  Field use
                </th>
              </tr><tr>
              <td>
                <p>
                  <code>l_type</code>
                </p>
              </td>
              <td>
                <p>
                  <code>'R'</code>
                </p>
              </td>
            </tr><tr>
              <td>
                <p>
                  <code>l_where</code>
                </p>
              </td>
              <td>
                <p>The number of the table containing this field, or – 1 for a variable.</p>
              </td>
            </tr><tr>
              <td>
                <p>
                  <code>l_NTI</code>
                </p>
              </td>
              <td>
                <p>Name Table Index. Visual FoxPro internal use.</p>
              </td>
            </tr><tr>
              <td>
                <p>
                  <code>l_offset</code>
                </p>
              </td>
              <td>
                <p>Field number within table. Visual FoxPro internal use.</p>
              </td>
            </tr><tr>
              <td>
                <p>
                  <code>l_subs</code>
                </p>
              </td>
              <td>
                <p>For variables only, the number of subscripts (0 – 2).</p>
              </td>
            </tr><tr>
              <td>
                <p>
                  <code>l_sub1</code>
                </p>
              </td>
              <td>
                <p>For variables only, the first subscript if <code>l_subs</code> is not 0.</p>
              </td>
            </tr><tr>
              <td>
                <p>
                  <code>l_sub2</code>
                </p>
              </td>
              <td>
                <p>For variables only, the second subscript if <code>l_subs</code> is 2.</p>
              </td>
            </tr></table></div>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>It's good programming practice to check for the parameter type in <code>ev_type</code> to help determine which fields to access from the Value structure.</p>
          </td></tr></table></div>
        <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
          <h4 class="subHeading" xmlns="">An Example of Accessing Parameters in an FLL Library</h4><div class="subSection" xmlns="">
              <p>The following example uses <code>_StrCpy( )</code> to return a Character type to Visual FoxPro that's the concatenation of its two Character parameters. Notice that although the handle of each parameter's Value structure is used as working memory to perform the concatenation, changes to this memory allocation don't affect the Visual FoxPro argument that was passed by value.</p>
              <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>#include &lt;Pro_ext.h&gt;
Example(ParamBlk *parm)
{
// make the paramBlk structure easier
// to manage by using #define shortcuts
#define p0 (parm-&gt;p[0].val)
#define p1 (parm-&gt;p[1].val)
// make sure there is enough memory
if (!_SetHandSize(p0.ev_handle, p0.ev_length + p1.ev_length))
   _Error(182); // "Insufficient memory"
// lock the handles
_HLock(p0.ev_handle);
_HLock(p1.ev_handle);
// convert handles to pointers and make sure the 
// strings are null-terminated
((char *)_HandToPtr(p0.ev_handle))[p0.ev_length] = '\0';
((char *)_HandToPtr(p1.ev_handle))[p1.ev_length] = '\0';
// concatenate strings using the API function _StrCpy
_StrCpy((char *)_HandToPtr(p0.ev_handle) + p0.ev_length,
_HandToPtr(p1.ev_handle));
// return the concatenated string to Visual FoxPro
_RetChar(_HandToPtr(p0.ev_handle));
// unlock the handles
_HUnLock(p0.ev_handle);
_HUnLock(p1.ev_handle);
}
FoxInfo myFoxInfo[] = {
   {"STRCAT", Example, 2, "CC"},
};
FoxTable _FoxTable = {
   (FoxTable *) 0, sizeof(myFoxInfo)/sizeof(FoxInfo), myFoxInfo
};</pre></td></tr></table></span></div>
            </div>
        </sections></div>
    </sections></div><h1 class="heading"><span id="seeAlsoNoToggle">See Also</span></h1><div id="seeAlsoSection" class="seeAlsoNoToggleSection"><h4 class="subHeading">Tasks</h4><span class="linkTerms"><a href="/html/9f65d44f-5cd5-407e-bd20-c6a8ca584db9.htm">How to: Add Visual FoxPro API Calls</a></span><br /><span class="linkTerms"><a href="/html/73c38886-0f6a-4f7b-a01e-af8727aa03ca.htm">How to: Return Values from ActiveX Controls and FLL Libraries</a></span><br /><h4 class="subHeading">Reference</h4><span class="linkTerms"><a href="/html/30d2a218-a9d2-42cf-8bd9-d1c05037dd7b.htm">Passing Parameters to Visual FoxPro API Functions</a></span><br /><h4 class="subHeading">Other Resources</h4><span class="linkTerms"><a href="/html/566a1828-db5f-432f-8940-c4dd53c08920.htm">Accessing the Visual FoxPro API</a></span><br /><span class="linkTerms"><a href="/html/941bd4e8-58e8-4353-890d-91a96b8344c0.htm">Extending Visual FoxPro with External Libraries</a></span><br /><span class="linkTerms"><a href="/html/8c8b7a75-75ae-4a31-95ce-5b1ea7fc7a7d.htm">API Library Construction</a></span><br /><br /></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="Parameters in External Libraries">
</OBJECT>
