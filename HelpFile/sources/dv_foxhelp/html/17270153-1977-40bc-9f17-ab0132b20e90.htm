<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>DIMENSION Command</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="collapseImage" style="display:none; height:0; width:0;" alt="Collapse image" src="../local/collapse_all.gif">
      
      
    </img>
    <img id="expandImage" style="display:none; height:0; width:0;" alt="Expand image" src="../local/expand_all.gif">
      
      
    </img>
    <img id="collapseAllImage" style="display:none; height:0; width:0;" alt="CollapseAll image" src="../local/collall.gif">
      
      
    </img>
    <img id="expandAllImage" style="display:none; height:0; width:0;" alt="ExpandAll image" src="../local/expall.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">DIMENSION Command</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> 
									<a href="#codeExampleToggle" onclick="OpenSection(codeExampleToggle)">Example</a></td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" alt="CollapseAll image" src="../local/collall.gif">
                
                
              </img>
              <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">
                Collapse All
              </label>
              <label id="expandAllLabel" for="toggleAllImage" style="display: none;">
                Expand All
              </label> </span>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p>Creates a one-dimensional or two-dimensional array of variables.</p>
    <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
      <p><b>DIMENSION</b> is identical in operation and similar in syntax to the <b>DECLARE</b> command. For more information, see <span class="linkTerms"><a href="/html/446153cb-5971-4802-bc0b-ebaf1baf687e.htm">DECLARE Command</a></span>. </p>
    </td></tr></table></div>
  <div id="syntaxSection" class="section"><div id="syntaxCodeBlocks" class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"></th></tr><tr><td><pre>
DIMENSION <span class="parameter">ArrayName1</span>(<span class="parameter">nRows1</span> [, <span class="parameter">nColumns1</span>]) [AS <span class="parameter">cType</span>]
   [, <span class="parameter">ArrayName2</span>(<span class="parameter">nRows2</span> [, <span class="parameter">nColumns2</span>])] ...</pre></td></tr></table></span></div></div><p /><h4 class="subHeading">Parameters</h4>
    
      <dl><dt><span class="nonLinkTerms">
          <span class="parameter">ArrayName1</span>
        </span></dt><dd>
          <p>Specifies the name of the array. </p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Tip </th></tr><tr><td>
            <p>You can create multiple arrays with a single <b>DIMENSION</b> command by including additional array names, for example, <span class="parameter">ArrayName2</span>, <span class="parameter">ArrayName3</span>, and so on.</p>
          </td></tr></table></div>
        </dd></dl><dl><dt><span class="nonLinkTerms">
          <span class="parameter">nRows1 </span>[, <span class="parameter">nColumns1</span>] </span></dt><dd>
          <p>Specifies the size of the array to create. </p>
          <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
            <p>You must specify a size for each array you create with <b>DIMENSION</b>. Array sizes can be limited by available memory, which affects performance, especially for very large arrays. Make sure your computer has enough memory to accommodate the upper limits of your arrays.</p>
          </td></tr></table></div>
          <p>To create a one-dimensional array, include only <span class="parameter">nRows1</span>. In this scenario, <b>DIMENSION</b> uses <span class="parameter">nRows1</span> to create the number of rows in a one-dimensional array with a single column. For example, the following command creates a one-dimensional array named <code>gaArrayOne</code> that contains ten rows and one column:   </p>
          <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>DIMENSION gaArrayOne(10)</pre></td></tr></table></span></div>
          <p>To create a two-dimensional array, include both <span class="parameter">nRows1</span> and <span class="parameter">nColumns1</span>. In this scenario, <span class="parameter">nRows1</span> specifies the number of rows in the array, and <span class="parameter">nColumns1</span> specifies the number of columns. The following example creates a two-dimensional array named <code>gaArrayTwo</code> containing two rows and four columns:   </p>
          <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>DIMENSION gaArrayTwo(2,4)</pre></td></tr></table></span></div>
        </dd></dl><dl><dt><span class="nonLinkTerms">AS <span class="parameter">cType</span></span></dt><dd>
          <p>Specifies a data type for the array. Using the <b>AS </b> <span class="parameter">cType</span> clause, you can define and specify a data type other than <b>Variant</b> for arrays. The <b>AS </b> <span class="parameter">cType</span> syntax does not appear in IntelliSense during design time; it is meant for use only at run time. For an example, see Example 4 in the Example section.</p>
          <p>The <b>AS </b> <span class="parameter">cType</span> clause applies only when passing an array to a COM component. Otherwise, Visual FoxPro disregards the <b>AS </b> <span class="parameter">cType</span> clause. If you specify a data type that is not a valid COM data type, Visual FoxPro automatically defaults to <b>VARIANT</b> type. Data specified as <b>VARIANT</b> can only be passed by reference and not by strongly typed values.    </p>
          <p>The following table lists valid COM type mappings.   </p>
          <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
                <th>
                  VFP defined type
                </th>
                <th>
                  IntelliSense Quick Info
                </th>
                <th>
                  COM friendly name
                </th>
                <th>
                  COM Typelib
                </th>
                <th>
                  .NET system type
                </th>
                <th>
                  XSD (SOAP) type
                </th>
              </tr><tr>
              <td>
                <p>Boolean</p>
              </td>
              <td>
                <p>Logical</p>
              </td>
              <td>
                <p>Boolean</p>
              </td>
              <td>
                <p>VARIANT_BOOL (VT_BOOL)</p>
              </td>
              <td>
                <p>System.Boolean</p>
              </td>
              <td>
                <p>boolean</p>
              </td>
            </tr><tr>
              <td>
                <p>Byte</p>
              </td>
              <td>
                <p>Number</p>
              </td>
              <td>
                <p>Byte</p>
              </td>
              <td>
                <p>unsigned char (VT_UI1)</p>
              </td>
              <td>
                <p>System.Byte</p>
              </td>
              <td>
                <p> </p>
              </td>
            </tr><tr>
              <td>
                <p>Character *</p>
              </td>
              <td>
                <p>String</p>
              </td>
              <td>
                <p>String</p>
              </td>
              <td>
                <p>BSTR (VT_BSTR)</p>
              </td>
              <td>
                <p>System.String</p>
              </td>
              <td>
                <p>string</p>
              </td>
            </tr><tr>
              <td>
                <p>Currency *</p>
              </td>
              <td>
                <p>Currency</p>
              </td>
              <td>
                <p>Currency</p>
              </td>
              <td>
                <p>CURRENCY (VT_CY)</p>
              </td>
              <td>
                <p> </p>
              </td>
              <td>
                <p> </p>
              </td>
            </tr><tr>
              <td>
                <p>Date</p>
              </td>
              <td>
                <p>Date</p>
              </td>
              <td>
                <p>Date</p>
              </td>
              <td>
                <p>DATE (VT_DATE)</p>
              </td>
              <td>
                <p>System.DateTime</p>
              </td>
              <td>
                <p>dateTime</p>
              </td>
            </tr><tr>
              <td>
                <p>DateTime</p>
              </td>
              <td>
                <p>Date</p>
              </td>
              <td>
                <p>Date</p>
              </td>
              <td>
                <p>DATE (VT_DATE)</p>
              </td>
              <td>
                <p>System.DateTime</p>
              </td>
              <td>
                <p>dateTime</p>
              </td>
            </tr><tr>
              <td>
                <p>Decimal *</p>
              </td>
              <td>
                <p>Number</p>
              </td>
              <td>
                <p> </p>
              </td>
              <td>
                <p>wchar_t (VT_DECIMAL)</p>
              </td>
              <td>
                <p>System.UInt16</p>
              </td>
              <td>
                <p> </p>
              </td>
            </tr><tr>
              <td>
                <p>Double</p>
              </td>
              <td>
                <p>Number</p>
              </td>
              <td>
                <p>Double</p>
              </td>
              <td>
                <p>double (VT_R8)</p>
              </td>
              <td>
                <p>System.Double</p>
              </td>
              <td>
                <p>double</p>
              </td>
            </tr><tr>
              <td>
                <p>Float</p>
              </td>
              <td>
                <p> </p>
              </td>
              <td>
                <p>Variant</p>
              </td>
              <td>
                <p>VARIANT (VT_VARIANT)</p>
              </td>
              <td>
                <p>System.Object</p>
              </td>
              <td>
                <p>anyType</p>
              </td>
            </tr><tr>
              <td>
                <p>Integer</p>
              </td>
              <td>
                <p>Number</p>
              </td>
              <td>
                <p>Long</p>
              </td>
              <td>
                <p>long (VT_I4)</p>
              </td>
              <td>
                <p>System.Int32</p>
              </td>
              <td>
                <p>int</p>
              </td>
            </tr><tr>
              <td>
                <p>Logical</p>
              </td>
              <td>
                <p>Logical</p>
              </td>
              <td>
                <p>Boolean</p>
              </td>
              <td>
                <p>VARIANT_BOOL (VT_BOOL)</p>
              </td>
              <td>
                <p>System.Boolean</p>
              </td>
              <td>
                <p>boolean</p>
              </td>
            </tr><tr>
              <td>
                <p>Long</p>
              </td>
              <td>
                <p>Number</p>
              </td>
              <td>
                <p>Long</p>
              </td>
              <td>
                <p>long (VT_I4)</p>
              </td>
              <td>
                <p>System.Int32</p>
              </td>
              <td>
                <p>int</p>
              </td>
            </tr><tr>
              <td>
                <p>Memo</p>
              </td>
              <td>
                <p> </p>
              </td>
              <td>
                <p>Variant</p>
              </td>
              <td>
                <p>VARIANT (VT_VARIANT)</p>
              </td>
              <td>
                <p>System.Object</p>
              </td>
              <td>
                <p>anyType</p>
              </td>
            </tr><tr>
              <td>
                <p>Number</p>
              </td>
              <td>
                <p>Number</p>
              </td>
              <td>
                <p>Double</p>
              </td>
              <td>
                <p>double (VT_R8)</p>
              </td>
              <td>
                <p>System.Double</p>
              </td>
              <td>
                <p>double</p>
              </td>
            </tr><tr>
              <td>
                <p>Object</p>
              </td>
              <td>
                <p>Object</p>
              </td>
              <td>
                <p>Object</p>
              </td>
              <td>
                <p>IDispatch* (VT_DISPATCH)</p>
              </td>
              <td>
                <p>System.Object</p>
              </td>
              <td>
                <p> </p>
              </td>
            </tr><tr>
              <td>
                <p>Short</p>
              </td>
              <td>
                <p>Number</p>
              </td>
              <td>
                <p>Long</p>
              </td>
              <td>
                <p>long (VT_I4)</p>
              </td>
              <td>
                <p>System.Int32</p>
              </td>
              <td>
                <p>int</p>
              </td>
            </tr><tr>
              <td>
                <p>Single *</p>
              </td>
              <td>
                <p>Number</p>
              </td>
              <td>
                <p>Single</p>
              </td>
              <td>
                <p>single (VT_R4)</p>
              </td>
              <td>
                <p>System.Single</p>
              </td>
              <td>
                <p> </p>
              </td>
            </tr><tr>
              <td>
                <p>String</p>
              </td>
              <td>
                <p>String</p>
              </td>
              <td>
                <p>String</p>
              </td>
              <td>
                <p>BSTR (VT_BSTR)</p>
              </td>
              <td>
                <p>System.String</p>
              </td>
              <td>
                <p>string</p>
              </td>
            </tr><tr>
              <td>
                <p>Variant</p>
              </td>
              <td>
                <p> </p>
              </td>
              <td>
                <p>Variant</p>
              </td>
              <td>
                <p>VARIANT (VT_VARIANT)</p>
              </td>
              <td>
                <p>System.Object</p>
              </td>
              <td>
                <p>anyType</p>
              </td>
            </tr><tr>
              <td>
                <p>Void</p>
              </td>
              <td>
                <p>VOID</p>
              </td>
              <td>
                <p>Void</p>
              </td>
              <td>
                <p>void (VT_VOID)</p>
              </td>
              <td>
                <p>System.IntPtr</p>
              </td>
              <td>
                <p> </p>
              </td>
            </tr><tr>
              <td>
                <p>Array</p>
              </td>
              <td>
                <p>Array</p>
              </td>
              <td>
                <p> </p>
              </td>
              <td>
                <p>SAFEARRAY(type)</p>
              </td>
              <td>
                <p>Type[]</p>
              </td>
              <td>
                <p>Base64Binary</p>
              </td>
            </tr></table></div>
        </dd></dl>
    
  <h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle)" tabindex="0"><img id="remarksToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="display: none;">
    
      <p>You can use either brackets or parentheses to enclose expressions in <b>DIMENSION</b>. For example, the following two lines of code create identical arrays:</p>
      <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>DIMENSION gaArrayOne(10), gaArrayTwo[2,4], gaArrayThree(3,3)
DIMENSION gaArrayOne[10], gaArrayTwo(2,4), gaArrayThree[3,3]</pre></td></tr></table></span></div>
      <p>
        <b>Array Elements</b>   The size of an array determines how many elements the array contains. Each array element can store a single piece of information. To determine the total number of elements an array contains, multiply the number of rows (<span class="parameter">nRows1</span>) in the array by the number of columns (<span class="parameter">nColumns1</span>) in the array.</p>
      <p>Array elements can contain any type of data and are initialized to False (.F.) when the array is first created. You can initialize all the elements in an array to the same value with the <b>STORE</b> command if the <b>SET</b> <b>COMPATIBLE</b> command is set to <b>FOXPLUS</b> or <b>OFF</b> (default). The following example stores the string "initial" to all the elements in the array gaArray:</p>
      <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>DIMENSION gaArray(10,3)
STORE 'initial' TO gaArray</pre></td></tr></table></span></div>
      <p>For more information about limits on the number of elements in arrays, see <span class="linkTerms"><a href="/html/6e27027b-806b-4f96-b7e5-5f24af2901e0.htm">Visual FoxPro System Capacities</a></span>.</p>
      <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
        <p>Visual FoxPro arrays are one-based - the first element, row, or column of an array is specified with the number 1. (Arrays in other programming languages may be zero-based; the first element, row, or column of an array is specified with the number 0.)</p>
      </td></tr></table></div>
      <p>
        <b>Array Subscripts</b>   You can access and manipulate specific elements in an array by using the array name and array subscripts, or indexes. An array subscript is a unique number that identifies the position of the element in the array. The subscript or subscripts for the first element in an array is always 1. </p>
      <p>If the array is one-dimensional, the array uses one subscript to identify the row number of the array. For example, the subscript for the element in the third row of a one-dimensional array is 3. </p>
      <p>If the array is two-dimensional, the array uses two subscripts to identify elements in the array. The first subscript indicates the row location of the element, and the second subscript indicates the column location. For example, the subscripts for the element in the third row and fourth column of a two-dimensional array are (3,4). You can also reference two-dimensional arrays using a single subscript. </p>
      <p>To return the single subscript from a pair of array row and column subscripts, use <b>AELEMENT( )</b>. To return the row and column subscripts from a single subscript, use <b>ASUBSCRIPT( )</b> function.</p>
      <p>For more information about subscripts, see <span class="linkTerms"><a href="/html/76044ae8-3278-4aad-82ce-47f7eaaf23fe.htm">ASUBSCRIPT( ) Function</a></span>.</p>
      <p>
        <b>Redimensioning Arrays</b>   You can change the size and dimensions of an array by calling <b>DIMENSION</b> again. The size of an array can be increased or decreased; one-dimensional arrays can be converted to two dimensions, and two-dimensional arrays can be reduced to one dimension.</p>
      <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
        <p>If a two-dimensional array is redimensioned with fewer rows or columns, the number of elements is decreased by element number, not by row or column number. For example, a 10 by 10 array redimensioned to 10 by 7 loses all element data for elements 71 and higher. For more information, see <span class="linkTerms"><a href="/html/8593614e-fdfa-46da-bae8-ea7e85e3c412.htm">AELEMENT( ) Function</a></span>.</p>
      </td></tr></table></div>
      <p>If the number of elements in an array is increased, the contents of all the elements in the original array are copied to the newly redimensioned array. The additional array elements are initialized to False (.F.).</p>
      <p>When the size of an array is increased or decreased when <b>SET COMPATIBLE</b> is set to <b>ON</b> or <b>DB4</b>, the value of each element in the array is reinitialized to .F.</p>
      <p>
        <b>Typed Arrays</b>   You can pass a typed array by reference or by value. You should not explicitly specify Visual FoxPro objects, such as <b>CommandButton</b>. Instead, use <b>Object</b>:</p>
      <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>DIMENSION aObjects[] AS CommandButton   &amp;&amp; Not supported
DIMENSION aObjects[] AS Object   &amp;&amp; Recommended</pre></td></tr></table></span></div>
      <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
        <p>If the COM server is a Visual FoxPro server, you can specify a valid Visual FoxPro object. However, non Visual FoxPro servers will not recognize this type.</p>
      </td></tr></table></div>
      <p>You should use <b>COMARRAY( )</b> to control other settings for how arrays are passed to COM servers, for example, zero-based, byref, and so on. </p>
      <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
        <p>When passing arrays to servers running the Microsoft .NET Framework, you must explicitly call <code>COMARRAY(&lt;object&gt;, 10) </code>to pass a zero-based array by reference. The interop marshaling code provided by the .NET Framework expects a byref array but receives a byval array instead and fails.</p>
      </td></tr></table></div>
      <p>Typed arrays of Single (scaler) are not supported for COM servers other than Visual FoxPro COM servers. You cannot pass Currency types to servers running the Microsoft .NET Framework.</p>
      <p>When servers running the Microsoft .NET Framework return <span class="parameter">System.Decimal</span> and <span class="parameter">System.UInt16</span> types, they are converted to <span class="parameter">wchart_t</span>, which maps to the Visual FoxPro Decimal data type.</p>
    
  </div><h1 class="heading"><span onclick="ExpandCollapse(codeExampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(codeExampleToggle)" tabindex="0"><img id="codeExampleToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Example</span></h1><div id="codeExampleSection" class="section" name="collapseableSection" style="display: none;">
    
      
      
      <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
        <h3 class="subHeading" xmlns="">Example 1</h3><div class="subSection" xmlns="">
            <p>The following example demonstrates the result of increasing the size of a one-dimensional array. </p>
            <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
              <p>If you type these commands in the Command window, the array will be PUBLIC. However, the array will be PRIVATE if you copy them into a program and run it.</p>
            </td></tr></table></div>
            <p>If the number of elements in an array is decreased, the elements and any data they contain are deleted. When a one-dimensional array is redimensioned to two dimensions, the contents of the original one-dimensional array are copied to the new array in an element-to-row order.</p>
            <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>DIMENSION marray(2)
STORE 'A' TO marray(1)
STORE 'B' TO marray(2)
CLEAR
DISPLAY MEMORY LIKE marray
DIMENSION marray(4)
DISPLAY MEMORY LIKE marray
WAIT WINDOW</pre></td></tr></table></span></div>
          </div>
        <h3 class="subHeading" xmlns="">Example 2</h3><div class="subSection" xmlns="">
            <p>In the following example, a one-dimensional array is converted to a two-dimensional array. The contents of the elements of the one-dimensional array are copied to the first row of the new array, followed by the second row and so on. The additional elements are initialized to False (.F.).</p>
            <p>When a two-dimensional array is converted to one dimension, the contents of the original two-dimensional array are copied to the new array in a row-to-element order. The first element in the first row becomes the first element in the one-dimensional array, the second element in the first row becomes the second element, and so on.</p>
            <p>Use ADEL( ) or AINS( ) to delete or insert array elements, rows and columns. Use APPEND FROM ARRAY, COPY TO ARRAY, SCATTER, and GATHER to transfer data between table records and arrays.</p>
            <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>DIMENSION marrayone(4)
STORE 'E' TO marrayone(1)
STORE 'F' TO marrayone(2)
STORE 'G' TO marrayone(3)
STORE 'H' TO marrayone(4)
CLEAR
DISPLAY MEMORY LIKE marrayone
DIMENSION marrayone(2,3)
DISPLAY MEMORY LIKE marrayone
WAIT WINDOW</pre></td></tr></table></span></div>
          </div>
        <h3 class="subHeading" xmlns="">Example 3</h3><div class="subSection" xmlns="">
            <p>In the following example, a two-dimensional array is created and loaded with data. The array elements and the data they contain are displayed.</p>
            <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>DIMENSION sample(2,3)
STORE 'Goodbye' TO sample(1,2)
STORE 'Hello' TO sample(2,2)
STORE 99 TO sample(6)
STORE .T. TO sample(1)
CLEAR
DISPLAY MEMORY LIKE sample</pre></td></tr></table></span></div>
          </div>
        <h3 class="subHeading" xmlns="">Example 4</h3><div class="subSection" xmlns="">
            <p>In the following example, an array is created in Visual FoxPro and is then passed by reference to a Visual Basic COM server, which expects a strong type of Long. Previously, calling <b>FillIntArray</b> would fail because <code>aMyArray</code> has <b>Variant</b> type. However, after including a definition in the Visual Basic class that defines the array as type <b>Variant</b>, calling <b>FillIntArray</b> works as shown:</p>
            <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>* Visual FoxPro code
DIMENSION aMyArray [10] AS Long
lo.FillIntArray(@aMyArray, 100)   &amp;&amp; Passing to Visual Basic COM Server
' Add following Visual Basic code to .CLS file and compile 
' to COM component
Public Sub FillIntArray(ByRef aInts() As Long, iCount As Long)
   ReDim aInts(1 to 100)
   Dim ii As Interger
   For ii = 1 to 100
      AInts(ii) = ii
   Next
End Sub</pre></td></tr></table></span></div>
          </div>
      </sections>
    
  </div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle)" tabindex="0"><img id="seeAlsoToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style="display: none;"><h4 class="subHeading">Reference</h4><span class="linkTerms"><a href="/html/281f8451-8f91-4ea4-a750-b6484cb4c148.htm">ADEL( ) Function</a></span><br /><span class="linkTerms"><a href="/html/8593614e-fdfa-46da-bae8-ea7e85e3c412.htm">AELEMENT( ) Function</a></span><br /><span class="linkTerms"><a href="/html/58867a98-4899-4436-abae-6ee6a07c7a52.htm">AINS( ) Function</a></span><br /><span class="linkTerms"><a href="/html/8496659e-83b9-4e08-847b-f93b1e791ee5.htm">ALEN( ) Function</a></span><br /><span class="linkTerms"><a href="/html/76044ae8-3278-4aad-82ce-47f7eaaf23fe.htm">ASUBSCRIPT( ) Function</a></span><br /><span class="linkTerms"><a href="/html/446153cb-5971-4802-bc0b-ebaf1baf687e.htm">DECLARE Command</a></span><br /><span class="linkTerms"><a href="/html/6602c8f4-1081-4209-9b72-75101f6a1fa0.htm">EXTERNAL Command</a></span><br /><span class="linkTerms"><a href="/html/bb1bfa3c-23f2-49b1-92c6-115b9abce375.htm">PRIVATE Command</a></span><br /><span class="linkTerms"><a href="/html/684369d5-737d-4d42-b018-12f34634cbbc.htm">PUBLIC Command</a></span><br /><span class="linkTerms"><a href="/html/8c7e7c9d-337c-434d-ba96-ea6796b454bb.htm">SET COMPATIBLE Command</a></span><br /><br /></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="DIMENSION Command">
<param name="ALink Name" value="DIMENSION">
</OBJECT>
