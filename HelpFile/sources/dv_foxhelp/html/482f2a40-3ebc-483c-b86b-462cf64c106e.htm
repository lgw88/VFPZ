<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>@ ... GET - Check Boxes Command</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="collapseImage" style="display:none; height:0; width:0;" alt="Collapse image" src="../local/collapse_all.gif">
      
      
    </img>
    <img id="expandImage" style="display:none; height:0; width:0;" alt="Expand image" src="../local/expand_all.gif">
      
      
    </img>
    <img id="collapseAllImage" style="display:none; height:0; width:0;" alt="CollapseAll image" src="../local/collall.gif">
      
      
    </img>
    <img id="expandAllImage" style="display:none; height:0; width:0;" alt="ExpandAll image" src="../local/expall.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">@ ... GET - Check Boxes Command</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> 
									</td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" alt="CollapseAll image" src="../local/collall.gif">
                
                
              </img>
              <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">
                Collapse All
              </label>
              <label id="expandAllLabel" for="toggleAllImage" style="display: none;">
                Expand All
              </label> </span>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p> </p>
  <div id="sectionSection0" class="seeAlsoNoToggleSection">
      <p>Included for backward compatibility. Use the <a href="/html/519bc0b5-941f-43f3-a870-54d9eb16e5a6.htm">CheckBox Control</a> instead.</p>
    </div>
<!-- VFPX FPW2.6 begin -->
	<p class="vfpx">This command is undocumented in the original VFP9 help file, <br />but the following documentation was found in the FoxPro for Windows 2.6 help, and may still be valid:<br /></p>
	<p />
	<p>Creates a check box or a picture check box.</p>
	<div id="syntaxSection" class="section">
		<div id="syntaxCodeBlocks" class="code">
			<span codeLanguage="other">
				<table width="100%" cellspacing="0" cellpadding="0">
				<tr>
					<th align="left"></th>
				</tr>
				<tr>
					<td>
					<pre>@ <span class="parameter">row, column</span> 
GET <span class="parameter">memvar</span> | <span class="parameter">field</span>
FUNCTION <span class="parameter">expC1</span> | PICTURE <span class="parameter">expC2</span>
	[FONT <span class="parameter">expC3</span> [, <span class="parameter">expN1</span>]]
	[STYLE <span class="parameter">expC4</span>]
	[DEFAULT <span class="parameter">expr</span>]
	[SIZE <span class="parameter">expN2</span>, <span class="parameter">expN3</span>]
	[ENABLE | DISABLE]
	[MESSAGE <span class="parameter">expC5</span>]
	[VALID <span class="parameter">expL1</span> | <span class="parameter">expN4</span>]
	[WHEN <span class="parameter">expL2</span>]
	[COLOR SCHEME <span class="parameter">expN5</span> 
	| COLOR <span class="parameter">color pair list</span>]</pre>
					</td>
				<tr>
				</table>
			</span>
		</div>
	</div>
	<p />
	<h4 class="subHeading">Parameters</h4>
<span class="nonLinkTerms"><span class="parameter">row, column</span></span><br />
&nbsp;Row and column are numeric expressions with values 0 or greater that determine where the check box appears. <br />
<br />
&nbsp;The first row is number 0 in the main FoxPro window or a user-defined window. Rows are numbered from top to bottom. In FoxPro for Windows, row 0 is the row immediately under the FoxPro system menu bar. In FoxPro for Macintosh, row 0 is the row immediately under the FoxPro title bar. In FoxPro for MS-DOS, row 0 is the row the FoxPro system menu bar occupies. See SET SYSMENU for information about manipulating the system menu bar so you can place output on row 0 in FoxPro for MS-DOS. <br />
<br />
&nbsp;The first column is number 0 in the main FoxPro window or a user-defined window. Columns are numbered from left to right. <br />
<br />
&nbsp;When the check box is directed to a user-defined window, the row and column coordinates are relative to the user-defined window, not the main FoxPro window. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, a position in the main FoxPro window or in a user-defined window is determined by the font of the main FoxPro window or the user-defined window. Most fonts can be displayed in a wide variety of sizes, and some are proportionally spaced. A row corresponds to the height of the current font; a column corresponds to the average width of a letter in the current font. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, you can position the check box in a window with decimal fractions for row and column coordinates. In FoxPro for MS-DOS, decimal fractions used for row and column coordinates are rounded to the nearest integer value.<br />
<br />
<span class="nonLinkTerms"><span class="parameter">memvar</span></span> | <span class="parameter">field</span><br />
&nbsp;When you check or uncheck a check box, your choice is stored to a memory variable, an array element or a field, which you specify with <span class="parameter">memvar</span> or <span class="parameter">field</span>. The <span class="parameter">memvar</span> or <span class="parameter">field</span> must be of numeric or logical type. <br />
<br />
&nbsp;When a check box is initially displayed on the screen or in a window, the box is checked if <span class="parameter">memvar</span> or <span class="parameter">field</span> contains a nonzero numeric value or a true (.T.) value. The box isn't checked if <span class="parameter">memvar</span> or <span class="parameter">field</span> is zero or false (.F.).<br />
<br />
&nbsp;READ or READ CYCLE activates the check box. The state of the check box when the READ is terminated determines the value stored to the memory variable, array element or field1 or .T. if checked and 0 or .F. if unchecked.<br />
<br />
<span class="nonLinkTerms">FUNCTION <span class="parameter">expC1</span> | PICTURE <span class="parameter">expC2</span><br /></span>
&nbsp;When creating a check box, you must include the FUNCTION clause, the PICTURE clause or both. There is no advantage for any of the three methods. The FUNCTION clause or the PICTURE clause contains the check box specification code *C.<br />
<br />
&nbsp;The FUNCTION clause character expression <span class="parameter">expC1</span> must begin with *C. To create the prompt, include a space after *C followed by the text of the prompt. For example, this clause creates a check box with the prompt Titles:<br />
<br />
&nbsp;... FUNCTION '*C Titles' ... <br />
<br />
&nbsp;The PICTURE clause character expression <span class="parameter">expC2</span> uses the same syntax as the FUNCTION clause character expression, except the PICTURE clause expression must begin with @ followed by *C. For example, this clause creates a check box with the prompt Titles: <br />
<br />
&nbsp;... PICTURE '@*C Titles' ... <br />
<br />
&nbsp;You can also include both the FUNCTION and PICTURE clauses to create a check box. If both are included, the FUNCTION character expression <span class="parameter">expC1</span> must contain *C to create the check box. The PICTURE character expression <span class="parameter">expC2</span> must include the prompt. For example:<br />
<br />
&nbsp;... FUNCTION '*C' PICTURE 'Titles' ... <br />
<br />
&nbsp;The following examples illustrate the various forms of syntax you can use to create a check box. In all the examples, the check box is placed in the second row and column. The state of the box (checked or unchecked) is stored to the memory variable MCHOICE. Each example creates the same check box.<br />
<br />
&nbsp;FUNCTION clause only:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*C Titles'<br />
&nbsp;READ<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;STORE '*C Titles' TO mprompt<br />
&nbsp;@ 2,2 GET mchoice FUNCTION mprompt<br />
&nbsp;READ<br />
<br />
&nbsp;PICTURE clause only:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice PICTURE '@*C Titles'<br />
&nbsp;READ<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice PICTURE '@*C' + ' Titles'<br />
&nbsp;READ<br />
<br />
&nbsp;FUNCTION and PICTURE clauses:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*C' PICTURE ' Titles'<br />
&nbsp;READ<br />
<br />
<span class="nonLinkTerms">Picture Check Boxes<br /></span>
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, the prompt for a check box can also be the name of a picture file. In FoxPro for Windows, the picture file can be a BMP bitmap file. In FoxPro for Macintosh, you can use a picture file of PICT type or a BMP bitmap file.<br />
<br />
&nbsp;When a check box uses a picture file for a prompt, the check box mimics the behavior of a check box with a text prompt. For example, the picture file is displayed but the check box isn't displayed. Like checking a check box, choosing the picture toggles the value of <span class="parameter">memvar</span> or <span class="parameter">field</span> between .T. and .F. or 1 and 0. <br />
<br />
&nbsp;To use a picture file in a check box, add B to the check box specification code. The FUNCTION and PICTURE clause specification codes that create a check box are *C or @*C, respectively. To create a check box with picture prompts, use the codes *CB and @*CB, followed by a space and the picture filename. If the picture file is not located in the default directory or folder, include the path to the picture file with the picture filename.<br />
<br />
&nbsp;-------------------------------<br />
&nbsp;Note   The pictures aren't clipped, reduced or enlarged to fit the check box button. Use the SIZE clause to adjust the size of the check box button to accommodate the picture.<br />
&nbsp;-------------------------------<br />
<br />
&nbsp;If you omit the extension for the picture file, FoxPro for Macintosh first looks for a picture file with the name you specified and a .BMP extension. If a picture file with a .BMP extension and the name you specified isn't found, FoxPro for Macintosh then looks for a file with the name you specified and a .PCT extension. If a picture file with a .PCT extension and the name you specified isn't found, FoxPro for Macintosh then looks for a picture file with the name you specified without an extension.<br />
<br />
<span class="nonLinkTerms">Picture Masks and Check Boxes<br /></span>
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, a picture check box has three states: up, down and disabled. FoxPro automatically controls the appearance of a picture check box when it is in each of these three states, but you can override the default appearance by using a picture mask. <br />
<br />
&nbsp;A mask is used to control the transparent areas of a picture check box. By default, the white areas are transparent. If a mask is present, the white areas of the mask, not the picture file, are transparent. <br />
<br />
&nbsp;A mask is a monochrome picture file. In FoxPro for Windows, a mask is a .BMP with an .MSK extension. In FoxPro for Macintosh, a mask can be a .BMP with an .MSK extension or a PICT type file with a .PCM extension. The mask must have the same base name as the picture file and the appropriate extension. FoxPro automatically looks for a mask for a picture file in the same directory or folder where the picture file is located. <br />
<br />
&nbsp;In most cases, a mask isn't necessary. If you don't need anything in your picture to appear white and your picture file has a white background, the picture check box will appear as desired in the up, down and disabled states.<br />
<br />
&nbsp;When a picture check box has a mask and is in the up or down state, any white areas in the picture appear transparent, allowing the color of the button face to show through. However, you can maintain the white color of certain areas. <br />
<br />
&nbsp;Suppose that you have a picture with a dog on a white background; the dog has white eyes and the button face is red. You want the background of the button to appear red but you want the dog's eyes to be white, not red. Make a mask that is the same size as the picture file but includes only two colors, black and white. Leave the background of the mask white but make the dog - including his eyes - completely black. When the button is displayed, the background is red to match the button face but the dog's eyes are white.<br />
<br />
&nbsp;When a picture check box is disabled, any white areas in the picture file appear transparent so the color of the button face shows through. Any non-white areas appear dark gray. If the button has a mask, all white areas in the mask are transparent so the color of the button face shows through, and all black areas appear dark gray.<br />
<br />
<span class="nonLinkTerms">PICTURE and FUNCTION Options N, T, 2 and 3<br /></span>
&nbsp;Additional options can be combined with  the *C specification codes in the FUNCTION or PICTURE clause to modify the behavior (N and T) and appearance (2 and 3) of check boxes.<br />
<br />
&nbsp;The 2 (two-dimensional) and 3 (three-dimensional) specification codes are only available in FoxPro for Macintosh.<br />
<br />
&nbsp;Option&nbsp;Description<br />
&nbsp;------&nbsp;-----------<br />
<br />
&nbsp;   N&nbsp;Does not terminate the READ when the box is chosen. This is the default behavior.<br />
<br />
&nbsp;   T&nbsp;Terminates the READ when the box is chosen. <br />
<br />
&nbsp;   2&nbsp;Creates a flat (two-dimensional) check box identical to check boxes in Macintosh dialogs. This is the default check box type in FoxPro for Macintosh.<br />
<br />
&nbsp;   3&nbsp;Creates a three-dimensional check box identical to check boxes in FoxPro for Macintosh dialogs.<br />
<br />
&nbsp;For example, the following clause creates a check box and doesn't cause the READ to terminate when the check box is chosen:<br />
<br />
&nbsp;... FUNCTION '*CN ... '<br />
<br />
&nbsp;In FoxPro for Macintosh, the following clause creates a three-dimensional check box and doesn't cause the READ to terminate when the check box is chosen:<br />
<br />
&nbsp;... FUNCTION '*CN3 ... '<br />
<br />
<span class="nonLinkTerms">Check Boxes with Special Features <br /></span>
&nbsp;You can assign a hot key to the check box or disable the check box by including special characters when defining the prompt. <br />
<br />
<span class="nonLinkTerms">Hot Keys<br /></span>
&nbsp;A hot key allows you to immediately choose or change the state of the check box. To assign a hot key, place a backslash and a less-than sign (\&lt;) before the desired character of the check box prompt. The hot key is a highlighted character (FoxPro for MS-DOS) or an underlined character (FoxPro for Windows). In FoxPro for Macintosh, if KEYCOMP is set to MAC (the default), the hot key isn't highlighted or underlined; if KEYCOMP is set to DOS or WINDOWS the hot key is underlined.<br />
<br />
&nbsp;-------------------------------<br />
&nbsp;Note - A hot key doesn't choose the check box if the current object is an @ ... GET input field, a text-editing region, a popup or a list. <br />
&nbsp;-------------------------------<br />
<br />
&nbsp;If the current object is an @ ...GET input field or a text-editing region, pressing the hot key enters the corresponding letter in the field or the text-editing region. If the current object is a popup or a scrollable list, pressing the hot key selects the first option in the popup or list whose prompt begins with the letter corresponding to the hot key. <br />
<br />
&nbsp;-------------------------------<br />
&nbsp;Note - Note   In FoxPro for Windows, if the current object is an @ ... GET input field, text-editing region, popup or list and KEYCOMP is set to WINDOWS, you can press Alt and the hot key to move to the check box and choose it. If you create a picture check box, you cannot create a hot key for the picture check box.<br />
&nbsp;-------------------------------<br />
<br />
&nbsp;The following example creates a check box with the prompt Titles and assigns the hot key T to it:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*C' PICTURE ' \&lt;Titles'<br />
&nbsp;READ<br />
<br />
<span class="nonLinkTerms">Disabled Check Boxes<br /></span>
&nbsp;A disabled check box cannot be selected or chosen and is displayed in disabled colors. To disable a check box, place two backslashes (\\) before the check box prompt or use the DISABLE clause. The following example disables the check box created earlier:<br />
<br />
&nbsp;STORE 1 TO mchoice1, mchoice2, mchoice3<br />
&nbsp;@ 2,2 GET mchoice1 FUNCTION '*C \\Titles'<br />
&nbsp;@ 4,2 GET mchoice2 FUNCTION '*C Titles' DISABLE<br />
&nbsp;@ 6,2 GET mchoice3 FUNCTION '*C Titles' <br />
&nbsp;READ<br />
<br />
<span class="nonLinkTerms">FONT <span class="parameter">expC3</span> [, <span class="parameter">expN1</span>]<br /></span>
&nbsp;Include FONT to specify a font and font size for the check box prompt. The character expression <span class="parameter">expC3</span> is the name of the font, and the numeric expression <span class="parameter">expN1</span> is the font size. For example, the following command displays the prompt in 16-point Courier font:<br />
<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*C Titles' DEFAULT 1 ;<br />
&nbsp;&nbsp;FONT 'Courier',16 <br />
<br />
&nbsp;If you include the FONT clause but omit the font size <span class="parameter">expN1</span>, a 10-point font is used.<br />
<br />
&nbsp;In FoxPro for Windows, if the font you specify is not available, a font with similar font characteristics is substituted.<br />
<br />
&nbsp;In FoxPro for Macintosh, if the font you specify is not available, the Chicago font is used.<br />
<br />
&nbsp;In FoxPro for MS-DOS, the FONT clause is ignored.<br />
<br />
&nbsp;If the FONT clause is omitted and the check box is placed in the main FoxPro window, the main FoxPro window font is used. If the FONT clause is omitted and the check box is placed in a user-defined window, the user-defined window font is used.  <br />
<br />
<span class="nonLinkTerms">STYLE <span class="parameter">expC5</span><br /></span>
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, include the STYLE clause to specify a font style for a check box.<br />
<br />
&nbsp;The font style is specified with <span class="parameter">expC5</span>.<br />
<br />
&nbsp;In FoxPro for Windows, if the font style you specify is not available, a font style with similar characteristics is substituted.<br />
<br />
&nbsp;In FoxPro for Macintosh, if the font you specify is not available, the normal font style is used.<br />
<br />
&nbsp;The STYLE clause is ignored in FoxPro for MS-DOS.<br />
<br />
&nbsp;Character&nbsp;Font Style<br />
&nbsp;---------&nbsp;----------<br />
&nbsp;<br />
&nbsp;&nbsp;B&nbsp;&nbsp;Bold<br />
<br />
&nbsp;&nbsp;C&nbsp;&nbsp;Condense*<br />
<br />
&nbsp;&nbsp;E&nbsp;&nbsp;Extend*<br />
<br />
&nbsp;&nbsp;I&nbsp;&nbsp;Italic<br />
<br />
&nbsp;&nbsp;N&nbsp;&nbsp;Normal<br />
<br />
&nbsp;&nbsp;O&nbsp;&nbsp;Outline<br />
<br />
&nbsp;&nbsp;Q&nbsp;&nbsp;Opaque<br />
<br />
&nbsp;&nbsp;S&nbsp;&nbsp;Shadow<br />
<br />
&nbsp;&nbsp;-&nbsp;&nbsp;Strikeout*<br />
<br />
&nbsp;&nbsp;T&nbsp;&nbsp;Transparent<br />
<br />
&nbsp;&nbsp;U&nbsp;&nbsp;Underline<br />
<br />
&nbsp;* The Condense and Extend styles are only available in FoxPro for Macintosh. The Strikeout style is only available in FoxPro for Windows.<br />
<br />
&nbsp;You can include more than one character to specify a combination of font styles. For example, the following clause specifies Bold Italic:<br />
<br />
&nbsp;STYLE 'BI'<br />
<br />
&nbsp;If T is included to create a transparent check box, the check box is filled with the background color. If Q is included, the check box and the check box prompt are filled with the background color.<br />
<br />
<span class="nonLinkTerms">DEFAULT <span class="parameter">expr</span><br /></span>
&nbsp;When you check or uncheck a check box, the state of the box is saved in a memory variable, an array element or a field. If you specify a memory variable that doesn't exist, it is automatically created and initialized if the DEFAULT clause is included. However, an array element isn't created if you specify an array element in a DEFAULT clause. The DEFAULT clause is ignored if the memory variable already exists or you specify a field.<br />
<br />
&nbsp;-------------------------------<br />
&nbsp;Note - If the DEFAULT clause is omitted and the memory variable <span class="parameter">memvar</span> doesn't exist, the error message "Variable not found" appears. <br />
&nbsp;-------------------------------<br />
<br />
&nbsp;The DEFAULT expression <span class="parameter">expr</span> determines the type of memory variable created and its initial value. It must be a numeric or logical expression. Here are examples of DEFAULT clauses for check boxes: <br />
<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*C Titles' DEFAULT .T.<br />
&nbsp;READ<br />
<br />
&nbsp;STORE .T. TO button<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*C Titles' DEFAULT button<br />
&nbsp;READ<br />
<br />
<span class="nonLinkTerms">SIZE <span class="parameter">expN2</span>, <span class="parameter">expN3</span> <br /></span>
&nbsp;The numeric expression <span class="parameter">expN2</span> specifies the height of a check box. For check boxes in FoxPro for MS-DOS, this expression is ignored because a check box is always one line high. However, you must include <span class="parameter">expN2</span> if you include <span class="parameter">expN3</span> to specify the width of the prompt. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, you can specify a height for the check box. If <span class="parameter">expN2</span> is 1, the focus rectangle around the check box prompt will be clipped. In this case, include a larger value for <span class="parameter">expN2</span>. <br />
<br />
&nbsp;By default, the width of a check box is determined by the length of the prompt text. You can use <span class="parameter">expN3</span> to make the check box prompt wider than the default. The numeric expression <span class="parameter">expN3</span> specifies the width (in columns) of a check box.<br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, the check box font determines the size of the check box. The check box font is specified with the FONT clause. If the FONT clause is omitted, the check box uses the font of its parent window (the main FoxPro window or a user-defined window).<br />
<br />
<span class="nonLinkTerms">ENABLE | DISABLE<br /></span>
&nbsp;By default, a check box is enabled when READ is issued. You can prevent a check box from being activated when READ is issued by including DISABLE. A disabled check box cannot be selected and is displayed in disabled colors. Use SHOW GET ENABLE to enable a disabled check box. <br />
<br />
<span class="nonLinkTerms">MESSAGE <span class="parameter">expC5</span><br /></span>
&nbsp;The MESSAGE clause character expression <span class="parameter">expC5</span> appears when a check box is selected. The message is centered by default on the last line of the main FoxPro window; the message location can be specified with SET MESSAGE. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, the message is placed in the graphics status bar. If the graphical status bar has been turned off with SET STATUS BAR OFF, the message is centered on the last line of the main FoxPro window.<br />
<br />
<span class="nonLinkTerms">VALID <span class="parameter">expL1</span> | <span class="parameter">expN4</span><br /></span>
&nbsp;You can include an optional VALID expression <span class="parameter">expL1</span> or <span class="parameter">expN4</span> that is evaluated when a check box is chosen (checked or unchecked). That is, VALID isn't evaluated when you select (move to) the check box, but when you actually choose the check box.<br />
<br />
&nbsp;Typically, <span class="parameter">expL1</span> or <span class="parameter">expN4</span> is a user-defined function. With user-defined functions you can select, enable or disable other objects, open a Browse window, open another data-entry screen or move to a new record. CLEAR READ can be included in a user-defined function to terminate the READ.<br />
<br />
<span class="nonLinkTerms"><span class="parameter">expL1</span></span><br />
&nbsp;When a logical value <span class="parameter">expL1</span> is returned to the VALID clause, the logical value is ignored and the check box remains the active control. However, you can specify a user-defined function (UDF) that returns a logical value to the VALID clause and activates another object.<br />
<br />
&nbsp;The following example demonstrates how a VALID clause UDF is executed when a check box is chosen. The check box remains the current control when the VALID clause UDF is executed because a logical false (.F.) is returned by the UDF.<br />
<br />
&nbsp;CLEAR<br />
&nbsp;STORE 1 TO mchoice1, mchoice2, mchoice3<br />
&nbsp;@ 2,2 GET mchoice2<br />
&nbsp;@ 4,2 GET mchoice1 FUNCTION '*C \&lt;Titles' ;<br />
&nbsp;&nbsp;VALID showmes() ;<br />
&nbsp;&nbsp;MESSAGE 'Execute the VALID. ' + ;<br />
&nbsp;&nbsp;'Select this check box using Spacebar.'<br />
&nbsp;@ 6,2 GET mchoice3<br />
&nbsp;READ CYCLE&nbsp;&& Press Esc to exit the READ<br />
<br />
&nbsp;FUNCTION showmes<br />
&nbsp;WAIT WINDOW NOWAIT 'The VALID clause was executed.'<br />
&nbsp;RETURN .F.<br />
<br />
<span class="nonLinkTerms"><span class="parameter">expN4</span></span><br />
&nbsp;A VALID clause that includes a numeric expression <span class="parameter">expN4</span> is used to specify which object is activated after a check box is chosen. Objects are @ ... GET input fields, check boxes, lists, popups, spinners, text-editing regions and each individual button in a set of push, radio and invisible buttons. <br />
<br />
&nbsp;The numeric expression has one of three effects:<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN4</span> is 0, the check box remains the active control.<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN4</span> is positive, <span class="parameter">expN4</span> specifies the number of objects to advance. For example, when the check box is selected and VALID returns 1, the next object is activated. If <span class="parameter">expN4</span> is greater than the number of objects remaining, the READ is terminated (unless READ CYCLE is issued to activate the objects).<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN4</span> is negative, <span class="parameter">expN4</span> specifies the number of objects to move back. For example, when the check box is selected and VALID returns -1, the previous object is activated. If <span class="parameter">expN4</span> moves back past the first object, the READ is terminated (unless READ CYCLE is issued to activate the objects).<br />
<br />
&nbsp;The following example demonstrates how a VALID clause UDF can activate another object by returning a numeric value. When the VALID clause UDF is executed, the UDF returns 2. The second object after the check box is activated. Since READ CYCLE was issued, the READ isn't terminated even though there are less than two objects remaining.<br />
<br />
&nbsp;CLEAR<br />
&nbsp;STORE 1 TO mchoice1, mchoice2<br />
&nbsp;STORE 0 TO m.choice3<br />
&nbsp;@ 2,2 GET mchoice1<br />
&nbsp;@ 4,2 GET mchoice2<br />
&nbsp;@ 6,2 GET m.choice3 FUNCTION '*C \&lt;Titles' ;<br />
&nbsp;&nbsp;VALID showmes() ;<br />
&nbsp;&nbsp;MESSAGE 'Execute the VALID. ' + ;<br />
&nbsp;&nbsp;'Select this check box using Spacebar.'<br />
&nbsp;READ CYCLE&nbsp;&nbsp;&& Press Esc to exit the READ<br />
<br />
&nbsp;FUNCTION showmes<br />
&nbsp;WAIT WINDOW NOWAIT 'The VALID clause was executed.'<br />
&nbsp;RETURN 2<br />
<br />
<span class="nonLinkTerms">WHEN <span class="parameter">expL2</span><br /></span>
&nbsp;The optional WHEN clause allows or prohibits selection of a check box based on the logical value of <span class="parameter">expL2</span>, which must evaluate to a logical true (.T.) before a check box can be selected. If <span class="parameter">expL2</span> evaluates to a logical false (.F.), the check box cannot be selected and is skipped over if placed between other objects. <br />
<br />
&nbsp;In the following example, the check box WHEN clause returns a logical false (.F.). The check box is skipped even though it isn't disabled.<br />
<br />
&nbsp;CLEAR<br />
&nbsp;STORE 1 TO mchoice1, mchoice2<br />
&nbsp;STORE 0 TO mchoice3<br />
&nbsp;@ 2,2 GET mchoice1<br />
&nbsp;@ 4,2 GET mchoice2 FUNCTION '*C \&lt;Titles' ;<br />
&nbsp;&nbsp;WHEN showmes()<br />
&nbsp;@ 6,2 GET mchoice3<br />
&nbsp;READ CYCLE&nbsp;&& Press \ to exit the READ<br />
<br />
&nbsp;FUNCTION showmes<br />
&nbsp;WAIT WINDOW NOWAIT 'The WHEN clause was executed.'<br />
&nbsp;RETURN .F. &nbsp;<br />
<br />
<span class="nonLinkTerms">COLOR SCHEME <span class="parameter">expN5</span> | COLOR <span class="parameter">color pair list</span><br /></span>
&nbsp;If you do not include a COLOR clause, check box colors are determined by the color scheme for the main FoxPro window; if a check box is placed in a user-defined window, the window's color scheme determines the check box colors. <br />
<br />
&nbsp;The color of a check box can be specified by including the number of an existing color scheme in the COLOR SCHEME clause or a set of color pairs in the COLOR clause. <br />
<br />
&nbsp;A color scheme is a set of 10 predefined color pairs. The color pairs in a color scheme can be changed with SET COLOR OF SCHEME. In FoxPro for MS-DOS, the color pairs in a color scheme can also be changed in the Color Picker.<br />
<br />
&nbsp;A color pair is a set of two letters separated by a forward slash. The first letter specifies the foreground color and the second letter specifies the background color.<br />
<br />
&nbsp;For example, this color pair specifies a red foreground on a white background:<br />
<br />
&nbsp;R/W<br />
<br />
&nbsp;For a list of colors and their corresponding color letters, see SET COLOR Overview or Color Table by Color Pair.<br />
<br />
&nbsp;A color pair can also be specified with a set of six RGB (Red Green Blue) color values separated by commas. The first three color values specify the foreground color and the second three color values specify the background color. The color values can range from 0 through 255. <br />
<br />
&nbsp;The R/W color pair in the example above can also be specified with this RGB color pair:<br />
<br />
&nbsp;RGB(255,0,0,255,255,255)<br />
<br />
&nbsp;Only color pairs 5, 6, 7, 9 and 10 in a color scheme or color pair list affect the check box colors. The color of picture check boxes is controlled by Windows<br />
<br />
<br />
&nbsp;Color Pair&nbsp;&nbsp;Check Box <br />
&nbsp;  Number&nbsp;&nbsp;Attribute<br />
&nbsp;----------&nbsp;&nbsp;---------<br />
<br />
&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;Message<br />
<br />
&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;Selected check box prompt - FoxPro for MS-DOS only<br />
<br />
&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;Hot keys - FoxPro for MS-DOS only<br />
<br />
&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;Enabled check box prompt<br />
<br />
&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;Disabled check box prompt<br />
<br />
&nbsp;The following example shows how to override the color scheme of the main FoxPro window with another predefined color scheme:<br />
<br />
&nbsp;ACTIVATE SCREEN<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*C Titles' COLOR SCHEME 4<br />
&nbsp;READ   <br />
<br />
&nbsp;The following example creates check boxes with the prompt Titles, the hot key T and the following color characteristics:<br />
<br />
&nbsp;&nbsp;A selected box is shown with a bright white prompt on a blue background (W+/B).<br />
<br />
&nbsp;&nbsp;Hot-key characters are shown in red on a blue background (R/B) in FoxPro for MS-DOS. In FoxPro for Windows, the hot-key character is underlined. <br />
<br />
&nbsp;&nbsp;An enabled check box is shown with a yellow prompt on a blue background (GR+/B).<br />
<br />
&nbsp;&nbsp;A disabled check box is shown with a white prompt on a blue background (W/B).<br />
<br />
&nbsp;When you skip a color pair, you must include a comma where the color pair is omitted. <br />
<br />
&nbsp;Here are the commands:<br />
<br />
&nbsp;CLEAR<br />
&nbsp;SET COLOR TO W/B<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*C \&lt;Titles' ;<br />
&nbsp;&nbsp;COLOR ,,,,,W+/B,R/B,,GR+/B,W/B<br />
&nbsp;@ 4,2 GET mchoice FUNCTION '*C \\Titles' ;<br />
&nbsp;&nbsp;COLOR ,,,,,W+/B,R/B,,GR+/B,W/B<br />
&nbsp;@ 6,2 GET mchoice FUNCTION '*C \&lt;Titles' ;<br />
&nbsp;&nbsp;COLOR ,,,,,W+/B,R/B,,GR+/B,W/B<br />
&nbsp;READ<br />
<br />
	<h1 class="heading">
	<span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle)" tabindex="0"><img id="remarksToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Remarks</span></h1>
	<div id="remarksSection" class="section" name="collapseableSection" style="display: none;">
<p><br />
Picture check boxes are supported in FoxPro for Windows and FoxPro for Macintosh.<br />
<br />
With this variation of @ ... GET, you can create a check box or a picture check box. A check box is used to toggle between two states, such as true (.T.) and false (.F.) or yes and no. <br />
<br />
If you use the Screen Builder to create your data-entry screens, you may not have to use this command at all. The Screen Builder automatically generates the commands that create check boxes and picture check boxes. <br />
<br />
A check box is a box with descriptive text to its right. The string of text, called a prompt, indicates what the check box controls. The text of the prompt is specified by the FUNCTION or PICTURE clause. When a condition is true, an X is displayed. Only one check box may be created in a single @ ... GET. Issue READ or READ CYCLE to activate a check box. <br />
<br />
You can create a picture check box in FoxPro for Windows and FoxPro for Macintosh. A picture on a button replaces the check box and the check box prompt.<br />
<br />
In FoxPro for MS-DOS, pressing the Spacebar or Enter or clicking the check box toggles the check box from one state to the other. <br />
<br />
In FoxPro for Windows, pressing the Spacebar or Enter or clicking the check box toggles the check box from one state to the other if KEYCOMP is set to DOS. If KEYCOMP is set to WINDOWS, which is the FoxPro for Windows default, you can toggle the check box state by pressing the Spacebar or clicking the check box. Press Enter to move to the next object.<br />
<br />
In FoxPro for Macintosh, click the check box to toggle the check box from one state to the other. If KEYCOMP is set to DOS or WINDOWS and the check box has the focus, you can press the Spacebar to toggle the check box from one state to the other.<br />
<br />
</p>
</div>
<!-- VFPX FPW2.6 end -->
<h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle)" tabindex="0"><img id="seeAlsoToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>See Also</span></h1>
<div id="seeAlsoSection" class="section" name="collapseableSection" style="display: none;">
<!-- VFPX FPW2.6 Footer begin -->
<h4 class="subHeading">Other Resources</h4>
<span class="linkTerms"><a href="/html/672125e7-29a8-4d49-b89d-de87f4db5f79.htm">Backward-Compatible Language Elements</a><img class="vfpxmark" src="../local/vfpXmark.gif"/></span><br />
<span class="linkTerms"><a href="/html/6dcddc3f-9944-4ad8-be2f-003610af616a.htm">Language Reference (Visual FoxPro)</a></span><br />
<br />
<!-- VFPX FPW2.6 Footer end -->
</div>
</div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="@ ... GET - Check Boxes Command">
<param name="ALink Name" value="@ ... GET - Check Boxes">
</OBJECT>
