<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>Performance Enhancement through Set-Based Data Access</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">Performance Enhancement through Set-Based Data Access</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoNoToggle" onclick="OpenSection(seeAlsoNoToggle)">
              See Also
            </a>
          </td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p>One of the most important factors in building a fast, efficient client/server application is minimizing the amount of data you pull down from the server. Because client/server applications can access potentially huge amounts of data on a remote server, using traditional local navigation techniques could result in a slow client/server application. To speed performance, you use set-based data access techniques to filter the amount of data you download.</p>
  <h1 class="heading">Accessing Set-Based Data Efficiently</h1><div id="sectionSection0" class="seeAlsoNoToggleSection">
      <p>Remote data is set-based; you access remote data by selecting a <i>set</i> of data from a large data store using <a href="/html/815f7265-4dfd-40b9-8f19-0673b5a48847.htm">SELECT - SQL</a> statements. The most important difference between building a traditional local application and building a client/server application is the contrast between traditional Visual FoxPro navigational techniques and set-based server data access techniques.</p>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Using Traditional Navigational Techniques</h3><div class="subSection" xmlns="">
          <p>In traditional local database programming, you can access discrete and often large amounts of data by using the GOTO BOTTOM command, which you then query against. You can navigate through data by issuing a <a href="/html/dd0c045b-9749-405d-9d60-0169bede1b3d.htm">SET RELATION</a> command to create a temporary relationship between two tables and then issuing a <a href="/html/1c473072-7070-489e-83b6-a35c8a4c4a42.htm">SKIP</a> command to move through the related records.</p>
          <p>While this method of navigating records could be used against remote data, it can be inefficient against large remote data stores. For example, if you create a remote view that accesses a large table on a remote data source and then issue the <a href="/html/21117980-58f1-47b0-9384-05e0172f7af7.htm">GOTO BOTTOM</a> command, you must wait while all the data in the view is retrieved from the data source, sent across the network, and loaded into your local system's view cursor.</p>
        </div>
      <h3 class="subHeading" xmlns="">Using Parameterized Queries</h3><div class="subSection" xmlns="">
          <p>A more efficient approach for accessing remote data is to download just the data you need and then requery to obtain specific additional or new records. Use a SELECT statement based on parameters to download a specific small set of data and then access new records by using the <a href="/html/73805e2d-c331-4fd2-b4cb-18e9e53a81a7.htm">REQUERY( )</a> function to request a new set of data.</p>
          <p>You don't issue the GOTO BOTTOM command against remote server data because this would:
</p>
          <ul><li>
              <p>Unnecessarily burden network resources by downloading huge amounts of data.</p>
            </li><li>
              <p>Slow performance of your application by handling unneeded data.</p>
            </li><li>
              <p>Potentially reduce accuracy of the data in the local cursor because changes to remote data aren't reflected in the local cursor until you requery.</p>
            </li></ul>
          <p>For example, if you want to create a client/server application that accesses the orders for a particular customer, create a remote view that accesses the Customer table. Create another remote view that accesses the Orders table, but parameterize the view based on the <code>cust_id</code> field. Then use the current customer record as the parameter for the view of the Orders table.</p>
          <p>You can use the parameter to scope the downloaded data set to just the right amount of data. If you request too little data, you can lose performance because you'll have to requery the remote server more frequently. If you request too much data, you can waste time downloading data you won't use.</p>
        </div>
    </sections></div><h1 class="heading">Choosing the Best Client/Server Design</h1><div id="sectionSection1" class="seeAlsoNoToggleSection">
      <p>The following examples describe how to gain the benefits of client/server technology and avoid the pitfalls of poor programming techniques. The first method uses traditional programming practices to retrieve all the data from a remote data source into local cursors that are then related with the <a href="/html/dd0c045b-9749-405d-9d60-0169bede1b3d.htm">SET RELATION</a> command. The second, third, and fourth methods adopt progressively smarter data-fetching techniques, effectively limiting the amount of data downloaded with a just-in-time methodology that provides the freshest data and fastest response time over a network.</p>
    <sections xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5">
      <h3 class="subHeading" xmlns="">Using an Unoptimized Client/Server Strategy</h3><div class="subSection" xmlns="">
          <p>A straightforward, unoptimized client/server application uses local data navigation techniques with remote data. For example, if you have 10-million customer records and 100-million order records on a remote data source, you can create an inefficient application that downloads all the Customer and Order records into local cursors. You could then index on 100-million order records, create a temporary relationship between the Customer and Orders tables in your local cursors, and use the SKIP command to navigate through the records.</p>
          <p>This method is not optimized for performance, but might, however, be useful if the one side is local and the many side is remote.</p>
        </div>
      <h3 class="subHeading" xmlns="">Filtering the Many Side</h3><div class="subSection" xmlns="">
          <p>A slightly improved client/server application limits the many side of the relationship, but retrieves all of the one side so you can skip through the records. In this scenario, you create a remote view of the many side of the relationship, the Orders table, parameterized on the customer ID. You then download the entire Customer table.</p>
          <p>While creating a parameterized view on the Orders table is an improvement over downloading all of the orders, you still retrieve unnecessary information by continuing to download the entire Customer table. The Customer table is also increasingly out-of-date as changes are made by other users on your system. This method might be beneficial if the one side of the relationship contains a small data set.</p>
        </div>
      <h3 class="subHeading" xmlns="">Filtering the One Side</h3><div class="subSection" xmlns="">
          <p>A better client/server programming technique creates remote views for all remote data. You limit the number of Customer records downloaded into the remote view of the Customer table by using the SELECT statement in the view to select just the customers for one region. You then create a remote view of the many side of the relationship, the Orders table, parameterized on the customer ID.</p>
          <p>This scenario retrieves a smaller set of records. You use the <a href="/html/1c473072-7070-489e-83b6-a35c8a4c4a42.htm">SKIP</a> command to skip on the one side of the relation (the Customer view). You use the <a href="/html/73805e2d-c331-4fd2-b4cb-18e9e53a81a7.htm">REQUERY( )</a> function to access new data on the many (Orders) side.</p>
          <p>In this example, you limit, or filter, both the one side and the many side of the relationship, and can still use the SKIP command to navigate through the filtered data. This method is recommended if the one side of the relationship, even after being filtered, is still sufficient to provide information for a successive set of queries before you requery the remote server.</p>
        </div>
      <h3 class="subHeading" xmlns="">Using the Primary Key to Access the One-to-Many Relationship</h3><div class="subSection" xmlns="">
          <p>The most efficient client/server programming paradigm gives up the luxury of using the <a href="/html/1c473072-7070-489e-83b6-a35c8a4c4a42.htm">SKIP</a> command, and creates a form that requests input or selection of the customer ID, which is then used as a parameter for a remote view of the Customer table. This parameter is also used as a parameter for a remote view of the Orders table.</p>
          <p>For example, you could create a one-to-many form in which the customer information forms the one side, and a Grid control displays the many side of the relationship. The Grid control can be bound to the customer ID chosen in the one side of the form. You can then set the MaxRecords property of <a href="/html/423cad42-42a8-4bb1-8d58-226cece91d4e.htm">CURSORSETPROP( )</a> to 1, and use the following code to populate the one side of the form:</p>
          <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>SELECT * FROM customer WHERE customer.cust_id = ?cCust_id</pre></td></tr></table></span></div>
          <p>When users want to view a different customer's record, they input or select a new customer ID. The form requeries the data source for the orders for the new customer ID and refreshes the Grid control with the new order data.</p>
          <p>Using these techniques, your application downloads just the data you need, at the time it's needed. You speed response over the network by limiting the amount of data downloaded, and you provide fresher information to the user by requerying the data source just before you display requested information.</p>
          <p>This method is recommended when you want to access the one-to-many relationship randomly using any primary key value. You might want to download the primary keys into a control, such as a drop-down list, when you open the form and then provide a control that the user can choose to refresh the list of primary key values on demand.</p>
        </div>
      <h3 class="subHeading" xmlns="">Using the Data Environment in Client/Server Applications</h3><div class="subSection" xmlns="">
          <p>When you use remote data in a form, include the views in the form's data environment. You can set the AutoOpenTables property for the data environment to false (.F.) so that you can specify when the application refreshes the views with the remote data. Set the ControlSource property for text boxes or other data-bound controls after you call the data environment's OpenTables method, typically in the code associated with the Init event of the form. For more information, see <a href="/html/adb21354-5dde-4f55-b92a-df0c53810385.htm">Creating Forms</a>.</p>
        </div>
    </sections></div><h1 class="heading"><span id="seeAlsoNoToggle">See Also</span></h1><div id="seeAlsoSection" class="seeAlsoNoToggleSection"><h4 class="subHeading">Concepts</h4><span class="linkTerms"><a href="/html/a97c6b37-f1e3-4546-a002-84690f5decaa.htm">Client/Server Design for High Performance</a></span><br /><span class="linkTerms"><a href="/html/18ecc89e-698e-4e1a-bfc2-04a19a99d2a5.htm">Data Location on the Optimal Platform</a></span><br /><span class="linkTerms"><a href="/html/15da0b53-4063-4b42-a51e-3433dec7e62d.htm">Selecting the Right Methods</a></span><br /><h4 class="subHeading">Other Resources</h4><span class="linkTerms"><a href="/html/7a4c60ae-5309-4014-87ec-08ce277eede4.htm">Planning Client/Server Applications</a></span><br /><span class="linkTerms"><a href="/html/ea88b84a-e912-4f11-b6d0-b8ab7f38052a.htm">Optimizing Client/Server Performance</a></span><br /><span class="linkTerms"><a href="/html/8473acb7-e995-4d5e-b1b9-5a1d86ad4f85.htm">Enhancing Applications Using SQL Pass-Through Technology</a></span><br /><br /></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="Performance Enhancement through Set-Based Data Access">
</OBJECT>
