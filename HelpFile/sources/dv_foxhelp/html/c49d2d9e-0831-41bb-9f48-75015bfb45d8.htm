<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>Coverage Engine Object</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="collapseImage" style="display:none; height:0; width:0;" alt="Collapse image" src="../local/collapse_all.gif">
      
      
    </img>
    <img id="expandImage" style="display:none; height:0; width:0;" alt="Expand image" src="../local/expand_all.gif">
      
      
    </img>
    <img id="collapseAllImage" style="display:none; height:0; width:0;" alt="CollapseAll image" src="../local/collall.gif">
      
      
    </img>
    <img id="expandAllImage" style="display:none; height:0; width:0;" alt="ExpandAll image" src="../local/expall.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">Coverage Engine Object</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> 
									</td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" alt="CollapseAll image" src="../local/collall.gif">
                
                
              </img>
              <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">
                Collapse All
              </label>
              <label id="expandAllLabel" for="toggleAllImage" style="display: none;">
                Expand All
              </label> </span>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p>The Coverage engine class is a subclass of the Visual FoxPro <b>FormSet</b> class. Though it provides no visible components, it provides the data session of a <b>FormSet</b> class and includes provisions for feedback on coverage log processing through the <span class="linkTerms"><a href="/html/9eae98a4-b3da-4bfa-9fa6-962c1019857b.htm">WAIT Command</a></span>, <span class="linkTerms"><a href="/html/09f87252-c201-4402-93f0-b204468955ef.htm">MESSAGEBOX( ) Function</a></span>, and subclasses of MSComDlg.CommonDialog.</p>
    <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
      <p>This formset is not a subclass of _formset, therefore the Coverage Profiler runs in Visual FoxPro 5.0 and later.</p>
    </td></tr></table></div>
    <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
        <td>
          <p>Class</p>
        </td>
        <td>
          <p>cov_engine</p>
        </td>
      </tr><tr>
        <td>
          <p>Class Library</p>
        </td>
        <td>
          <p>coverage.vcx</p>
        </td>
      </tr><tr>
        <td>
          <p>Base Class</p>
        </td>
        <td>
          <p>formset</p>
        </td>
      </tr><tr>
        <td>
          <p>Parent Class</p>
        </td>
        <td>
          <p>scov_formset</p>
        </td>
      </tr></table></div>
    <p>For more information, see <span class="linkTerms"><a href="/html/4dbd7912-7e50-4788-9e57-1087f9183d0a.htm">Coverage Profiler Application</a></span>.</p>
  <h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle)" tabindex="0"><img id="remarksToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="display: none;">
    
      <p>This formset has one member, a toolbar, that remains hidden while providing a container for custom objects, such as CusRegistry or Dialog subclasses. Cov_standard, a subclass of cov_engine, provides a sample user interface, the <span class="linkTerms"><a href="/html/4dbd7912-7e50-4788-9e57-1087f9183d0a.htm">Coverage Profiler Application</a></span>. You can subclass either cov_engine or cov_standard to fit your requirements.</p>
      <div class="labelheading"><b></b></div><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5"><tr>
            <th>
              Properties, events, and methods
            </th>
            <th>
              Description
            </th>
          </tr><tr>
          <td>
            <p>*.cStackXSLT Property</p>
          </td>
          <td>
            <p>Holds filename providing default XSL Transformation stylesheet to be applied by default to the generated Stack XML analysis document, when TransformStackXML is called. </p>
          </td>
        </tr><tr>
          <td>
            <p>aAddIns array Property</p>
          </td>
          <td>
            <p>This one-dimensional array holds a list of registered add-in files.</p>
            <p>
              <b>Default </b>.F. (the array will be dimensioned [1])</p>
          </td>
        </tr><tr>
          <td>
            <p>aFileTypes array Property</p>
          </td>
          <td>
            <p>This two-dimensional array holds a list of the file types (extensions) the Coverage Profiler handles. The first column holds the extension listed in the coverage text log (such as .fxp or .vct). The second column holds the extension of the matching source code file (such as .prg or .vcx) that the Coverage Profiler must locate to analyze the code. This array is filled at startup by the FillFileTypeArray( ) method.</p>
            <p>
              <b>Default </b>.F. (the array will be dimensioned [1, 2])</p>
          </td>
        </tr><tr>
          <td>
            <p>cAddIn Property</p>
          </td>
          <td>
            <p>Specifies the add-in last run successfully. At startup this property can be set by an add-in passed to the Coverage Profiler application as a parameter and run in the Init. Otherwise, if add-in file names have been stored to the registry previously, this property is filled using the aAddIns array.</p>
            <p>
              <b>Default </b>""</p>
          </td>
        </tr><tr>
          <td>
            <p>cBaseFontName Property</p>
          </td>
          <td>
            <p>Specifies a base font name for any interface elements. The default for this attribute when no preference has been saved to the registry is the #DEFINE constant COV_DEFAULT_BASE_FONTNAME in COV_TUNE.H.</p>
            <p>
              <b>Default </b>MS Sans Serif</p>
          </td>
        </tr><tr>
          <td>
            <p>cBaseMonoFontName Property</p>
          </td>
          <td>
            <p>Specifies a base font name for any interface elements that require a monospaced font.</p>
            <p>The default for this attribute when no preference has been saved to the registry is, first, any Visual FoxPro resource file entry for <span class="linkTerms"><a href="/html/e36c338f-386d-48a5-8ce3-e45c4000ddd9.htm">MODIFY COMMAND Command</a></span> window preferences. Otherwise, the coverage engine looks for a Visual FoxPro registry entry for the Trace window. If one of these is not found, the coverage engine uses the #DEFINE constant COV_DEFAULT_MONO_FONTNAME in COV_TUNE.H.</p>
            <p>
              <b>Default </b>Courier New</p>
          </td>
        </tr><tr>
          <td>
            <p>cCovFilesAlias Property</p>
          </td>
          <td>
            <p>Specifies the name of the cursor holding names of source files the Coverage Profiler should not locate and analyze. The engine fills this cursor with a set of file names using the CreateCoverageFileNameCursor( ) and FillCoverageFileNameCursor( ) methods. You can use the coverage engine abstract AdjustCoverageFileNameCursor( ) method to add file names to the set.</p>
            <p>
              <b>Default </b>IgnoredFiles</p>
          </td>
        </tr><tr>
          <td>
            <p>cDefaultWritePath Property</p>
          </td>
          <td>
            <p>Specifies the path to cSourceFile. Supplies the default path for any file output of the Coverage Profiler.</p>
            <p>
              <b>Default </b>""</p>
          </td>
        </tr><tr>
          <td>
            <p>cMarkExecuted Property</p>
          </td>
          <td>
            <p>Specifies the character(s) that marks lines of code that executed according to the current coverage log. Although this property defaults to an empty string, the engine uses the SetMarks( ) procedure to adjust the length of cMarkExecuted and cMarkNotExecuted to equal lengths so the appearance of marked code is unspoiled. At startup, therefore, cMarkExecuted's value is SPACE(4), to match the default length of cMarkNotExecuted.</p>
            <p>
              <b>Default </b>""</p>
          </td>
        </tr><tr>
          <td>
            <p>cMarkNotExecuted Property</p>
          </td>
          <td>
            <p>Specifies the character(s) that marks lines of code not run during the current coverage log.</p>
            <p>
              <b>Default </b>|+SPACE(3)</p>
          </td>
        </tr><tr>
          <td>
            <p>cSavedSkipFiles Property</p>
          </td>
          <td>
            <p>Specifies the name of the table (.dbf) file that contains the list of source files skipped during coverage analysis.</p>
            <p>
              <b>Default </b>""</p>
          </td>
        </tr><tr>
          <td>
            <p>cSavedStackXML Property</p>
          </td>
          <td>
            <p>Holds the name of the saved Coverage stacklevel analysis in XML form, after this file has been saved to disk. Set back to default ("") when you load a new log. </p>
          </td>
        </tr><tr>
          <td>
            <p>cSavedTargetDBF Property</p>
          </td>
          <td>
            <p>Specifies the name of the table (.dbf) file that contains the coverage results.</p>
            <p>
              <b>Default </b>""</p>
          </td>
        </tr><tr>
          <td>
            <p>cSkippedAlias Property</p>
          </td>
          <td>
            <p>Specifies the name of the cursor which holds names of source files the Coverage Profiler could not locate or analyze. The engine fills this cursor using the CreateSkippedCursor( ) method and saves it to disk using the SaveSkippedCursor( ) method.</p>
            <p>
              <b>Default </b>SkippedFiles</p>
          </td>
        </tr><tr>
          <td>
            <p>cSourceAlias Property</p>
          </td>
          <td>
            <p>Specifies the name of the source which holds the appended and processed records stored by the coverage text log. The engine creates this cursor in the CreateSourceCursor( ) method and provides the abstract AdjustSourceCursor( ) method so you can add fields, index tags, and so on. Then the engine fills the cursor with records from the text log in the FillSourceCursor( ) method.</p>
            <p>
              <b>Default </b>FromLog</p>
          </td>
        </tr><tr>
          <td>
            <p>cSourceFile Property</p>
          </td>
          <td>
            <p>Specifies the name of the file to be analyzed. You can specify this value as the first parameter of the DO (_COVERAGE) WITH command.</p>
            <p>
              <b>Default </b>""</p>
          </td>
        </tr><tr>
          <td>
            <p>cSuspendedLog Property</p>
          </td>
          <td>
            <p>Specifies the name of the current coverage log (SET(COVERAGE)) if the Coverage Profiler suspends coverage data logging. This property is set with the SuspendCoverage( ) method.</p>
            <p>
              <b>Default </b>""</p>
          </td>
        </tr><tr>
          <td>
            <p>cTargetAlias Property</p>
          </td>
          <td>
            <p>Specifies the target cursor that holds the names of classes, source file names, coverage-marked procedure source code, and coverage statistics. The engine creates this cursor in the CreateTargetCursor( ) method and provides the abstract AdjustTargetCursor( ) method so you can add fields, tags, and so on. Then the coverage engine locates and analyses source code in the FillTargetCursor( ) method.</p>
            <p>
              <b>Default </b>MarkedCode</p>
          </td>
        </tr><tr>
          <td>
            <p>iLenDuration Property</p>
          </td>
          <td>
            <p>Specifies the length, including decimal places, of the numeric field in the source file.</p>
            <p>
              <b>Default </b>8 (in Visual FoxPro versions 5.0 and 6.0. Defaults to 11 in later versions.)</p>
          </td>
        </tr><tr>
          <td>
            <p>iLenExecuting Property</p>
          </td>
          <td>
            <p>Specifies the length of the field in the source work file that contains information about the object and method name that is running covered lines of code when the #DEFINE COV_TOPSPEED in COV_TUNE.H is false (.F.). </p>
            <p>You can decrease the default value, with care, if your fully qualified object names and method names are short and if you want to conserve the disk space used by the Profiler work files. See COV_TUNE.H for more information about this value. See <span class="linkTerms"><a href="/html/f5335a61-df76-42e6-bb97-5a61d3477ce0.htm">Conserving Disk Space During Coverage Runs</a></span> for more information on using iLenExecuting.</p>
            <p>
              <b>Default </b>115</p>
          </td>
        </tr><tr>
          <td>
            <p>iLenHostFile Property</p>
          </td>
          <td>
            <p>
              <b>Default </b>115</p>
          </td>
        </tr><tr>
          <td>
            <p>iLenObjClass Property</p>
          </td>
          <td>
            <p>Specifies the length of a field in the source and target work files that holds information about the object executing Covered lines of code when the #DEFINE COV_TOPSPEED in COV_TUNE.H is false (.F.). </p>
            <p>To conserve the disk space used by the Profiler work files, you can decrease the default value, with care, if your object names are short. You can do this even when object names are fully-qualified by their container hierarchy. See COV_TUNE.H for more information about this value. See <span class="linkTerms"><a href="/html/f5335a61-df76-42e6-bb97-5a61d3477ce0.htm">Conserving Disk Space During Coverage Runs</a></span> for more information on using iLenObjClass.</p>
            <p>
              <b>Default </b>115</p>
          </td>
        </tr><tr>
          <td>
            <p>lBaseFontBold Property</p>
          </td>
          <td>
            <p>Specifies a base font attribute (bold) for any displayed characters.</p>
            <p>
              <b>Default </b>.F.</p>
          </td>
        </tr><tr>
          <td>
            <p>lBaseFontItalic Property</p>
          </td>
          <td>
            <p>Specifies a base font attribute (italic) for any displayed characters.</p>
            <p>
              <b>Default </b>.F.</p>
          </td>
        </tr><tr>
          <td>
            <p>lBaseMonoFontBold Property</p>
          </td>
          <td>
            <p>Specifies a base font attribute (bold) for any displayed characters that require a monospaced font.</p>
            <p>
              <b>Default </b>.F.</p>
          </td>
        </tr><tr>
          <td>
            <p>lBaseMonoFontItalic Property</p>
          </td>
          <td>
            <p>Specifies a base font attribute (italic) for any displayed characters that require a monospaced font.</p>
            <p>
              <b>Default </b>.F.</p>
          </td>
        </tr><tr>
          <td>
            <p>lError Property</p>
          </td>
          <td>
            <p>A flag that specifies an error occurred; set by the Error method and checked by critical operations during processing.</p>
            <p>
              <b>Default </b>.F.</p>
          </td>
        </tr><tr>
          <td>
            <p>lInCoverageFrame Property</p>
          </td>
          <td>
            <p>Specifies whether the Coverage Profiler opens in the main Visual FoxPro window. The default displays Coverage Profiler elements in a separate window.</p>
            <p>
              <b>Default </b>.F.</p>
          </td>
        </tr><tr>
          <td>
            <p>lInProfileMode Property</p>
          </td>
          <td>
            <p>Specifies whether the Coverage Profiler analyzes the coverage log for profiling characteristics. In the default setting, the Coverage Profiler analyses for coverage characteristics.</p>
            <p>
              <b>Default </b>.F.</p>
          </td>
        </tr><tr>
          <td>
            <p>lMarkAllOnLoad Property</p>
          </td>
          <td>
            <p>Specifies whether all source code is marked when a target file is loaded. In the default setting, individual source code records are marked one at a time as required by the user.</p>
            <p>
              <b>Default </b>.F.</p>
          </td>
        </tr><tr>
          <td>
            <p>lSaveFormPositions Property</p>
          </td>
          <td>
            <p>Specifies whether all forms in the formset receive an instance of cov_SavePosition to handle form positions and size.</p>
            <p>
              <b>Default </b>.F.</p>
          </td>
        </tr><tr>
          <td>
            <p>lSmartPath Property</p>
          </td>
          <td>
            <p>Specifies whether the engine retains a reference to directories in which you have located files.</p>
            <p>
              <b>Default </b>.T.</p>
          </td>
        </tr><tr>
          <td>
            <p>lStackXMLExtendedTree Property</p>
          </td>
          <td>
            <p>If .T., then it generates more extensive StackXML, so profiling of each branch can assess effects of args and other factors for different invocations of a module. Defaults to .F. but if COV_LOAD_STACK_FROM_DBF is .T., then this more extensive XML is generated always. </p>
          </td>
        </tr><tr>
          <td>
            <p>lStartInProfileMode Property</p>
          </td>
          <td>
            <p>Specifies how the lInProfileMode property is set when each coverage log loads. This value is significant when the property lMarkAllOnLoad is set to true (.T.).</p>
            <p>
              <b>Default </b>.F.</p>
          </td>
        </tr><tr>
          <td>
            <p>lTurnedOffTrace Property</p>
          </td>
          <td>
            <p>Specifies whether the Coverage Profiler issued SET TRBETWEEN OFF during processing.</p>
            <p>
              <b>Default </b>.F.</p>
          </td>
        </tr><tr>
          <td>
            <p>lUsingRegistry Property</p>
          </td>
          <td>
            <p>Specifies whether user options are saved to and restored from the Microsoft Windows registry.</p>
            <p>
              <b>Default </b>.T.</p>
          </td>
        </tr><tr>
          <td>
            <p>lUsingStatusBar Property</p>
          </td>
          <td>
            <p>Determines whether feedback messages during processing are displayed in the status bar or as a WAIT WINDOW NOWAIT message. The status bar is used when the Coverage Profiler runs in the main Visual FoxPro window or in Unattended mode and STATUS BAR is ON.</p>
            <p>
              <b>Default </b>.F.</p>
          </td>
        </tr><tr>
          <td>
            <p>lVFP5 Property</p>
          </td>
          <td>
            <p>Specifies whether the Coverage Profiler is running in Visual FoxPro 5.0.</p>
            <p>
              <b>Default </b>(ATC("FoxPro 05",VERSION( )) &gt; 0)</p>
          </td>
        </tr><tr>
          <td>
            <p>nBasefontsize Property</p>
          </td>
          <td>
            <p>Specifies a base font size for any displayed characters.</p>
            <p>
              <b>Default </b>11 (defaults to 8 in version 5.0 and 6.0)</p>
          </td>
        </tr><tr>
          <td>
            <p>oFrame Property</p>
          </td>
          <td>
            <p>Specifies a reference to the Coverage Frame window when the Coverage Profiler exists in a separate window. The engine makes sure this window exists before displaying any related dialog boxes or other elements (including common dialog subclasses, SET TALK display, and so on).</p>
            <p>
              <b>Default </b>.NULL.</p>
          </td>
        </tr><tr>
          <td>
            <p>*.TransformStackXML( ) Method</p>
          </td>
          <td>
            <p>
              <b>Syntax: </b>
              <code>TransformStackXML(tcXSLT, tcXMLIn, tcXMLOut, tlNoShow)</code>
            </p>
            <p>
              <b>Return Value: </b>Returns .T. if successful.</p>
            <p>
              <b>Parameters:</b> <span class="parameter">tcXSLT </span>Specifies the name of the XSL file.<span class="parameter">tcXMLIn </span>Specifies the name of the XML input file.<span class="parameter">tcXMLOut </span>Specifies the name of the XML output file.<span class="parameter">tlNoShow </span>Specifies whether to call DisplayStackXML.</p>
            <p>
              <b>Remarks:</b> Applies <span class="parameter">tcXSLT</span> (default to .<span class="parameter">cStackXSLT</span>) to <span class="parameter">tcXMLIn</span> (default .<span class="parameter">cSavedStackXML</span>, GetStackXML( ) called if empty). Saves result to <span class="parameter">tcXMLOut</span> (defaults to <span class="parameter">tcXMLIn</span>-based generated name w/ HTM ext). If ! <span class="parameter">tlNoShow</span>, calls DisplayStackXML( ).</p>
          </td>
        </tr><tr>
          <td>
            <p>AddFormPositionSaver( ) Method</p>
          </td>
          <td>
            <p>Adds an instance of cov_SavePosition to a form to save and restore form size and position.</p>
            <p>
              <b>Syntax: </b>
              <code>AddFormPositionSaver(toForm)</code>
            </p>
            <p>
              <b>Return Values: </b>None</p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">toForm </span>Specifies that the cov_SavePosition object is saved to a form.</p>
          </td>
        </tr><tr>
          <td>
            <p>AddPath( ) Method</p>
          </td>
          <td>
            <p>Extracts directory information to concatenate to SET(PATH).</p>
            <p>
              <b>Syntax:</b> <code>AddPath(tcFileName)</code></p>
            <p>
              <b>Return Values:</b> None</p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">tcFileName </span>Specifies a file name.</p>
            <p>
              <b>Remarks:</b> Extracts the directory information from the passed file name, <span class="parameter">tcFileName</span>, to concatenate into the current SET(PATH).</p>
          </td>
        </tr><tr>
          <td>
            <p>AddRegisteredAddin( ) Method</p>
          </td>
          <td>
            <p>Adds file name to the aAddIns array.</p>
            <p>
              <b>Syntax:</b>
              <code> AddRegisteredAddin(tcFileToAdd)</code>
            </p>
            <p>
              <b>Return Values:</b> None</p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">tcFileToAdd </span>Specifies the file to add to the aAddIns array.</p>
            <p>
              <b>Remarks:</b> Adds a file name, <span class="parameter">TcFileToAdd</span>, to the aAddIns array when called by the RunAddIn( ) method after an add-in runs successfully.</p>
          </td>
        </tr><tr>
          <td>
            <p>AdjustCoverageFilenameCursor( ) Method</p>
          </td>
          <td>
            <p>Enables adding files to cursor list of unanalyzed files.</p>
            <p>
              <b>Syntax:</b> <code>AdjustCoverageFilenameCursor(tcTarget)</code></p>
            <p>
              <b>Return Values</b>: NOT THIS<span class="parameter">.lReturn</span></p>
            <p>
              <b>Parameters:</b> <span class="parameter">tcTarget </span>Specifies the name of the cursor you want to modify.</p>
            <p>
              <b>Rema</b>
              <b>rks:</b> Makes it possible for you to add files that you do not want analyzed to the cursor's file list when called by the CreateCoverageFilenameCursor( ) method. See the cCovFilesAlias property.</p>
          </td>
        </tr><tr>
          <td>
            <p>AdjustSourceCursor( ) Method</p>
          </td>
          <td>
            <p>Abstract method that makes it possible for you to add index tags and custom fields to the source cursor when called by the CreateSourceCursor( ) method.</p>
            <p>
              <b>Syntax:</b> <code>AdjustSourceCursor(tcSource)</code></p>
            <p>
              <b>Return Values:</b> NOT THIS<span class="parameter">.lReturn</span></p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">tcSource </span>Specifies the name of the cursor containing the source records.</p>
          </td>
        </tr><tr>
          <td>
            <p>AdjustTargetCursor( ) Method</p>
          </td>
          <td>
            <p>Abstract method called by the CreateTargetCursor( ) method makes it possible for you to add index tags and custom fields to the target cursor.</p>
            <p>
              <b>Syntax:</b> <code>AdjustTargetCursor(tcTarget)</code></p>
            <p>
              <b>Return Values:</b> NOT THIS<span class="parameter">.lReturn</span></p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">tcTarget </span>Specifies the name of the table being modified.</p>
          </td>
        </tr><tr>
          <td>
            <p>ClearStatus( ) Method</p>
          </td>
          <td>
            <p>Removes a message from the status bar or performs a CLEAR WAIT WINDOW command. See lUsingStatusBar property.</p>
            <p>
              <b>Syntax:</b> <code>ClearStatus( )</code></p>
            <p>
              <b>Return Values:</b> None</p>
            <p>
              <b>Parameters:</b> None</p>
          </td>
        </tr><tr>
          <td>
            <p>CreateCoverageFilenameCursor( ) Method</p>
          </td>
          <td>
            <p>Creates a cursor to hold the names of source files that the Coverage Profiler should not locate and analyze. See the cCovFilesAlias property.</p>
            <p>
              <b>Syntax:</b>
              <code> CreateCoverageFileNameCursor( )</code>
            </p>
            <p>
              <b>Return Values:</b> <span class="parameter">lReturn</span> AND NOT THIS.<span class="parameter">lError</span></p>
            <p>
              <b>Parameters:</b> None</p>
          </td>
        </tr><tr>
          <td>
            <p>CreateForms( ) Method</p>
          </td>
          <td>
            <p>At startup, displays the Coverage Profiler window after workfiles have been set up if the coverage engine is not in Unattended mode. In the coverage engine base class, this method creates only the Coverage frame (if the engine is not running in the Visual FoxPro window). Subclasses can augment this method to add their own dialogs.</p>
            <p>
              <b>Syntax:</b> <code>CreateForms( )</code></p>
            <p>
              <b>Return Values:</b> None</p>
            <p>
              <b>Parameters:</b> None</p>
          </td>
        </tr><tr>
          <td>
            <p>CreateSkippedCursor( ) Method</p>
          </td>
          <td>
            <p>The engine creates this cursor by looking for deleted records in the Source table, because skipped records are deleted when the engine encounters file names that cannot be located or that are in the Ignored Files list during its load of the log file. See the CSkippedAlias property.</p>
            <p>
              <b>Syntax</b>
              <b>:</b> <code>CreateSkippedCursor(tcSource, tcSkipped)</code></p>
            <p>
              <b>Return Values:</b> NOT THIS.<span class="parameter">lError</span></p>
            <p>
              <b>Parameters:</b>
              <span class="parameter">tcSource </span>Specifies the name of the table containing the source records.<span class="parameter">TcSkipped </span>Specifies the alias of the cursor containing the skipped records.</p>
          </td>
        </tr><tr>
          <td>
            <p>CreateSourceCursor( ) Method</p>
          </td>
          <td>
            <p>Creates a source cursor in the following format: </p>
            <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>CREATE CURSOR(cSource) ;
(Duration n(COV_LEN_DURATION,N_COVLOG_PRECISION), ;ObjClass c(COV_LEN_OBJCLASS), ;Executing c(COV_LEN_EXECUTING), ;Procline i, ;Hostfile c(COV_LEN_HOSTFILE), ;Stacklevel I, ;FileType c(4) )</pre></td></tr></table></span></div>
            <p>The Stacklevel field is excluded when the value of the lVFP5 property is true (.T.). See COV_TUNE.H for #DEFINE field lengths.</p>
            <p>
              <b>Syntax:</b> <code>CreateSourceCursor(tcSource)</code></p>
            <p>
              <b>Return Values:</b> <span class="parameter">lReturn</span> AND NOT THIS.<span class="parameter">lError</span></p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">tcSource </span>Specifies the name of the cursor containing the source records.</p>
          </td>
        </tr><tr>
          <td>
            <p>CreateTargetCursor( ) Method</p>
          </td>
          <td>
            <p>Creates a target cursor in the following format: </p>
            <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>CREATE CURSOR (cTarget) ;
(Hostfile c(COV_LEN_HOSTFILE), ;ObjClass c(COV_LEN_OBJCLASS), ;FileType c(4), ;Marked m, ;Profiled m, ;SourceCode m, ;Coverable i, ;Covered i, ;ObjTotal i, ;ObjHits i)</pre></td></tr></table></span></div>
            <p>See COV_TUNE.H for #DEFINE field lengths.</p>
            <p>
              <b>Syntax:</b> <code>CreateTargetCursor(tcSource, tcTarget)</code></p>
            <p>
              <b>Return Values:</b> NOT THIS.<span class="parameter">lError</span></p>
            <p>
              <b>Parameters:</b> <span class="parameter">tcSource </span>Specifies the name of the file to analyze.<span class="parameter">TcTarget </span>Specifies the name of the file you want to modify.</p>
            <p>
              <b>Remarks: </b>The target file contains one record for each of the following in the coverage log: </p>
            <ul><li>
                <p>An ASCII source file.</p>
              </li><li>
                <p>A class contained in an ASCII source file.</p>
              </li><li>
                <p>A class contained in a .vcx or .scx file.</p>
              </li><li>
                <p>A stored procedure list in a .dbc file.</p>
              </li><li>
                <p>A Data Environment class or other Data Environment member class (such as a cursor) in a .frx or .lbx source file.</p>
              </li></ul>
          </td>
        </tr><tr>
          <td>
            <p>DeleteRegisteredAddin( ) Method</p>
          </td>
          <td>
            <p>Removes a file name from the aAddIns array. </p>
            <p>
              <b>Syntax:</b> <code>DeleteRegisteredAddin(tcFileToDelete)</code></p>
            <p>
              <b>Return Values:</b> None</p>
            <p>
              <b>Parameters:</b> <span class="parameter">tcFileToDelete </span>Specifies the add-in to remove from the registry.</p>
            <p>
              <b>Remarks:</b> Called by the RunAddIn method after an add-in does not run successfully, whether the Registry is currently in use or not.</p>
          </td>
        </tr><tr>
          <td>
            <p>DisplayProjectStatistics( ) Method</p>
          </td>
          <td>
            <p>Enables reporting after project statistics have been gathered in GetProjectStatistics( ).</p>
            <p>
              <b>Syntax:</b> <code>DisplayProjectStatistics(tcSource, tcTarget, tcProject)</code></p>
            <p>
              <b>Return Values:</b> NOT THIS.<span class="parameter">lError</span></p>
            <p>
              <b>Parameters:</b>
              <span class="parameter">tcSource </span>Specifies the name of the table containing the source records.<span class="parameter">tcTarget </span>Specifies the name of the table being modified.<span class="parameter">tcProject </span>Specifies the alias of the project being analyzed.</p>
          </td>
        </tr><tr>
          <td>
            <p>DisplayStackXML( ) Method</p>
          </td>
          <td>
            <p>Displays XML file.</p>
            <p>
              <b>Syntax:</b>
              <code> DisplayStackXML(tcXMLFile)</code>
            </p>
            <p>
              <b>Return Value: </b>Logical. .T. if no error occurs.</p>
            <p>Defaults to the current Stack Analysis filename indicated by the <span class="parameter">cSavedStackXML</span> property.</p>
            <p>
              <b>Remarks:</b> This method is similar to<span class="parameter"> DisplayProjectStatistics, </span>except that, instead of being abstract in the engine,<span class="parameter"> cov_engine.DisplayStackXML </span>performs a<span class="parameter"> ShellExecuteA.</span></p>
          </td>
        </tr><tr>
          <td>
            <p>DoMessage( ) Method</p>
          </td>
          <td>
            <p>Displays <span class="parameter">tcMessage</span>. </p>
            <p>
              <b>Syntax:</b> <code>DoMessage(tcMessage [, tnMessageBoxOptions [, tcMessageBoxTitle]])</code></p>
            <p>
              <b>Return Values:</b> <span class="parameter">liReturn</span></p>
            <p>
              <b>Parameters:</b>
              <span class="parameter">tcMessage </span>Specifies the message that appears in the MESSAGEBOX.<span class="parameter">TnMessageBoxOptions </span>Specifies the MESSAGEBOX <span class="parameter">nDialogBoxType </span>setting.<span class="parameter">TcMessageBoxTitle </span>Specifies the MESSAGEBOX <span class="parameter">cTitleBarText</span> setting.<span class="parameter">LiReturn </span>Specifies any return value from MESSAGEBOX( ), or 0 if a WAIT WINDOW executes.</p>
            <p>
              <b>Remarks:</b> If the Coverage Profiler is running in Unattended mode, the message is displayed in a WAIT WINDOW TIMEOUT window so it does not prevent further processing. You can specify the timeout value using COV_TIMEOUT_SECS (a #DEFINE in COV_TUNE.H).</p>
          </td>
        </tr><tr>
          <td>
            <p>Error( ) Method</p>
          </td>
          <td>
            <p>Sets the dialog error flag.</p>
            <p>
              <b>Syntax:</b> <code>Error(nError, cMethod, nLine)</code></p>
            <p>
              <b>Return Values:</b> None</p>
            <p>
              <b>Parameters:</b>
              <span class="parameter">nError </span>Specifies the Visual FoxPro error number.<span class="parameter">CMethod </span>Specifies the name of the method that caused the error.<span class="parameter">NLine </span>Specifies the line number where the error occurred.</p>
            <p>
              <b>Remarks: </b>Depending on the value of COV_DEBUG (a #DEFINE in COV_TUNE.H), this will display an error MESSAGEBOX and release the engine or display a WAIT WINDOW with error information and invoke the native Visual FoxPro error handler to make it possible for you to cancel, suspend, or ignore the current error.</p>
          </td>
        </tr><tr>
          <td>
            <p>FillCoverageFileNameCursor( ) Method</p>
          </td>
          <td>
            <p>Adds files to the list of ignored files.</p>
            <p>
              <b>Syntax:</b> <code>FillCoverageFileNameCursor( )</code></p>
            <p>
              <b>Retu</b>
              <b>rn Values:</b> NOT THIS.<span class="parameter">lError</span></p>
            <p>
              <b>Parameters:</b> None</p>
            <p>
              <b>Remarks:</b> CreateCoverageFileNameCursor( ) calls this method to add the names of the coverage engine file set to the group of files that should be ignored during processing. This method is a hard-coded set of INSERTs in the base coverage engine. You can override this set in a subclass designed to read in a set of file names from a text file generated from the Coverage.pjx file list.</p>
          </td>
        </tr><tr>
          <td>
            <p>FillFileTypeArray( ) Method</p>
          </td>
          <td>
            <p>Initializes the aFileTypes array with known file extensions. See the aFileTypes property.</p>
            <p>
              <b>Syntax:</b> <code>FillFileTypeArray( )</code></p>
            <p>
              <b>Return Values:</b> NOT(EMPTY(THIS.<span class="parameter">aFileTypes</span>[1,1]) OR THIS.<span class="parameter">lError</span>)</p>
            <p>
              <b>Parameters:</b> None</p>
          </td>
        </tr><tr>
          <td>
            <p>FillOneTargetRecord( ) Method</p>
          </td>
          <td>
            <p>Adds unmarked source code to memo field.</p>
            <p>
              <b>Syntax:</b> <code>FillOneTargetRecord(tcSource, tcTarget, tlFillingAll)</code></p>
            <p>
              <b>Return Values:</b> <span class="parameter">lReturn </span>AND(NOT THIS<span class="parameter">.lError)</span></p>
            <p>
              <b>Parameters:</b>
              <span class="parameter">tcSource </span>Specifies the name of the table containing the source records.<span class="parameter">TcTarget </span>Specifies the name of the table being modified.<span class="parameter">TlFillingAll </span>Specifies whether all records are processed in a loop, which changes the user feedback and displayed character handling.</p>
            <p>
              <b>Remarks:</b> Places the unmarked source code for a target record into the appropriate memo field for later marking using a different strategy to find the right code for each type of source code. When COV_TOPSPEED is not #DEFINEd true (.T.), this method also places certain initial statistics into the Target file.</p>
          </td>
        </tr><tr>
          <td>
            <p>FillSourceCursor( ) Method</p>
          </td>
          <td>
            <p>APPENDs the coverage log contents to the coverage analysis source file.</p>
            <p>
              <b>Syntax:</b> <code>FillSourceCursor(tcSource)</code></p>
            <p>
              <b>Return Values:</b> <span class="parameter">lReturn</span></p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">tcSource </span>Specifies the name of the source file.</p>
            <p>
              <b>Remarks:</b> This method calls the SourceAvailable( ) method to eliminate records that refer to source files unavailable for analysis. It marks these records deleted in the source cursor.</p>
          </td>
        </tr><tr>
          <td>
            <p>FillTargetCursor( ) Method</p>
          </td>
          <td>
            <p>Calls the FillOneTargetRecord( ) method for all target records in a loop.</p>
            <p>
              <b>Syntax:</b> <code>FillTargetCursor(tcTarget)</code></p>
            <p>
              <b>Return Values:</b> (THIS<span class="parameter">.iTargetReccount &gt; </span>0 AND NOT THIS<span class="parameter">.lError</span>)</p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">tcTarget </span>Specifies the target file that receives the processed results.</p>
            <p>
              <b>Remarks:</b> Replicates the ObjHits statistics from the CreateTargetCursor( ) method for additional records referring to the same source files with the target files. See the CreateTargetCursor( ) method.</p>
          </td>
        </tr><tr>
          <td>
            <p>FilterListByLocation( ) Method</p>
          </td>
          <td>
            <p>Provides a placeholder for future enhancements. </p>
            <p>
              <b>Syntax:</b> <code>FilterListByLocation( )</code></p>
            <p>
              <b>Return Values:</b> NOT THIS.<span class="parameter">lError</span></p>
            <p>
              <b>Parameters:</b> None</p>
            <p>
              <b>Remarks:</b> FilterListByLocation( ) can be called either when a log loads or in response to a user action, with or without the Coverage Profiler application. This method is abstract in the engine.</p>
          </td>
        </tr><tr>
          <td>
            <p>GetAlias( ) Method</p>
          </td>
          <td>
            <p>Returns the current or default alias of a Coverage Profiler workfile type.</p>
            <p>
              <b>Syntax:</b> <code>GetAlias(tAlias, tcWhichProp)</code></p>
            <p>
              <b>Returns:</b> <span class="parameter">cReturn</span></p>
            <p>
              <b>Parameters:</b>
              <span class="parameter">tAlias </span>Specifies the alias of a file.<span class="parameter">tcWhichProp </span>Specifies the workfile type (currently, either Source or Target) of the current default.</p>
            <p>
              <b>Remarks:</b> GetAlias( ) returns either a currently used alias or the default alias of one of the Coverage Profiler workfile types. The valid workfile types include the following:</p>
            <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
              <p> "SOURCE","TARGET","SKIPPED","COVFILES", and "PROJECT"</p>
            </td></tr></table></div>
            <p>(The list of types is #DEFINEd in COV_SPEC.H as COV_KNOWN_ALIAS_PROPERTIES.) Each workfile type matches one c...Alias property to specify the default alias for this workfile.</p>
            <p>The Coverage Profiler usually has a cursor open using each one of the workfile default aliases. However, the Coverage Profiler is capable of handling many sets of workfiles at the same time, within its data session, as long as you specify separate aliases for each one. The GetAlias( ) method and the system of defined work types plus the following properties make it possible for you to have default alias names without the default aliases being hard-coded: </p>
            <ul><li>
                <p>cBaseFontName</p>
              </li><li>
                <p>cBaseMonoFontName</p>
              </li><li>
                <p>cCovFileAlias</p>
              </li><li>
                <p>cDefaultWritePath</p>
              </li><li>
                <p>cMarExecuted</p>
              </li><li>
                <p>cMarkNotExecuted</p>
              </li><li>
                <p>cOldPath</p>
              </li><li>
                <p>cSavedSkippedFiles</p>
              </li><li>
                <p>cSavedTargetDBF</p>
              </li><li>
                <p>cSkippedAlias</p>
              </li><li>
                <p>cSourceAlias</p>
              </li><li>
                <p>cSourcefile</p>
              </li><li>
                <p>cSuspendedLog</p>
              </li><li>
                <p>cTargetAlias</p>
              </li></ul>
            <p>The engine methods that process the workfiles use aliases as parameters, so you can specify which source, target, or other file you are interested in at any time. Because you usually are interested only in one set of workfiles, however, these methods all use the GetAlias( ) methods to specify which alias and workfile default type to seek if you do not pass them a specific alias or aliases.</p>
          </td>
        </tr><tr>
          <td>
            <p>GetFontsFromUser( ) Method</p>
          </td>
          <td>
            <p>Creates an instance of a common dialog subclass to ask the user to set font properties. If lUsingOCXs is False (.F.) or there has been an error creating an instance of the common dialog, the method uses the GETFONT( ) method. If the first parameter, <span class="parameter">tlBaseMonoFont</span>, is True (.T.), the method shows only monospaced fonts and fills the monospaced font attribute properties of the engine. If this parameter is False (.F.), the second set of base font attribute properties is filled from a list of all available screen fonts.</p>
            <p>See to the GetResourceLocation( ) method for more information on the lUsingOCX<span class="parameter">s</span> property.</p>
            <p>
              <b>Syntax:</b> <code>GetFontsFromUser(tlBaseMonoFont, toMemberHost )</code></p>
            <p>
              <b>Return Values:</b> <span class="parameter">lFontChange</span> AND NOT THIS.<span class="parameter">lError</span></p>
            <p>
              <b>Parameters:</b>
              <span class="parameter">tlBaseMonoFont </span>Specifies the default monospace font style.<span class="parameter">ToMemberHost </span>Specifies a reference to the current Coverage object.</p>
          </td>
        </tr><tr>
          <td>
            <p>GetProjectStatistics( ) Method</p>
          </td>
          <td>
            <p>Creates a cursor containing project information.</p>
            <p>
              <b>Syntax:</b> <code>GetStatistics(tcSource, tcTarget, tcProject)</code></p>
            <p>
              <b>Return Values:</b> <span class="parameter">lReturn</span></p>
            <p>
              <b>Parameters:</b>
              <span class="parameter">tcSource </span>Specifies the name of the alias containing the source records.<span class="parameter">tcTarget </span>Specifies the name of the alias being modified.<span class="parameter">tcProject </span>Specifies the project containing the source files.</p>
            <p>
              <b>Remarks:</b> The information contained in the cursor is in the following format.</p>
            <p>CREATE CURSOR(cProject) ;</p>
            <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
              <p> (Hostfile c(COV_LEN_HOSTFILE), ;FileType c(4), ;Coverable n(8), ;Covered n(8), ;ObjTotal n(8), ;ObjHits n(8))</p>
            </td></tr></table></div>
            <p>GetProjectStatistics( ) creates a header file in this cursor, indicating the project to which this cursor applies and fills this cursor with statistics drawn from the current coverage log that apply to each source file in the project. If necessary, GetProjectStatistics( ) calls MarkOneTargetRecord( ) for any project files that have not yet had their source code marked.</p>
          </td>
        </tr><tr>
          <td>
            <p>GetRegisteredAddins( ) Method</p>
          </td>
          <td>
            <p>Fills the aAddIns array and the cAddIn property.</p>
            <p>
              <b>Syntax:</b> <code>GetRegisteredAddins( )</code></p>
            <p>
              <b>Return Values:</b> None</p>
            <p>
              <b>Parameters:</b> None</p>
          </td>
        </tr><tr>
          <td>
            <p>GetRegistryKeyValue( ) Method</p>
          </td>
          <td>
            <p>Retrieves registry value of user option</p>
            <p>
              <b>Syntax:</b> <code>GetRegistryKeyValue(tcOption, tDefaultValue, tcPath)</code></p>
            <p>
              <b>Return Values:</b> <span class="parameter">vReturn</span></p>
            <p>
              <b>Parameters:</b>
              <span class="parameter">tcOption </span>Specifies the file type option.<span class="parameter">tDefaultValue </span>Specifies the default registry value.<span class="parameter">tcPath </span>Specifies <span class="parameter">RegKey</span>.</p>
            <p>
              <b>Remarks:</b> This method, typically used at startup, uses the registry-handling member of the toolbar in the engine formset to get a registry key value for a user option. It converts the registry value to other TYPE( )s as required and compares this TYPE( ) to the passed value, <span class="parameter">tDefaultValue</span>. It returns the registry value or the default value if the registry value is not found or is of the wrong type.</p>
          </td>
        </tr><tr>
          <td>
            <p>GetResourceLocation( ) Method</p>
          </td>
          <td>
            <p>Specifies whether GETFILE( )/ShowOpen( ) strategy or PUTFILE( )/ShowSave( ) strategy is followed. </p>
            <p>
              <b>Syntax:</b> <code>GetResourceLocation(tcHost, tcTitle, tcCDLFilter, tcFileName, tcWhichDialog, [toMemberHost] )</code></p>
            <p>
              <b>Return Values:</b> <span class="parameter">lcFileName</span></p>
            <p>
              <b>Parameters:</b>
              <span class="parameter">tcHost </span>Specifies the name of the file the method is starting from, usually seeking the matching file name of the uncompiled version of the code. If it is passed, it provides information for the common file dialog .InitDir property. <span class="parameter">tcTitle </span>Specifies the title to use in the dialog or, in the GETFILE( )/PUTFILE( ) version, to use as a WAIT WINDOW NOWAIT prompt. If <span class="parameter">tcHost</span> also is passed and includes a file name, then this information is added to the dialog title or prompt.<span class="parameter">tcCDLFilter </span>Specifies the file types allowed in the dialog. This parameter is expressed in the format required by the common dialog filter expression. If the GETFILE( )/PUTFILE( ) is called, the method parses the common dialog filter to put it into appropriate format for the two Visual FoxPro functions.<span class="parameter">tcFileName </span>Specifies the default file name to display.<span class="parameter">tcWhichDialog </span>Specifies the GETFILE or PUTFILE.<span class="parameter">toMemberHost </span>Specifies an optional form reference that can be passed to indicate where the dialog is displayed. If <span class="parameter">toMemberHost</span> is not passed, the file dialog will display relative to the Coverage frame (if the Coverage frame exists) or to the first form in the formset collection (if the Coverage Profiler is in the Visual FoxPro window).</p>
            <p>
              <b>Remarks:</b> Adds a member of the appropriate common dialog subclass (depending on the value of <span class="parameter">tcWhichDialog</span>) if this is the first call. The dialog subclasses differ in how they set various flags. </p>
            <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
              <p> This method provides for additional dialog subclasses, showing a Help file or print dialog, to be instantiated and used in the future.</p>
            </td></tr></table></div>
            <p>If a common dialog subclass or .ocx-related error occur in the Coverage Profiler, this method sets the lUsingOCXs property to false (.F.) and uses GETFILE( )/PUTFILE( ).</p>
            <p>You can set the #DEFINE COV_USE_OCXS if you prefer to default to the native Visual FoxPro functions even if there are no OCX errors.</p>
          </td>
        </tr><tr>
          <td>
            <p>GetStackXML( ) Method</p>
          </td>
          <td>
            <p>Generates Stack Analysis XML from <span class="parameter">tcLog</span>.</p>
            <p>
              <b>Syntax: </b>
              <code>GetStackXML(tclog)</code>
            </p>
            <p>
              <b>Return Value: </b>Logical. .T. if successful. </p>
            <p>
              <b>Parameters:</b> <span class="parameter">tcLog </span>Specifies the name of the log file.</p>
            <p>
              <b>Remarks:</b> This function defaults to current Coverage source log. The <span class="parameter">tcLog</span> argument is ignored if DEFINEd COV_LOAD_STACK_FROM_DBF is .T.</p>
          </td>
        </tr><tr>
          <td>
            <p>GetTableName( ) Method</p>
          </td>
          <td>
            <p>Generates file names for unattended operation.</p>
            <p>
              <b>Syntax:</b> <code>GetTableName(tcWhichSuffix)</code></p>
            <p>
              <b>Return Values:</b> <span class="parameter">cLogfileStem+SUFFIX</span>[<span class="parameter">+n</span>]<span class="parameter">+</span>.dbf</p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">tcWhichSuffix </span>Specifies which file extension to use.</p>
            <p>
              <b>Remarks:</b> This method allows the coverage engine to generate file names with which to save its work to disk without overwriting existing files. Generally it just supplies file name defaults, but in Unattended mode, this method creates the file names without user intervention. Each method that saves a file to disk calls GetTableName( ) with a specific suffix; for example, in the SaveSkippedCursor:</p>
            <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>cDBFName = ; THIS.GetTableName(COV_SKIPFILEDBF_SUFFIX)</pre></td></tr></table></span></div>
            <p>GetTableName( ) uses the path and stem of the current log file name (THIS.cSourceFile) and attaches the appropriate suffix to this stem plus a digit, followed by the DBF extension. For example, Testlog.txt would produce TESTLOG_SKIP1.DBF in the previous example.</p>
            <p>GetTableName( ) then increments the digit if the generated file name exists, until it finds a name that does not exist.</p>
            <p>The default suffixes are #DEFINEs in COV_TUNE.H.</p>
          </td>
        </tr><tr>
          <td>
            <p>LockScreens( ) Method</p>
          </td>
          <td>
            <p>Freezes or releases LockScreen properties and MousePointer properties for all members of _Screen during various long procedures.</p>
            <p>
              <b>Syntax:</b> <code>LockScreens(tlOn)</code></p>
            <p>
              <b>Return Values:</b> Logical. .T.</p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">tlOn </span>Specifies whether to lock the Lockscreen and MousePointer properties.</p>
          </td>
        </tr><tr>
          <td>
            <p>MarkAllTargetRecords( ) Method</p>
          </td>
          <td>
            <p>Calls the MarkOneTargetRecord( ) method for all target records in a loop. Can be called because <span class="parameter">lMarkAllOnLoad</span> is true (.T.) or because the coverage engine is in Unattended mode.</p>
            <p>
              <b>Syntax:</b> <code>MarkAllTargetRecords(tcSource, tcTarget)</code></p>
            <p>
              <b>Return Values:</b> NOT THIS<span class="parameter">.lError</span></p>
            <p>
              <b>Parameters:</b>
              <span class="parameter">tcSource </span>Specifies the name of the table containing the source records.<span class="parameter">tcTarget </span>Specifies the name of the table being modified.</p>
          </td>
        </tr><tr>
          <td>
            <p>MarkCodeLine( ) Method</p>
          </td>
          <td>
            <p>Creates a marked-up version of a line of code, plus coverage statistics.</p>
            <p>
              <b>Syntax:</b> <code>MarkCodeLine(tcLine, tiExecuted, tnFirst, tnAverage)</code></p>
            <p>
              <b>Return Values:</b> <span class="parameter">CMarkedLine</span></p>
            <p>
              <b>Parameters:</b>
              <span class="parameter">tcLine </span>Specifies the line of code.<span class="parameter">tiExecuted </span>Specifies the number of times <span class="parameter">tcLine</span> was run.<span class="parameter">tnAverage </span>Specifies the average length of time to run.</p>
            <p>
              <b>Remarks:</b> In Coverage mode, MarkCodeLine( ) marks code as "Executed" if <span class="parameter">tiExecuted </span>is a positive number and "not Executed" if <span class="parameter">tiExecuted</span> is 0. In Profile mode, MarkCodeLine( ) marks coverage statistics appropriately for the line. In either mode, MarkCodeLine( ) marks code as uncoverable (preceded by spaces) if <span class="parameter">tiExecuted</span> is .NULL.</p>
          </td>
        </tr><tr>
          <td>
            <p>MarkOneTargetRecord( ) Method</p>
          </td>
          <td>
            <p>Determines the marked status of the current line.</p>
            <p>
              <b>Syntax:</b> <code>MarkOneTargetRecord(tcSource, tcTarget, tlFillingAll)</code></p>
            <p>
              <b>Return Values:</b> <span class="parameter">lReturn </span>AND (NOT THIS<span class="parameter">.lError)</span></p>
            <p>
              <b>Parameters:</b>
              <span class="parameter">tcSource </span>Specifies the name of the table containing the source records.<span class="parameter">tcTarget </span>Specifies the record being modified.<span class="parameter">tlFillingAll </span>Specifies whether other target records are being processed. If all records are processed in a loop, then the user feedback and handling of displayed characters changes.</p>
            <p>
              <b>Remarks:</b> Determines whether the current target record, <span class="parameter">tcTarget</span>, is already marked in the current coverage mode and, if not, passes the relevant information to the MarkTargetCoverage( ) method for processing.</p>
          </td>
        </tr><tr>
          <td>
            <p>MarkTargetCoverage( ) Method</p>
          </td>
          <td>
            <p>Marks up a copy of the source and REPLACEs a memo field in the target file.</p>
            <p>
              <b>Syntax:</b> <code>MarkTargetCoverage(tcSource, tcTarget)</code></p>
            <p>
              <b>Return Values:</b> NOT (EMPTY(<span class="parameter">cMemo</span>) OR THIS.<span class="parameter">lError</span>)</p>
            <p>
              <b>Parameters:</b> <span class="parameter">tcSource S</span>pecifies the name of the table containing the source records.<span class="parameter">tcTarget </span>Specifies the name of the table being modified.</p>
            <p>
              <b>Remarks:</b> MarkTargetCoverage( ) creates a marked-up version of <span class="parameter">tcSource</span> and REPLACEs a memo field in the target file, <span class="parameter">tcTarget</span>, (whether the code is for a class or a full procedure file). </p>
            <p>To perform this action, the method starts with the sourcecode memo. The memo field REPLACEd depends on whether Coverage Profiler is marking Profiler or Coverage information, because the Target record retains both sets of marked-up code.</p>
            <p>This method parses the source code and evaluates its statistics line by line. By default, this method calls the MarkCodeLine( ) method to mark each line when it has the appropriate statistics. However, the way this method marks the code line is #DEFINEd as COV_MARK_CODE_LINE in COV_TUNE.H, not directly implemented as a call to the MarkCodeLine( ) method. This makes it possible for you to replace the call to the MarkCodeLine( ) method with a different marking system. A second #DEFINE, COV_TOPSPEED, in COV_TUNE.H also makes it possible for you to switch the MarkCodeLine( ) call to a simpler, in-line marking system for fastest response time.</p>
            <p>MarkTargetCoverage( ) evaluates each line to find out whether it was executed, how many times it was executed, and its execution timings (first and average) when in Profile mode. However, many lines are considered uncoverable in Coverage Profiler. These lines, such as comments, DEFINE CLASS and ELSE/Otherwise statements, and lines within TEXT ... ENDTEXT, do not appear in coverage logs, because they are not executable. </p>
            <div class="alert"><table width="100%" cellspacing="0" cellpadding="0"><tr><th align="left"><img class="note" alt="Note" src="../local/note.gif"></img>Note </th></tr><tr><td>
              <p>Other uncoverable code lines include #DEFINE statements, empty lines, continuations of executing lines, and parameter lines.</p>
            </td></tr></table></div>
            <p>This method sets the number of times these lines run to .NULL. These lines are not considered when Coverage Profiler compiles statistics. In addition, lines broken by continuation symbols (semicolons) are considered as a single line of code and marked only on the last line.</p>
          </td>
        </tr><tr>
          <td>
            <p>OrderListByTime( ) Method</p>
          </td>
          <td>
            <p>Provides a placeholder for future enhancements and subclasses.</p>
            <p>
              <b>Syntax:</b> <code>OrderListByTime( )</code></p>
            <p>
              <b>Return Values:</b> NOT THIS.<span class="parameter">lError</span></p>
            <p>
              <b>Parameters:</b> None</p>
            <p>
              <b>Remarks:</b> OrderListByTime( ) is abstract in the engine.</p>
          </td>
        </tr><tr>
          <td>
            <p>PassedProperParams( ) Method</p>
          </td>
          <td>
            <p>
              <b>Syntax:</b> <code>PassedProperParams(tcFile, tlUnattended, tcAddIn)</code></p>
            <p>
              <b>Return Values:</b> <span class="parameter">lReturn</span></p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">tcFile </span>Specifies the name of the log file.<span class="parameter">tlUnattended</span> Specifies whether to run in Unattended mode.<span class="parameter">tcAddIn </span>Specifies the add-in file name(s).</p>
            <p>
              <b>Remarks:</b> Test at startup to determine whether passed parameters are appropriate to the class. If any passed parameters are not appropriate TYPE( ), provides a MESSAGEBOX showing what parameters may be passed and RETURNs false (.F.), preventing any further coverage processing, as well as the creation of an instance of the class. </p>
            <p>This method uses a MESSAGEBOX for feedback and stops processing even if the Coverage Profiler is starting up in Unattended mode. If you are setting up the Coverage Profiler for automated testing, be sure your calling program sends correct parameters or the analysis will not proceed.</p>
          </td>
        </tr><tr>
          <td>
            <p>RestoreCoverage( ) Method</p>
          </td>
          <td>
            <p>Resumes coverage logging from suspended operation.</p>
            <p>
              <b>Syntax:</b> <code>RestoreCoverage( )</code></p>
            <p>
              <b>Return Values:</b> None</p>
            <p>
              <b>Parameters:</b> None</p>
            <p>
              <b>Remarks:</b> If the Coverage Profiler previously suspended coverage logging, this method gives the user a chance to resume coverage logging when the Coverage Profiler releases. The user can choose to overwrite this previous log, append new log entries to it, or not resume coverage logging at that time.</p>
          </td>
        </tr><tr>
          <td>
            <p>RunAddin( ) Method</p>
          </td>
          <td>
            <p>Runs an add-in file.</p>
            <p>
              <b>Syntax: </b>
              <code>RunAddin(tcAddin)</code>
            </p>
            <p>
              <b>Return Values:</b> <span class="parameter">lReturn </span>AND NOT THIS<span class="parameter">.lError</span></p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">tcAddin </span>Specifies the name of the file to run.</p>
            <p>
              <b>Remarks:</b> RunAddin( ) runs a file (.scx, .fxp, .app, .prg, .qpx, .qpr, .mpx, or .mpr) that adds functionality to the Coverage object. If you do not pass a file name, RunAddin( ) runs the file specified by the <span class="parameter">cAddIn</span> property.</p>
            <p>The <span class="parameter">tcAddin </span>file must accept an object reference, because the file is run by passing a reference to the coverage form, as in the following examples (depending on the file type):</p>
            <div class="code"><span codeLanguage="other"><table width="100%" cellspacing="0" cellpadding="0"><tr><th> </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="CopyCode image" src="../local/copycode.gif"></img>Copy Code</span></th></tr><tr><td colspan="2"><pre>DO (cFileName) WITH THIS
DO FORM (cFileName) WITH THIS</pre></td></tr></table></span></div>
          </td>
        </tr><tr>
          <td>
            <p>SaveFormsetAttributes( ) Method</p>
          </td>
          <td>
            <p>Saves general frame and formset characteristivs to the registry as Profiler ends.</p>
            <p>
              <b>Syntax:</b>
              <code> SaveFormsetAttributes( )</code>
            </p>
            <p>
              <b>Return Values:</b> None</p>
            <p>
              <b>Parameters:</b> None</p>
          </td>
        </tr><tr>
          <td>
            <p>SaveOptionsToRegistry( ) Method</p>
          </td>
          <td>
            <p>Saves current user values to the registry.</p>
            <p>
              <b>Syntax:</b> <code>SaveOptionsToRegistry( )</code></p>
            <p>
              <b>Return Values:</b> <span class="parameter">lSuccess</span></p>
            <p>
              <b>Parameters:</b> None</p>
            <p>
              <b>Remarks:</b> SaveOptionsToRegistry( ) can be called any time the user's current values should be saved to the registry. It saves the following user preferences: </p>
            <ul><li>
                <p>Work options group </p>
                <p>lStartInProfileModelSmartPathlMarkAllOnLoadcMarkExecutedcMarkNotExecutedlRegisterAddIn </p>
              </li><li>
                <p>UI options group </p>
                <p>Font name, size, italic, bold for base monospace font </p>
              </li></ul>
            <p>There are a few registry settings not saved by this method, because they have to be done at specific moments during the life of the engine. These are:</p>
            <p>Coverage or the main Visual FoxPro frame (must be done when the user makes a choice and will be in effect next session but does not correspond to or affect any of the coverage property values for this session).</p>
            <p>Registered add-ins (this array is manipulated over the life of the session, and the full set of file names it contains is saved to the registry at the end of the session).</p>
          </td>
        </tr><tr>
          <td>
            <p>SaveSkippedCursor( ) Method</p>
          </td>
          <td>
            <p>Saves the skipped files cursor to disk. </p>
            <p>
              <b>Syn</b>
              <b>tax: </b>
              <code>SaveSkippedCursor(tcSkipped)</code>
            </p>
            <p>
              <b>Return Values:</b> RETURN NOT THIS.<span class="parameter">lError</span></p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">tcSkipped </span>Specifies the cursor containing skipped records.</p>
            <p>
              <b>Remarks:</b> Saves the skipped files cursor to disk if it contains any records and places the name of the table on disk in the <span class="parameter">cSavedSkipFiles</span> property. See the <span class="parameter">cSkippedAlias</span> and <span class="parameter">cSavedSkipFiles</span> properties.</p>
          </td>
        </tr><tr>
          <td>
            <p>SaveTargetToDisk( ) Method</p>
          </td>
          <td>
            <p>Saves output file, including marked-up code and statistics, to disk.</p>
            <p>
              <b>Syntax: </b>
              <code>SaveTargetToDisk(tcTarget)</code>
            </p>
            <p>
              <b>Return Values:</b> <span class="parameter">lReturn</span> and NOT THIS<span class="parameter">.lError</span></p>
            <p>
              <b>Parameters:</b> <span class="parameter">tcTarget </span>Specifies the name of the modified table saved to disk.</p>
          </td>
        </tr><tr>
          <td>
            <p>SetFontValues( ) Method</p>
          </td>
          <td>
            <p>Sets up initial font attribute values using registry key values and other defaults. </p>
            <p>
              <b>Syntax:</b> <code>SetFontValues( )</code></p>
            <p>
              <b>Return Values:</b> NOT THIS<span class="parameter">.lError</span></p>
            <p>
              <b>Parameters:</b> None</p>
            <p>
              <b>Remarks:</b> See <span class="parameter">cBaseFontName</span> and <span class="parameter">cBaseMonoFontName</span> for information on how the coverage engine derives these defaults.</p>
          </td>
        </tr><tr>
          <td>
            <p>SetFormsetAttributes( ) Method</p>
          </td>
          <td>
            <p>Reads and restores general frame and formset characteristics.</p>
            <p>
              <b>Syntax:</b> <code>SetFormsetAttributes( )</code></p>
            <p>
              <b>Return Values:</b> None </p>
            <p>
              <b>Parameters:</b> None</p>
            <p>
              <b>Remarks:</b> Reads and restores general frame and formset characteristics from the registry as Profiler starts.</p>
          </td>
        </tr><tr>
          <td>
            <p>SetLogFile( ) Method</p>
          </td>
          <td>
            <p>Attempts to set up a file for analysis.</p>
            <p>
              <b>Syntax:</b> <code>SetLogFile(tcFile)</code></p>
            <p>
              <b>Return Values:</b> <span class="parameter">lReturn</span></p>
            <p>
              <b>Parameters: </b>
              <span class="parameter">tcFile </span>Specifies the name of the file to analyze.</p>
            <p>
              <b>Remarks:</b> If you pass no string value, the SET COVERAGE value is used. If there is no current log file, the method prompts for a file name. If a log file can be set successfully, the method returns .T. If the user designates no log file, the method returns. F. If no new log is specified, the Coverage Engine returns to the currently loaded log, if one is loaded, or releases, if no log is loaded. </p>
          </td>
        </tr><tr>
          <td>
            <p>SetMarks( ) Method</p>
          </td>
          <td>
            <p>Synchronizes and returns the values of <span class="parameter">cMarkExecuted</span> and <span class="parameter">cMarkNotExecuted</span>.</p>
            <p>
              <b>Syntax:</b> <code>SetMarks( )</code></p>
            <p>
              <b>Return Values:</b> NOT THIS<span class="parameter">.lError </span></p>
            <p>
              <b>Parameters:</b> None</p>
            <p>
              <b>Remarks:</b> Synchronizes the lengths of cMarkExecuted and cMarkNotExecuted and returns the values of either or both properties to a default if they are not character-type or both properties are empty. If user options are not available from the registry, this method gets defaults from the #DEFINE values, COV_DEFAULT_MARKNOTEXECUTED and COV_DEFAULT_MARKEXECUTED, which you can set in COV_TUNE.H. A third #DEFINE, COV_DEFAULT_MARKSPACING, makes sure there is space between the marks and the line of code.</p>
          </td>
        </tr><tr>
          <td>
            <p>SetRegisteredAddins( ) Method</p>
          </td>
          <td>
            <p>Saves the file names in the aAddIns array to registry values.</p>
            <p>
              <b>Syntax:</b>
              <code> SetRegisteredAddins( )</code>
            </p>
            <p>
              <b>Return Values:</b> None</p>
            <p>
              <b>Parameters:</b> None</p>
          </td>
        </tr><tr>
          <td>
            <p>SetRegistryKeyValue( ) Method</p>
          </td>
          <td>
            <p>Sets a registry key value from a user option.</p>
            <p>
              <b>Syntax:</b> <code>SetRegistryKeyValue(tcWhichOption, tValue)</code></p>
            <p>
              <b>Return Values:</b> NOT THIS.<span class="parameter">lError</span></p>
            <p>
              <b>Parameters:</b> <span class="parameter">tcWhichOption </span>Specifies the user option to be accessed.<span class="parameter">tValue</span> Specifies the value of <span class="parameter">tcWhichOption</span>.</p>
            <p>
              <b>Remarks:</b> SetRegistryKeyValue( ) uses the registry-handling member of the toolbar in the engine formset to set a registry key value from a user option. It converts all values to string type before sending them to the registry-handler to apply to the registry.</p>
          </td>
        </tr><tr>
          <td>
            <p>SetUIFonts( ) Method</p>
          </td>
          <td>
            <p>Provides font preferences.</p>
            <p>
              <b>Syntax: </b>
              <code>SetUIFonts( )</code>
            </p>
            <p>
              <b>Return Value: </b>NOT THIS<span class="parameter">.lError</span></p>
            <p>
              <b>Parameters:</b> None</p>
            <p>
              <b>Remarks:</b> Abstract in the engine, called by SetUiOptions, SetUIFonts( ), makes it possible for the user font preferences saved in the various Base and BaseMont font properties to be applied to appropriate displayed characters.</p>
          </td>
        </tr><tr>
          <td>
            <p>SetUIOptions( ) Method</p>
          </td>
          <td>
            <p>Sets UI options and defaults.</p>
            <p>
              <b>Syntax: </b>
              <code>SetUIOptions( )</code>
            </p>
            <p>
              <b>Return Value: </b>
              <span class="parameter">lReturn</span> and NOT THIS<span class="parameter">.lError</span></p>
            <p>
              <b>Parameters:</b> None</p>
            <p>
              <b>Remarks:</b> Sets up initial UI options according to user preferences or defaults after initial setup of workfiles. This group of options includes fonts and the array of registered add-ins. It is required for UI display and user interaction with the workfiles, after they have been processed.</p>
          </td>
        </tr><tr>
          <td>
            <p>SetUIToShowCode( ) Method</p>
          </td>
          <td>
            <p>Enables display of current target record in new log.</p>
            <p>
              <b>Syntax: </b>
              <code>SetUIToShowCode(tcTarget)</code>
            </p>
            <p>
              <b>Return Val</b>
              <b>ue: </b>NOT THIS<span class="parameter">.lError</span></p>
            <p>
              <b>Parameters:</b> <span class="parameter">tcTarget </span>Specifies the name of the table being modified.</p>
            <p>
              <b>Remarks:</b> Abstract in the engine, called at the end of SetupWorkFiles( ) to allow UI to show current Target record in the newly loaded log.</p>
          </td>
        </tr><tr>
          <td>
            <p>SetUIToShowFileStates( ) Method</p>
          </td>
          <td>
            <p>Enables reporting of log loading status.</p>
            <p>
              <b>Syntax: </b>
              <code>SetUIToShowFileStates(tcSource, tcTarget)</code>
            </p>
            <p>
              <b>Return Value: </b>NOT THIS<span class="parameter">.lError</span></p>
            <p>
              <b>Parameters:</b> <span class="parameter">tcSource S</span>pecifies the name of the table containing the source records.<span class="parameter">tcTarget </span>Specifies the name of the table being modified.</p>
            <p>
              <b>Remarks:</b> Abstract in the engine, called at the end of SetupWorkFiles( ) to allow UI to indicate success or failure or current attempt to load a log.</p>
          </td>
        </tr><tr>
          <td>
            <p>SetUpWorkFiles( ) Method</p>
          </td>
          <td>
            <p>Sets and validates a coverage log.</p>
            <p>
              <b>Syntax:</b>
              <code> SetupWorkFiles(tcLogFile, tcSource, tcTarget)</code>
            </p>
            <p>
              <b>Return Value: </b>
              <span class="parameter">lReturn</span> AND NOT THIS.<span class="parameter">lError</span></p>
            <p>
              <b>Parameters:</b> <span class="parameter">TcLogFile </span>Specifies the name of the text log to analyze.<span class="parameter">tcSource </span>Specifies the name of the file to use as source.<span class="parameter">tcTarget </span>Specifies the name of the cursor being modified.</p>
            <p>
              <b>Remarks:</b> SetUpWorkFiles( ) sets and validates a coverage log and then creates and fills the source and target work files for this text log. If the user choice is the same as the log file currently loaded, the method asks the user whether the log should be reloaded and analyzed. It makes sure the log is not open in a text window before loading the log. If the user specifies lMarkAllOnLoad, it marks all records in the current mode (Coverage or Profile) after successfully filling the target file with source code entries. If Coverage Profiler is in Unattended mode, it marks all records in both Coverage and Profile mode after successfully filling the target file. If the load succeeds, this method also sets the cDefaultWritePath to mark the path of the text log and the cSourceFile property to hold the name of this text log.</p>
          </td>
        </tr><tr>
          <td>
            <p>SetWorkOptions( ) Method</p>
          </td>
          <td>
            <p>Sets initial user defined options.</p>
            <p>
              <b>Syntax: </b>
              <code>SetWorkOptions( )</code>
            </p>
            <p>
              <b>Return Value: </b>NOT THIS<span class="parameter">.lError</span></p>
            <p>
              <b>Parameters:</b> None</p>
            <p>
              <b>Remarks:</b> SetWorkOptions( ) sets up initial options according to user preferences or defaults before initial setup of workfiles. This group of options includes coverage marks and initial coverage mode and is required for processing the workfiles.</p>
          </td>
        </tr><tr>
          <td>
            <p>ShowProjectStatistics( ) Method</p>
          </td>
          <td>
            <p>Runs coverage analysis figures against a Visual FoxPro project.</p>
            <p>
              <b>Syntax: </b>
              <code>ShowStatistics(tcSource, tcTarget, tcProject)</code>
            </p>
            <p>
              <b>Return Value: </b>
              <span class="parameter">lReturn</span> AND NOT THIS.<span class="parameter">lError</span></p>
            <p>
              <b>Parameters:</b> <span class="parameter">tcSource </span>Specifies the name of the table containing the source records.<span class="parameter">tcTarget </span>Specifies the name of the table being modified.<span class="parameter">tcProject </span>Specifies the project containing <span class="parameter">tcSource</span>.</p>
            <p>
              <b>Remarks:</b> ShowProjectStatistics( ) calls GetProjectStatistics( ) and DisplayProjectStatistics( ) to run coverage analysis figures against a specific Visual FoxPro project set of files.</p>
          </td>
        </tr><tr>
          <td>
            <p>ShowStackXML( ) Method</p>
          </td>
          <td>
            <p>
              <b>Syntax: </b>
              <code>ShowStackXML(tclog)</code>
            </p>
            <p>
              <b>Return Value: </b>Logical. .T. if successful.</p>
            <p>
              <b>Parameters:</b> <span class="parameter">tcLog </span>Specifies the name of the log file.</p>
            <p>
              <b>Remarks:</b> ShowStackXML( ) calls GetStackXML(<span class="parameter">tcLog</span>) and DisplayStackXML(<span class="parameter">tcXMLFile</span>) to run coverage analysis figures against a specific Visual Foxpro project set of files. The <span class="parameter">tcLog</span> argument is ignored if DEFINEd COV_LOAD_STACK_FROM_DBF is .T.</p>
          </td>
        </tr><tr>
          <td>
            <p>ShowStatistics( ) Method</p>
          </td>
          <td>
            <p>Abstract in the base engine.</p>
            <p>
              <b>Syntax:</b>
              <code> ShowStatistics( )</code>
            </p>
            <p>
              <b>Return Value: </b>NOT THIS.<span class="parameter">lError</span></p>
            <p>
              <b>Parameters:</b> None</p>
          </td>
        </tr><tr>
          <td>
            <p>ShowStatus( ) Method</p>
          </td>
          <td>
            <p>Places a message in the status bar or a WAIT WINDOW. See lUsingStatusBar property.</p>
            <p>
              <b>Syntax: </b>ShowStatus(<span class="parameter">cMessage</span>)</p>
            <p>
              <b>Parameters:</b> <span class="parameter">cMessage </span>Specifies the message to display in the status bar or WAIT WINDOW.</p>
          </td>
        </tr><tr>
          <td>
            <p>SourceAvailable( ) Method</p>
          </td>
          <td>
            <p>Replaces the current Source log compiled file name with the full path name of the file holding the uncompiled source code. </p>
            <p>
              <b>Syntax: </b>
              <code>SourceAvailable( )</code>
            </p>
            <p>
              <b>Return Value: </b>
              <span class="parameter">lReturn</span>
            </p>
            <p>
              <b>Parameters:</b> None</p>
            <p>
              <b>Remarks:</b> SourceAvailable( ) calls GetSourceLoc( ) if necessary to locate uncompiled source code. If the <span class="parameter">lSmarthPath</span> property is true (.T.), it uses AddPath( ) to adjust SET (PATH) as the user specifies directories in which to find source files. RETURNs false (.F.) if the source file is on the Ignored Files list, if the file is of an unknown type, or if the uncompiled source code cannot be found.</p>
          </td>
        </tr><tr>
          <td>
            <p>SourceFileIsLog( ) Method</p>
          </td>
          <td>
            <p>Checks the file name held in the cSourceFile property for valid coverage log format.</p>
            <p>
              <b>Syntax:</b>
              <code> SourceFileIsLog( )</code>
            </p>
            <p>
              <b>Return Value: </b>
              <span class="parameter">lReturn</span>
            </p>
            <p>
              <b>Parameters:</b> None</p>
          </td>
        </tr><tr>
          <td>
            <p>SuspendCoverage( ) Method</p>
          </td>
          <td>
            <p>Sets the <span class="parameter">cSuspendedLog</span> property to the name of the current log.</p>
            <p>
              <b>Syntax: </b>
              <code>SuspendCoverage( )</code>
            </p>
            <p>
              <b>Return Value: None</b>
            </p>
            <p>
              <b>Parameters:</b> None</p>
            <p>
              <b>Remarks:</b> Sets <span class="parameter">cSuspendedLog</span> to the name of the current log and temporarily stops Visual FoxPro from writing this log, in one of the following cases: </p>
            <ul><li>
                <p>The passed file name is the same as the current coverage log.</p>
              </li><li>
                <p>No file name is passed and the engine defaults to analyzing the current coverage log.</p>
              </li></ul>
          </td>
        </tr><tr>
          <td>
            <p>ToggleCoverageProfileMode( ) Method</p>
          </td>
          <td>
            <p>Marks all target records in the new mode.</p>
            <p>
              <b>Syntax:</b>
              <code> ToggleCoverageProfileMode(tcSource, tcTarget)</code>
            </p>
            <p>
              <b>Return Value: </b>RETURN NOT THIS.<span class="parameter">lError</span></p>
            <p>
              <b>Parameters:</b> <span class="parameter">tcSource </span>Specifies the name of the table containing the source records.<span class="parameter">tcTarget </span>Specifies the name of the table being modified.</p>
            <p>
              <b>Remarks:</b> If the <span class="parameter">lMarkAllOnLoad</span> property is true (.T.), marks all target records in the new mode.</p>
          </td>
        </tr><tr>
          <td>
            <p>ToggleStackXMLExtendedTree( ) Method</p>
          </td>
          <td>
            <p>Toggles .<span class="parameter">lStackXMLExtendedTree</span>.</p>
            <p>
              <b>Syntax: </b>
              <code>ToggleStackXMLExtendedTree( )</code>
            </p>
            <p>
              <b>Return Value: </b>Logical. .T. if no error occurs.</p>
            <p>
              <b>Parameters:</b> None</p>
            <p>
              <b>Remarks:</b> Designed to be augmented in subclasses to reflect this switch in the UI, change default XSLT on this basis, and so on. This method is similar to<span class="parameter"> ToggleCoverageProfileMode</span>.</p>
          </td>
        </tr></table></div>
    
  </div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle)" tabindex="0"><img id="seeAlsoToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style="display: none;"><h4 class="subHeading">Concepts</h4><span class="linkTerms"><a href="/html/4dbd7912-7e50-4788-9e57-1087f9183d0a.htm">Coverage Profiler Application</a></span><br /><br /></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="Coverage Engine Object">
</OBJECT>
