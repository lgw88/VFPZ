<html DIR="LTR" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>@ ... GET - Command Buttons Command</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/EventUtilities.js">
      
    </script>
    <script src="../local/SplitScreen.js">
      
    </script>
    <script src="../local/Dropdown.js">
      
    </script>
    <script src="../local/script.js">
      
    </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle">
    </input>
    <input type="hidden" id="hiddenScrollOffset">
    </input>
    <img id="dropDownImage" style="display:none; height:0; width:0;" alt="Filter choices image" src="../local/drpdown.gif">
      
      
    </img>
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" alt="DropDownHover image" src="../local/drpdown_orange.gif">
      
      
    </img>
    <img id="collapseImage" style="display:none; height:0; width:0;" alt="Collapse image" src="../local/collapse_all.gif">
      
      
    </img>
    <img id="expandImage" style="display:none; height:0; width:0;" alt="Expand image" src="../local/expand_all.gif">
      
      
    </img>
    <img id="collapseAllImage" style="display:none; height:0; width:0;" alt="CollapseAll image" src="../local/collall.gif">
      
      
    </img>
    <img id="expandAllImage" style="display:none; height:0; width:0;" alt="ExpandAll image" src="../local/expall.gif">
      
      
    </img>
    <img id="copyImage" style="display:none; height:0; width:0;" alt="Copy image" src="../local/copycode.gif">
      
      
    </img>
    <img id="copyHoverImage" style="display:none; height:0; width:0;" alt="CopyHover image" src="../local/copycodeHighlight.gif">
      
      
    </img>
    <div id="header">
      <table width="100%" id="topTable">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">
              Visual FoxPro 9.0 SP2
            </span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">@ ... GET - Command Buttons Command</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td>
            <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> 
									</td>
        </tr>
      </table>
      <table width="100%" id="bottomTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" alt="CollapseAll image" src="../local/collall.gif">
                
                
              </img>
              <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">
                Collapse All
              </label>
              <label id="expandAllLabel" for="toggleAllImage" style="display: none;">
                Expand All
              </label> </span>
            <!-- VFPX languageFilterToolTip removed -->
          </td>
        </tr>
      </table>
      <!-- VFPX languageSpan removed-->
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()">
        </div>
        <font color="DarkGray"></font><p />
    <p> </p>
  <div id="sectionSection0" class="seeAlsoNoToggleSection">
      <p>Included for backward compatibility. Use the <a href="/html/c12db413-abee-455c-9ad0-366dd2b68236.htm">CommandButton Control</a> instead.</p>
    </div>
<!-- VFPX FPW2.6 begin -->
	<p class="vfpx">This command is undocumented in the original VFP9 help file, <br />but the following documentation was found in the FoxPro for Windows 2.6 help, and may still be valid:<br /></p>
	<p />
	<p>Creates a set of push buttons or picture push buttons.</p>
	<div id="syntaxSection" class="section">
		<div id="syntaxCodeBlocks" class="code">
			<span codeLanguage="other">
				<table width="100%" cellspacing="0" cellpadding="0">
				<tr>
					<th align="left"></th>
				</tr>
				<tr>
					<td>
					<pre>@ <span class="parameter">row, column</span> 
GET <span class="parameter">memvar</span> | <span class="parameter">field</span>
FUNCTION <span class="parameter">expC1</span> | PICTURE <span class="parameter">expC2</span>
	[FONT <span class="parameter">expC3</span> [, <span class="parameter">expN1</span>]]
	[STYLE <span class="parameter">expC4</span>]
	[DEFAULT <span class="parameter">expr</span>]
	[SIZE <span class="parameter">expN2</span>, <span class="parameter">expN3</span>
		[, <span class="parameter">expN4</span>]]
	[ENABLE | DISABLE]
	[MESSAGE <span class="parameter">expC5</span>]
	[VALID <span class="parameter">expL1</span> | <span class="parameter">expN5</span>]
	[WHEN <span class="parameter">expL2</span>]
	[COLOR SCHEME <span class="parameter">expN6</span>
	| COLOR <span class="parameter">color pair list</span>]</pre>
					</td>
				<tr>
				</table>
			</span>
		</div>
	</div>
	<p />
	<h4 class="subHeading">Parameters</h4>
<span class="nonLinkTerms"><span class="parameter">row, column</span></span><br />
&nbsp;Row and column are numeric expressions with values of 0 or greater that determine where the first button in a set of push buttons appears. <br />
<br />
&nbsp;The first row is number 0 in the main FoxPro window or a user-defined window. Rows are numbered from top to bottom. In FoxPro for Windows, row 0 is the row immediately under the FoxPro system menu bar. In FoxPro for Macintosh, row 0 is the row immediately under the FoxPro title bar. In FoxPro for MS-DOS, row 0 is the row the FoxPro system menu bar occupies. See SET SYSMENU for information about manipulating the system menu bar so you can place output on row 0 in FoxPro for MS-DOS. <br />
<br />
&nbsp;The first column is number 0 in the main FoxPro window or a user-defined window. Columns are numbered from left to right. <br />
<br />
&nbsp;When the first button in a set of push buttons is directed to a user-defined window, the row and column coordinates are relative to the user-defined window, not the main FoxPro window. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, a position in the main FoxPro window or in a user-defined window is determined by the font of the main FoxPro window or the user-defined window. Most fonts can be displayed in a wide variety of sizes, and some are proportionally spaced. A row corresponds to the height of the current font; a column corresponds to the average width of a letter in the current font. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, you can position the first button in a set of push buttons in a window with decimal fractions for row and column coordinates. In FoxPro for MS-DOS, decimal fractions used for row and column coordinates are rounded to the nearest integer value.<br />
<br />
<span class="nonLinkTerms"><span class="parameter">memvar</span></span> | <span class="parameter">field</span><br />
&nbsp;When you choose a push button, your choice is stored to the memory variable or array element <span class="parameter">memvar</span> or to the field <span class="parameter">field</span>. <span class="parameter">memvar</span> or <span class="parameter">field</span> must be of numeric or character type. <br />
<br />
&nbsp;If <span class="parameter">memvar</span> or <span class="parameter">field</span> is of numeric type, a number corresponding to the push button choice is stored to the memory variable, array element or field specified with <span class="parameter">memvar</span> or <span class="parameter">field</span>. For example, if you create four push buttons and choose the third button, 3 is stored. If <span class="parameter">memvar</span> or <span class="parameter">field</span> is of character type, the prompt of the push button you choose is stored to the memory variable, array element or field specified with <span class="parameter">memvar</span> or <span class="parameter">field</span>.<br />
<br />
<span class="nonLinkTerms">FUNCTION <span class="parameter">expC1</span> | PICTURE <span class="parameter">expC2</span><br /></span>
&nbsp;When creating push buttons, you must include the FUNCTION clause, the PICTURE clause or both. There is no advantage to any of the three methods. The FUNCTION or PICTURE clause contains the push button specification code, an asterisk (*), and the text for the individual push button prompts.<br />
<br />
&nbsp;The FUNCTION character expression <span class="parameter">expC1</span> must begin with *. To create the push button prompts, include a space after the asterisk followed by a list of the prompts separated by semicolons. One button is created for each prompt. For example, the following FUNCTION clause creates push buttons with the prompts OK and Cancel:<br />
<br />
&nbsp;... FUNCTION '* OK;Cancel' SIZE 1, 8 ... <br />
<br />
&nbsp;The PICTURE character expression <span class="parameter">expC2</span> uses the same syntax as the FUNCTION  character expression except the PICTURE character expression must begin with @ followed by an asterisk (*). For example, the following PICTURE clause creates push buttons with the prompts OK and Cancel:<br />
<br />
&nbsp;.. PICTURE '@* OK;Cancel' SIZE 1, 8 ... <br />
<br />
&nbsp;You can also include both the FUNCTION and PICTURE clauses to create push buttons. If both are included, the FUNCTION character expression <span class="parameter">expC1</span> must contain * to create the push buttons followed by a space and the push button prompts. The PICTURE character expression <span class="parameter">expC2</span> can include prompts to create additional push buttons.<br />
<br />
&nbsp;The following examples illustrate the various forms of syntax you can use to create push buttons. Two push buttons are created: OK and Cancel. The first button (OK) is placed in the second row and second column. A number corresponding to the button chosen is stored to the memory variable MCHOICE. <br />
<br />
&nbsp;FUNCTION clause only:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '* OK;Cancel' SIZE 1, 8<br />
&nbsp;READ<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;STORE '* OK;Cancel' TO mprompts<br />
&nbsp;@ 2,2 GET mchoice FUNCTION mprompts SIZE 1, 8<br />
&nbsp;READ<br />
<br />
&nbsp;PICTURE clause only:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice PICTURE '@* OK;Cancel' SIZE 1, 8<br />
&nbsp;READ<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice PICTURE '@*' + ' OK;Cancel' SIZE 1, 8<br />
&nbsp;READ<br />
<br />
&nbsp;FUNCTION and PICTURE clauses:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*' ;<br />
&nbsp;&nbsp;PICTURE ' OK;Cancel' SIZE 1, 8<br />
&nbsp;READ<br />
<br />
<span class="nonLinkTerms">Push Buttons with Picture Prompts<br /></span>
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, the prompt for a push button can also be the name of a picture file. In FoxPro for Windows, the picture file can be a bitmap file with a .BMP extension. In FoxPro for Macintosh, you can use a picture file of PICT type or a .BMP bitmap file.<br />
<br />
&nbsp;When a push button uses a picture file for a prompt, the push button mimics the behavior of a push button with a text prompt. For example, the picture file appears on a button but the push button isn't displayed. Like choosing a push button, choosing the picture prompt stores the push button's value to <span class="parameter">memvar</span> or <span class="parameter">field</span>. <br />
<br />
&nbsp;To use a picture file in a push button, add B to the push button specification code. The FUNCTION and PICTURE clause specification codes that create a push button are * and @*, respectively. To create a push button with picture prompts, use the codes *B and @*B, followed by a space and the picture filename. If the picture file is not located in the default directory or folder, include the path to the picture file with the picture filename.<br />
<br />
&nbsp;-------------------------------<br />
&nbsp;Note - The pictures aren't clipped, reduced or enlarged to fit the push button. Use the SIZE clause to adjust the size of the push buttons to accommodate the pictures.<br />
&nbsp;-------------------------------<br />
&nbsp;<br />
&nbsp;If you omit the extension for the picture file, FoxPro for Macintosh first looks for a picture file with the name you specified and a .BMP extension. If a picture file with a .BMP extension and the name you specified isn't found, FoxPro for Macintosh then looks for a file with the name you specified and a .PCT extension. If a picture file with a .PCT extension and the name you specified isn't found, FoxPro for Macintosh then looks for a picture file with the name you specified without an extension.<br />
<br />
<span class="nonLinkTerms">Picture Masks and Push Buttons<br /></span>
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, a picture push button has three states: up, down and disabled. FoxPro automatically controls the appearance of a picture push button when it is in each of these three states, but you can override the default appearance by using a picture mask. <br />
<br />
&nbsp;A mask is used to control the transparent areas of a picture push button. By default, the white areas are transparent. If a mask is present, the white areas of the mask, not the picture file, are transparent. <br />
<br />
&nbsp;A mask is a monochrome picture file. In FoxPro for Windows, a mask is a .BMP with an .MSK extension. In FoxPro for Macintosh, a mask can be a .BMP with an .MSK extension or a PICT type file with a .PCM extension. The mask must have the same base name as the picture file and the appropriate extension. FoxPro automatically looks for a mask for a picture file in the same directory or folder where the picture file is located. <br />
<br />
&nbsp;In most cases, a mask isn't necessary. If you don't need anything in your picture to appear white or your picture file has a white background, the picture push button will appear as desired in the up, down and disabled states.<br />
<br />
&nbsp;When a picture push button has a mask and is in the up or down state, any white areas in the picture file appear transparent, allowing the color of the button face to show through. However, you can maintain the white color of certain areas. <br />
<br />
&nbsp;Suppose that you have a picture file with a dog on a white background; the dog has white eyes and the button face is red. You want the background of the button to appear red but you want the dog's eyes to be white, not red. Make a mask that is the same size as the picture file but includes only two colors, black and white. Leave the background of the mask white but make the dog - including his eyes - completely black. When the button appears, the background is red to match the button face but the dog's eyes are white.<br />
<br />
&nbsp;When a picture push button is disabled, any white areas in the picture file appear transparent so the color of the button face shows through. Any non-white areas appear dark gray. If the button has a mask, all white areas in the mask are transparent so the color of the button face shows through, and all black areas appear dark gray.<br />
<br />
<span class="nonLinkTerms">PICTURE and FUNCTION Options N, T, H, V, 2 and 3<br /></span>
&nbsp;Additional options can be combined with the * specification code to modify the behavior (N and T) and appearance (H, V, 2 and 3) of push buttons. <br />
<br />
&nbsp;The 2 (two-dimensional) and 3 (three-dimensional) specification codes are only available in FoxPro for Macintosh.<br />
<br />
&nbsp;Option&nbsp;Description<br />
&nbsp;------&nbsp;-----------<br />
&nbsp;<br />
&nbsp;   N&nbsp;Does not terminate the READ when a push button is chosen.<br />
<br />
&nbsp;   T&nbsp;Terminates the READ when a push button is chosen. This is the default behavior.<br />
<br />
&nbsp;   H&nbsp;Position the push buttons in a horizontal row.<br />
<br />
&nbsp;   V&nbsp;Position the push buttons in a vertical column. This is the default orientation.<br />
<br />
&nbsp;   2&nbsp;Creates flat (two-dimensional) black-and-white push buttons identical to push buttons in Macintosh dialogs.<br />
<br />
&nbsp;   3&nbsp;Creates three-dimensional push buttons identical to push buttons in FoxPro for Macintosh dialogs. This is the default push button type in FoxPro for Macintosh. <br />
<br />
&nbsp;You can combine the T or N option with the H, V and 2 or 3 options. For example, the following clause creates a horizontal row of buttons and doesn't cause the READ to terminate when one of the buttons is chosen:<br />
<br />
&nbsp;... FUNCTION '*NH ... '<br />
<br />
&nbsp;In FoxPro for Macintosh, the following clause creates a horizontal row of two-dimensional buttons and doesn't cause the READ to terminate when one of the buttons is chosen:<br />
<br />
&nbsp;... FUNCTION '*NH2 ... '<br />
<br />
<span class="nonLinkTerms">Push Buttons with Special Features<br /></span>
&nbsp;You can assign a hot key to a button, disable a button, or create a default or escape button. To assign these special features to a push button, you must include special characters when defining the prompt. The special characters are removed when the prompt is stored to <span class="parameter">memvar</span> or <span class="parameter">field</span>.<br />
<br />
<span class="nonLinkTerms">Hot Keys<br /></span>
&nbsp;In FoxPro for MS-DOS, a hot key is a highlighted letter in the push button prompt that you can type to immediately choose a push button. Pressing the hot key selects the button and chooses it. To assign a hot key, place a backslash and a less-than sign (\&lt;) before the desired character of the push button prompt. <br />
<br />
&nbsp;A hot key doesn't choose the push button if the current object is a GET field, a text-editing region, a pop-up or a list.<br />
<br />
&nbsp;If the current object is an @ ... GET input field or a text-editing region, pressing the hot key enters the character in the field or the text-editing region. If the current object is a popup or a list, pressing the hot key selects the first option on the popup or list whose prompt begins with the hot key character. <br />
<br />
&nbsp;In FoxPro for Windows, a hot key is an underlined letter in the push button prompt that you can type to immediately choose the button. If the current object is an @ ... GET input field, a text-editing region, a popup or a list and KEYCOMP is set to WINDOWS, you can press the Alt key and the hot key to choose the push button. <br />
<br />
&nbsp;In FoxPro for Macintosh, if KEYCOMP is set to MAC (the default), hot keys aren't highlighted or underlined. If KEYCOMP is set to DOS or WINDOWS, hot keys are underlined.<br />
<br />
&nbsp;The following example creates the OK and Cancel buttons with hot keys O and C, respectively:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,8 GET mchoice FUNCTION '*  \&lt;OK;\&lt;Cancel'<br />
&nbsp;READ<br />
<br />
<span class="nonLinkTerms">Disabled Push Buttons<br /></span>
&nbsp;You can disable a push button so it can't be selected or chosen. Disabled push buttons are shown in disabled colors. To disable a single push button, place two backslashes (\\) before the button's prompt. To disable a set of push buttons, include the DISABLE keyword.<br />
<br />
&nbsp;The OK push button is disabled in the following example:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '* \\OK;Cancel'<br />
&nbsp;READ<br />
<br />
<span class="nonLinkTerms">Default Push Buttons<br /></span>
&nbsp;A default push button is typically used to exit a data-entry screen, dialog or routine and accept any changes made in the screen, dialog or routine. To create a default push button, place a backslash and an exclamation point (\!) before the push button's prompt. <br />
<br />
&nbsp;The following example specifies the OK button as the default push button:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '*  \!OK;Cancel'<br />
&nbsp;READ<br />
<br />
&nbsp;In FoxPro for MS-DOS, the default push button is enclosed in double angle brackets to distinguish it from other push buttons. The default push button is automatically chosen when you press Ctrl+Enter or Ctrl+W. You can specify only one default push button for each READ.<br />
<br />
&nbsp;In FoxPro for Windows, the default push button is surrounded by a thick border. Press Enter, Ctrl+Enter or Ctrl+W to choose the default push button. The KEYCOMP setting determines the behavior of default push buttons in FoxPro for Windows in the following ways:<br />
<br />
&nbsp;&nbsp;If you SET KEYCOMP TO DOS, the behavior of the default push button is the same as the behavior of a default push button in FoxPro for MS-DOS.<br />
<br />
&nbsp;&nbsp;If you SET KEYCOMP TO WINDOWS, the default push button changes as you move between buttons. The push button specified with \! is the default button when objects besides push buttons are active. When a push button is active, it becomes the default push button.<br />
<br />
&nbsp;In FoxPro for Macintosh, the default push button is surrounded by a thick border. The KEYCOMP setting determines the behavior of default push buttons in FoxPro for Macintosh in the following ways:<br />
<br />
&nbsp;&nbsp;If you SET KEYCOMP TO DOS, the default push button is always the same and is chosen by pressing Ctrl+Enter.<br />
<br />
&nbsp;&nbsp;If you SET KEYCOMP TO WINDOWS, the default button in a dialog is surrounded by a bold border and is always the same. It is chosen by pressing Enter or Ctrl+Enter. However, pressing Enter when a text editing region is the current control moves the cursor to the next line in the text editing region. In text editing regions, press Ctrl+Enter to chose the default button.<br />
<br />
&nbsp;&nbsp;If you SET KEYCOMP TO MAC, the default button in a dialog is surrounded by a bolder border and is always the same. It is chosen by pressing Enter. However, pressing Enter when a text editing region is the current control moves the cursor to the next line in the text editing region. In text editing regions, press Ctrl+Enter to chose the default button.<br />
<br />
<span class="nonLinkTerms">Escape Push Buttons<br /></span>
&nbsp;An escape push button is automatically chosen when you press the Esc key. An escape button is typically used to exit a data-entry screen, dialog or routine and discard any changes made in the screen, dialog or routine. You can specify only one escape push button for each READ. <br />
<br />
&nbsp;In the absence of an escape push button, pressing Esc when editing an @ ... GET input field ends the editing and restores the original value to the field. If the field has a VALID procedure, the procedure isn't executed. When an escape push button is present, pressing Esc saves the contents of the current @ ... GET input field contents and executes the VALID procedure.<br />
<br />
&nbsp;To create an escape push button, place a backslash and a question mark (\?) before the push button's prompt. <br />
<br />
&nbsp;The following example specifies the Cancel push button as the escape push button:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '* OK;\?Cancel'<br />
&nbsp;READ<br />
<br />
<span class="nonLinkTerms">Push Buttons with Combined Characteristics &nbsp;<br /></span>
&nbsp;You can create a push button with more than one special feature. In the following example, the OK button is the default button and is assigned O as its hot key character. The Cancel button is the escape button and is assigned C as its hot key character. The hot key designators immediately precede the desired hot key character.<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2, 2 GET mchoice FUNCTION '*  \!\&lt;OK;\?\&lt;Cancel'<br />
&nbsp;READ<br />
<br />
<span class="nonLinkTerms">FONT <span class="parameter">expC3</span> [, <span class="parameter">expN1</span>]<br /></span>
&nbsp;The character expression <span class="parameter">expC3</span> is the name of the font, and the numeric expression <span class="parameter">expN1</span> is the font size. For example, the following clause can be used to display the push button prompts in 16-point Courier font:<br />
<br />
&nbsp;FONT 'Courier', 16 <br />
<br />
&nbsp;If you include the FONT clause but omit the font size <span class="parameter">expN1</span>, a 10-point font is used.<br />
<br />
&nbsp;In FoxPro for Windows, if the font you specify is not available, a font with similar font characteristics is substituted.<br />
<br />
&nbsp;In FoxPro for Macintosh, if the font you specify is not available, the Chicago font is used.<br />
<br />
&nbsp;In FoxPro for MS-DOS, the FONT clause is ignored.<br />
<br />
&nbsp;If the FONT clause is omitted and the push buttons are placed in the main FoxPro window, the main FoxPro window font is used. If the FONT clause is omitted and the push buttons are placed in a user-defined window, the user-defined window font is used. <br />
<br />
<span class="nonLinkTerms">STYLE <span class="parameter">expC4</span><br /></span>
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, include the STYLE clause to specify a font style for the push button prompts. If the font style you specify is not available, a font style with similar characteristics is substituted.<br />
<br />
&nbsp;The font style is specified with <span class="parameter">expC4</span>. If the STYLE clause is omitted, the normal font style is used.<br />
<br />
&nbsp;Character&nbsp;Font Style<br />
&nbsp;---------&nbsp;----------<br />
&nbsp;<br />
&nbsp;&nbsp;B&nbsp;&nbsp;Bold<br />
<br />
&nbsp;&nbsp;C&nbsp;&nbsp;Condense*<br />
<br />
&nbsp;&nbsp;E&nbsp;&nbsp;Extend*<br />
<br />
&nbsp;&nbsp;I&nbsp;&nbsp;Italic<br />
<br />
&nbsp;&nbsp;N&nbsp;&nbsp;Normal<br />
<br />
&nbsp;&nbsp;O&nbsp;&nbsp;Outline<br />
<br />
&nbsp;&nbsp;Q&nbsp;&nbsp;Opaque<br />
<br />
&nbsp;&nbsp;S&nbsp;&nbsp;Shadow<br />
<br />
&nbsp;&nbsp;-&nbsp;&nbsp;Strikeout*<br />
<br />
&nbsp;&nbsp;T&nbsp;&nbsp;Transparent<br />
<br />
&nbsp;&nbsp;U&nbsp;&nbsp;Underline<br />
<br />
&nbsp;* The Condense and Extend styles are only available in FoxPro for Macintosh. The Strikeout style is only available in FoxPro for Windows.<br />
<br />
<br />
&nbsp;You can include more than one character to specify a combination of font styles. For example, the following clause specifies Bold Italic: <br />
<br />
&nbsp;STYLE 'BI'<br />
<br />
&nbsp;The STYLE clause is ignored in FoxPro for MS-DOS.<br />
<br />
<span class="nonLinkTerms">DEFAULT <span class="parameter">expr</span><br /></span>
&nbsp;When you choose a push button, your choice is saved in the memory variable, array element or field you specify. If you specify a memory variable that doesn't exist, it is automatically created and initialized if you include DEFAULT. However, an array element isn't created if you specify an array element in a DEFAULT clause. The DEFAULT clause is ignored if the memory variable already exists or you specify a field.<br />
<br />
&nbsp;-------------------------------<br />
&nbsp;Note - If the DEFAULT clause isn't included and the memory variable you specify doesn't exist, the error message "Variable not found" appears. <br />
&nbsp;--------------------------------<br />
<br />
&nbsp;The DEFAULT expression <span class="parameter">expr</span> determines the type of memory variable created and its initial value. <span class="parameter">expr</span> must be of numeric or character type. The following are examples of DEFAULT clauses for push buttons: <br />
<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '* OK;Cancel' DEFAULT 'OK'<br />
&nbsp;READ<br />
<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '* OK;Cancel' DEFAULT 2<br />
&nbsp;READ<br />
<br />
&nbsp;STORE 'OK' TO button<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '* OK;CANCEL' DEFAULT button<br />
&nbsp;READ<br />
<br />
<span class="nonLinkTerms">SIZE <span class="parameter">expN2</span>, <span class="parameter">expN3</span> [, <span class="parameter">expN4</span>]<br /></span>
&nbsp;The numeric expression <span class="parameter">expN2</span> specifies the height in rows of the push buttons. In FoxPro for MS-DOS, a push button is always one line high, so the numeric expression <span class="parameter">expN2</span> is ignored. <br />
<br />
&nbsp;By default, the width of each individual button is determined by the length of the push button prompt text. The numeric expression <span class="parameter">expN3</span> specifies the width (in columns) of each push button. A push button will never be sized smaller than its prompt.<br />
<br />
&nbsp;By default, no rows are placed between vertical buttons and a single column is placed between horizontal buttons. The spacing between push buttons is specified with <span class="parameter">expN4</span>. If you create vertical push buttons, <span class="parameter">expN4</span> specifies the number of rows between the buttons. If you create horizontal buttons, <span class="parameter">expN4</span> specifies the number of columns between the buttons. <br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, the push button font determines the size of the push buttons. The push button font is specified with the FONT clause. If the FONT clause is omitted, the push buttons use the font of the parent window (the main FoxPro window or a user-defined window). <br />
<br />
&nbsp;The following example demonstrates how the SIZE clause controls the button spacing:<br />
<br />
&nbsp;CLEAR<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '* OK;Cancel' ;<br />
&nbsp;&nbsp;DEFAULT 1 SIZE 2, 10, 1<br />
&nbsp;@ 2,16 GET mchoice FUNCTION '* OK;Cancel' ;<br />
&nbsp;&nbsp;DEFAULT 1 SIZE 2, 10, 2<br />
&nbsp;READ<br />
<br />
<span class="nonLinkTerms">&nbsp;ENABLE | DISABLE<br /></span>
<br />
&nbsp;Push buttons by default are enabled when READ or READ CYCLE is issued. You can prevent a set of buttons from being selected when READ or READ CYCLE is issued by including DISABLE. <br />
<br />
&nbsp;Disabled push buttons cannot be selected and are displayed in the disabled colors. To disable individual push buttons instead of the entire set, see "Disabled Push Buttons" earlier in this section. Use SHOW GET ENABLE to enable a set of disabled push buttons.<br />
<br />
<span class="nonLinkTerms">MESSAGE <span class="parameter">expC5</span><br /></span>
&nbsp;The MESSAGE clause character expression <span class="parameter">expC5</span> appears when a push button is selected. In FoxPro for MS-DOS, the message is centered by default on the last line of the main FoxPro window. The message location can be changed with SET MESSAGE.<br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, the message is placed in the graphics-based status bar. If the graphics-based status bar has been turned off with SET STATUS BAR OFF, the message is placed on the last line of the main FoxPro window.<br />
<br />
<span class="nonLinkTerms">VALID <span class="parameter">expL1</span> | <span class="parameter">expN5</span><br /></span>
&nbsp;You can include an optional VALID expression <span class="parameter">expL1</span> or <span class="parameter">expN5</span> that is evaluated when a push button is chosen. That is, VALID isn't evaluated when you select (move to) a button, but when you actually choose a button by pressing Enter or Spacebar or clicking the button. <br />
<br />
&nbsp;Typically, <span class="parameter">expL1</span> or <span class="parameter">expN5</span> is a user-defined function (UDF). With a user-defined function you can select, enable or disable other objects, open a Browse window, open another data-entry screen, or move to a new record. CLEAR READ can be included in the user-defined function to terminate the READ.<br />
<br />
&nbsp;<span class="parameter">expL1</span><br />
&nbsp;&nbsp;When a logical value is returned to the VALID clause, the logical value is ignored and the push buttons remain the active control. However, you can specify a UDF that returns a logical value to the VALID clause and activates another object.<br />
<br />
&nbsp;<span class="parameter">expN5</span><br />
&nbsp;&nbsp;A VALID clause that includes a numeric expression is used to specify which object is activated after a push button is chosen. Objects are @ ... GET input fields, check boxes, lists, popups, spinners, text-editing regions and each individual button in a set of push, radio and invisible buttons. <br />
<br />
&nbsp;The expression <span class="parameter">expN5</span> has one of three effects:<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN5</span> = 0, the push button you choose remains the active button.<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN5</span> is positive, <span class="parameter">expN5</span> indicates the number of objects to advance. For example, when the last button in a set of push buttons is selected and VALID returns 1, the next object is activated. If <span class="parameter">expN5</span> is greater than the number of objects remaining, the READ is terminated (unless READ CYCLE is issued to activate the objects).<br />
<br />
&nbsp;&nbsp;When <span class="parameter">expN5</span> is negative, <span class="parameter">expN5</span> indicates the number of objects to move back. For example, when the first button in a set of push buttons is selected and VALID returns -1, the previous object is activated. If <span class="parameter">expN5</span> moves back past the first object, the READ is terminated (unless READ CYCLE is issued to activate the objects).<br />
<br />
&nbsp;The following is an example of what you can do with a user-defined function. Five buttons are displayed vertically. The button choices are used to position the record pointer. The N option is included so the READ isn't terminated when you choose a button. When you choose a button, the user-defined function GOREC is executed.    <br />
<br />
&nbsp;CLOSE DATABASES<br />
&nbsp;USE customer<br />
<br />
&nbsp;SET TALK OFF<br />
&nbsp;DEFINE WINDOW one FROM 3,5 TO 18,20 FLOAT DOUBLE COLOR SCHEME 5<br />
&nbsp;ACTIVATE WINDOW one<br />
&nbsp;@ 1,2 GET mchoice FUNCTION '*NV Next;Prior;Top;Bottom;Quit';<br />
&nbsp;&nbsp;SIZE 2, 10, 1 VALID GOREC() DEFAULT 1<br />
&nbsp;READ CYCLE<br />
&nbsp;CLEAR WINDOW<br />
<br />
&nbsp;PROCEDURE gorec<br />
&nbsp;DO CASE<br />
&nbsp;&nbsp;CASE mchoice = 1<br />
&nbsp;&nbsp;&nbsp;SKIP<br />
&nbsp;&nbsp;&nbsp;IF EOF()<br />
&nbsp;&nbsp;&nbsp;&nbsp;SKIP -1<br />
&nbsp;&nbsp;&nbsp;ENDIF<br />
&nbsp;&nbsp;CASE mchoice = 2<br />
&nbsp;&nbsp;&nbsp;SKIP -1<br />
&nbsp;&nbsp;&nbsp;IF BOF()<br />
&nbsp; &nbsp;&nbsp;&nbsp;SKIP<br />
&nbsp;&nbsp;&nbsp;ENDIF<br />
&nbsp;&nbsp;CASE mchoice = 3<br />
&nbsp;&nbsp;&nbsp;GO TOP<br />
&nbsp;&nbsp;CASE mchoice = 4<br />
&nbsp;&nbsp;&nbsp;GO BOTTOM<br />
&nbsp;&nbsp;CASE mchoice = 5<br />
&nbsp;&nbsp;&nbsp;CLEAR READ<br />
&nbsp;ENDCASE<br />
&nbsp;@ 12,6 SAY ALLTRIM(STR(RECNO()))<br />
&nbsp;RETURN<br />
<br />
<span class="nonLinkTerms">WHEN <span class="parameter">expL2</span><br /></span>
&nbsp;The WHEN clause allows or prohibits selection of a set of push buttons based on the logical value of <span class="parameter">expL2</span>, which must evaluate to a logical true (.T.) before the push buttons can be selected. If <span class="parameter">expL2</span> evaluates to a logical false (.F.), the push buttons cannot be selected and are skipped over if placed between other objects.<br />
<br />
<span class="nonLinkTerms">COLOR SCHEME <span class="parameter">expN6</span> | COLOR <span class="parameter">color pair list</span><br /></span>
&nbsp;If you do not include a COLOR clause, push button colors are determined by the color scheme for the main FoxPro window; if push buttons are placed in a user-defined window, the window's color scheme determines the push button colors. <br />
<br />
&nbsp;The colors of push buttons can be specified by including the number of an existing color scheme in the COLOR SCHEME clause or a set of color pairs in the COLOR clause. <br />
<br />
&nbsp;A color scheme is a set of 10 predefined color pairs. The color pairs in a color scheme can be changed with SET COLOR OF SCHEME. In FoxPro for MS-DOS, the color pairs in a color scheme can also be changed in the Color Picker.<br />
<br />
&nbsp;A color pair is a set of two letters separated by a forward slash. The first letter specifies the foreground color and the second letter specifies the background color.<br />
<br />
&nbsp;For example, this color pair specifies a red foreground on a white background:<br />
<br />
&nbsp;R/W<br />
<br />
&nbsp;For a list of colors and their corresponding color letters, see SET COLOR Overview or Color Table by Color Pair.<br />
<br />
&nbsp;A color pair can also be specified with a set of six RGB (Red Green Blue) color values separated by commas. The first three color values specify the foreground color and the second three color values specify the background color. The color values can range from 0 through 255. <br />
<br />
&nbsp;The R/W color pair in the example above can also be specified with this RGB color pair:<br />
<br />
&nbsp;RGB(255,0,0,255,255,255)<br />
<br />
&nbsp;In FoxPro for Windows and FoxPro for Macintosh, the COLOR clause does not affect the color of push buttons. Only the message color (if the message is not displayed in the status bar) is affected by the COLOR clause.<br />
<br />
&nbsp;The following table lists the color pairs and what each color pair in the list controls.<br />
<br />
&nbsp;Color Pair&nbsp;&nbsp;Push Button<br />
&nbsp;  Number&nbsp;&nbsp; Attribute<br />
&nbsp;----------&nbsp;&nbsp;-----------<br />
<br />
&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;Message<br />
<br />
&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;Selected button prompt - FoxPro for MS-DOS only<br />
<br />
&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;Hot keys - FoxPro for MS-DOS only<br />
<br />
&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;Enabled button prompt - FoxPro for MS-DOS only<br />
<br />
&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;Disabled button prompt - FoxPro for MS-DOS only<br />
<br />
&nbsp;The following example creates OK and Cancel push buttons with the hot keys O and C respectively. In addition, the buttons have the following color characteristics:<br />
<br />
&nbsp;&nbsp;The selected button is shown with a bright white prompt on a blue background (W+/B).<br />
<br />
&nbsp;&nbsp;Hot key characters are shown in red on a blue background (R/B).<br />
<br />
&nbsp;&nbsp;Enabled buttons are shown with a yellow prompt on a blue background (GR+/B).<br />
<br />
&nbsp;&nbsp;Disabled buttons are shown with a white prompt on a blue background (W/B).<br />
<br />
&nbsp;When you skip a color pair, you must include a comma where the color pair is omitted. <br />
<br />
&nbsp;Here are the commands:<br />
<br />
&nbsp;STORE 1 TO mchoice<br />
&nbsp;@ 2,2 GET mchoice FUNCTION '* \&lt;OK;\&lt;CANCEL;\\DISABLED';<br />
&nbsp;&nbsp;COLOR ,,,,,W+/B,R/B,,GR+/B,W/B<br />
&nbsp;READ<br />
<br />
	<h1 class="heading">
	<span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle)" tabindex="0"><img id="remarksToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>Remarks</span></h1>
	<div id="remarksSection" class="section" name="collapseableSection" style="display: none;">
<p><br />
This variation of @ ... GET creates push buttons or picture push buttons. A single button or a group of buttons can be created. In FoxPro for MS-DOS, a push button is shown as a string of text between right and left angle brackets.<br />
<br />
If you use the Screen Builder to create your data-entry screens, you might not have to use this command at all. The Screen Builder automatically generates the commands that create push buttons and picture push buttons. <br />
<br />
The string of text, often called a prompt, is specified in the FUNCTION or PICTURE clause. Typically, a push button is used to trigger an action. The triggered action is specified in a VALID clause. A push button is activated by issuing READ or READ CYCLE. <br />
<br />
You can create picture push buttons in FoxPro for Windows and FoxPro for Macintosh. Pictures on buttons replace the push button prompts.<br />
<br />
</p>
</div>
<!-- VFPX FPW2.6 end -->
<h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle)" tabindex="0"><img id="seeAlsoToggle" onload="OnLoadImage()" class="toggle" name="toggleSwitch" alt="Expand image" src="../local/expand_all.gif"></img>See Also</span></h1>
<div id="seeAlsoSection" class="section" name="collapseableSection" style="display: none;">
<!-- VFPX FPW2.6 Footer begin -->
<h4 class="subHeading">Other Resources</h4>
<span class="linkTerms"><a href="/html/672125e7-29a8-4d49-b89d-de87f4db5f79.htm">Backward-Compatible Language Elements</a><img class="vfpxmark" src="../local/vfpXmark.gif"/></span><br />
<span class="linkTerms"><a href="/html/6dcddc3f-9944-4ad8-be2f-003610af616a.htm">Language Reference (Visual FoxPro)</a></span><br />
<br />
<!-- VFPX FPW2.6 Footer end -->
</div>
</div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" alt="Footer image" src="../local/footer.gif">
            
            
          </img>
        </div>
        <!-- VFPX Footer-->
<div>
<img src="../local/vfpXnote.gif" style="float: left; border:0; margin-right:8px;">Microsoft Visual FoxPro 9 SP2 Help file, VFPX Edition v1.08<br />
<a href="https://github.com/VFPX/HelpFile/issues" target="_blank">Send feedback</a> on this topic to the <a href="https://github.com/VFPX/HelpFile/" target="_blank">VFPX Help file project team</a>.<br />
2009-2017 Placed under <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank">Creative Commons licensing</a> by Microsoft Corporation. 
<noscript><p class="vfpx" style="color:#FF0000">&nbsp;&nbsp;<b>Not all help features are available because JavaScript is disabled on this computer!</b></p></noscript>
</div>
<!-- VFPX Footer-->
      </div>
    </div>
  </body>
</html>
<OBJECT type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
<param name="ALink Name" value="@ ... GET - Command Buttons Command">
<param name="ALink Name" value="@ ... GET -">
</OBJECT>
